// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/company-service/v1/resources/company.company.resource.v1.proto

package companyv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserDataMultiError, or nil
// if none found.
func (m *UserData) ValidateAll() error {
	return m.validate(true)
}

func (m *UserData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for RegisterType

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for CompanyId

	if len(errors) > 0 {
		return UserDataMultiError(errors)
	}

	return nil
}

// UserDataMultiError is an error wrapping multiple validation errors returned
// by UserData.ValidateAll() if the designated constraints aren't met.
type UserDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDataMultiError) AllErrors() []error { return m }

// UserDataValidationError is the validation error returned by
// UserData.Validate if the designated constraints aren't met.
type UserDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDataValidationError) Cause() error { return e.cause }

func (e UserDataValidationError) Code() int64 { return 10010001 }

func (e UserDataValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UserDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDataValidationError) ErrorName() string { return "UserDataValidationError" }

// Error satisfies the builtin error interface
func (e UserDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UserDataValidationError{}

// Validate checks the field values on GetUsersByIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersByIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersByIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersByIdsRequestMultiError, or nil if none found.
func (m *GetUsersByIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersByIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUsersByIdsRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUsersByIdsRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsersByIdsRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUsersByIdsRequestMultiError(errors)
	}

	return nil
}

// GetUsersByIdsRequestMultiError is an error wrapping multiple validation
// errors returned by GetUsersByIdsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUsersByIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersByIdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersByIdsRequestMultiError) AllErrors() []error { return m }

// GetUsersByIdsRequestValidationError is the validation error returned by
// GetUsersByIdsRequest.Validate if the designated constraints aren't met.
type GetUsersByIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersByIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersByIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersByIdsRequestValidationError) Cause() error { return e.cause }

func (e GetUsersByIdsRequestValidationError) Code() int64 { return 10010001 }

func (e GetUsersByIdsRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e GetUsersByIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersByIdsRequestValidationError) ErrorName() string {
	return "GetUsersByIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersByIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersByIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersByIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = GetUsersByIdsRequestValidationError{}

// Validate checks the field values on GetUsersByIdsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersByIdsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersByIdsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersByIdsReplyMultiError, or nil if none found.
func (m *GetUsersByIdsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersByIdsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUsersByIdsReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUsersByIdsReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsersByIdsReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUsersByIdsReplyMultiError(errors)
	}

	return nil
}

// GetUsersByIdsReplyMultiError is an error wrapping multiple validation errors
// returned by GetUsersByIdsReply.ValidateAll() if the designated constraints
// aren't met.
type GetUsersByIdsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersByIdsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersByIdsReplyMultiError) AllErrors() []error { return m }

// GetUsersByIdsReplyValidationError is the validation error returned by
// GetUsersByIdsReply.Validate if the designated constraints aren't met.
type GetUsersByIdsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersByIdsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersByIdsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersByIdsReplyValidationError) Cause() error { return e.cause }

func (e GetUsersByIdsReplyValidationError) Code() int64 { return 10010001 }

func (e GetUsersByIdsReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e GetUsersByIdsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersByIdsReplyValidationError) ErrorName() string {
	return "GetUsersByIdsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersByIdsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersByIdsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersByIdsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = GetUsersByIdsReplyValidationError{}

// Validate checks the field values on GetSupplierCompanyByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSupplierCompanyByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSupplierCompanyByIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSupplierCompanyByIdRequestMultiError, or nil if none found.
func (m *GetSupplierCompanyByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSupplierCompanyByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompanyId

	if len(errors) > 0 {
		return GetSupplierCompanyByIdRequestMultiError(errors)
	}

	return nil
}

// GetSupplierCompanyByIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetSupplierCompanyByIdRequest.ValidateAll()
// if the designated constraints aren't met.
type GetSupplierCompanyByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSupplierCompanyByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSupplierCompanyByIdRequestMultiError) AllErrors() []error { return m }

// GetSupplierCompanyByIdRequestValidationError is the validation error
// returned by GetSupplierCompanyByIdRequest.Validate if the designated
// constraints aren't met.
type GetSupplierCompanyByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSupplierCompanyByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSupplierCompanyByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSupplierCompanyByIdRequestValidationError) Cause() error { return e.cause }

func (e GetSupplierCompanyByIdRequestValidationError) Code() int64 { return 10010001 }

func (e GetSupplierCompanyByIdRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e GetSupplierCompanyByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSupplierCompanyByIdRequestValidationError) ErrorName() string {
	return "GetSupplierCompanyByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSupplierCompanyByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSupplierCompanyByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSupplierCompanyByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = GetSupplierCompanyByIdRequestValidationError{}

// Validate checks the field values on SupplierCompanyInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SupplierCompanyInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SupplierCompanyInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SupplierCompanyInfoMultiError, or nil if none found.
func (m *SupplierCompanyInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SupplierCompanyInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Address

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Website

	// no validation rules for Logo

	if len(errors) > 0 {
		return SupplierCompanyInfoMultiError(errors)
	}

	return nil
}

// SupplierCompanyInfoMultiError is an error wrapping multiple validation
// errors returned by SupplierCompanyInfo.ValidateAll() if the designated
// constraints aren't met.
type SupplierCompanyInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SupplierCompanyInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SupplierCompanyInfoMultiError) AllErrors() []error { return m }

// SupplierCompanyInfoValidationError is the validation error returned by
// SupplierCompanyInfo.Validate if the designated constraints aren't met.
type SupplierCompanyInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SupplierCompanyInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SupplierCompanyInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SupplierCompanyInfoValidationError) Cause() error { return e.cause }

func (e SupplierCompanyInfoValidationError) Code() int64 { return 10010001 }

func (e SupplierCompanyInfoValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e SupplierCompanyInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SupplierCompanyInfoValidationError) ErrorName() string {
	return "SupplierCompanyInfoValidationError"
}

// Error satisfies the builtin error interface
func (e SupplierCompanyInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSupplierCompanyInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SupplierCompanyInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = SupplierCompanyInfoValidationError{}

// Validate checks the field values on GetSupplierCompanyByIdReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSupplierCompanyByIdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSupplierCompanyByIdReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSupplierCompanyByIdReplyMultiError, or nil if none found.
func (m *GetSupplierCompanyByIdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSupplierCompanyByIdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSupplierCompanyByIdReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSupplierCompanyByIdReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSupplierCompanyByIdReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSupplierCompanyByIdReplyMultiError(errors)
	}

	return nil
}

// GetSupplierCompanyByIdReplyMultiError is an error wrapping multiple
// validation errors returned by GetSupplierCompanyByIdReply.ValidateAll() if
// the designated constraints aren't met.
type GetSupplierCompanyByIdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSupplierCompanyByIdReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSupplierCompanyByIdReplyMultiError) AllErrors() []error { return m }

// GetSupplierCompanyByIdReplyValidationError is the validation error returned
// by GetSupplierCompanyByIdReply.Validate if the designated constraints
// aren't met.
type GetSupplierCompanyByIdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSupplierCompanyByIdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSupplierCompanyByIdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSupplierCompanyByIdReplyValidationError) Cause() error { return e.cause }

func (e GetSupplierCompanyByIdReplyValidationError) Code() int64 { return 10010001 }

func (e GetSupplierCompanyByIdReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e GetSupplierCompanyByIdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSupplierCompanyByIdReplyValidationError) ErrorName() string {
	return "GetSupplierCompanyByIdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSupplierCompanyByIdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSupplierCompanyByIdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSupplierCompanyByIdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = GetSupplierCompanyByIdReplyValidationError{}

// Validate checks the field values on GetCompanyByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCompanyByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCompanyByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCompanyByIdRequestMultiError, or nil if none found.
func (m *GetCompanyByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompanyByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompanyId

	// no validation rules for RegisterType

	// no validation rules for IsNeedLogo

	if len(errors) > 0 {
		return GetCompanyByIdRequestMultiError(errors)
	}

	return nil
}

// GetCompanyByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetCompanyByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCompanyByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompanyByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompanyByIdRequestMultiError) AllErrors() []error { return m }

// GetCompanyByIdRequestValidationError is the validation error returned by
// GetCompanyByIdRequest.Validate if the designated constraints aren't met.
type GetCompanyByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyByIdRequestValidationError) Cause() error { return e.cause }

func (e GetCompanyByIdRequestValidationError) Code() int64 { return 10010001 }

func (e GetCompanyByIdRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e GetCompanyByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyByIdRequestValidationError) ErrorName() string {
	return "GetCompanyByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = GetCompanyByIdRequestValidationError{}

// Validate checks the field values on GetCompanyByIdReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCompanyByIdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCompanyByIdReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCompanyByIdReplyMultiError, or nil if none found.
func (m *GetCompanyByIdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompanyByIdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Name

	// no validation rules for Logo

	// no validation rules for CompanyLabel

	if len(errors) > 0 {
		return GetCompanyByIdReplyMultiError(errors)
	}

	return nil
}

// GetCompanyByIdReplyMultiError is an error wrapping multiple validation
// errors returned by GetCompanyByIdReply.ValidateAll() if the designated
// constraints aren't met.
type GetCompanyByIdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompanyByIdReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompanyByIdReplyMultiError) AllErrors() []error { return m }

// GetCompanyByIdReplyValidationError is the validation error returned by
// GetCompanyByIdReply.Validate if the designated constraints aren't met.
type GetCompanyByIdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyByIdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyByIdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyByIdReplyValidationError) Cause() error { return e.cause }

func (e GetCompanyByIdReplyValidationError) Code() int64 { return 10010001 }

func (e GetCompanyByIdReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e GetCompanyByIdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyByIdReplyValidationError) ErrorName() string {
	return "GetCompanyByIdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyByIdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyByIdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyByIdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = GetCompanyByIdReplyValidationError{}

// Validate checks the field values on GetPartCompanyListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPartCompanyListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartCompanyListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartCompanyListRequestMultiError, or nil if none found.
func (m *GetPartCompanyListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartCompanyListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompanyId

	if len(errors) > 0 {
		return GetPartCompanyListRequestMultiError(errors)
	}

	return nil
}

// GetPartCompanyListRequestMultiError is an error wrapping multiple validation
// errors returned by GetPartCompanyListRequest.ValidateAll() if the
// designated constraints aren't met.
type GetPartCompanyListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartCompanyListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartCompanyListRequestMultiError) AllErrors() []error { return m }

// GetPartCompanyListRequestValidationError is the validation error returned by
// GetPartCompanyListRequest.Validate if the designated constraints aren't met.
type GetPartCompanyListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartCompanyListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartCompanyListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartCompanyListRequestValidationError) Cause() error { return e.cause }

func (e GetPartCompanyListRequestValidationError) Code() int64 { return 10010001 }

func (e GetPartCompanyListRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e GetPartCompanyListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartCompanyListRequestValidationError) ErrorName() string {
	return "GetPartCompanyListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartCompanyListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartCompanyListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartCompanyListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = GetPartCompanyListRequestValidationError{}

// Validate checks the field values on GetPartCompanyListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPartCompanyListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartCompanyListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartCompanyListReplyMultiError, or nil if none found.
func (m *GetPartCompanyListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartCompanyListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for IsPartAll

	if len(errors) > 0 {
		return GetPartCompanyListReplyMultiError(errors)
	}

	return nil
}

// GetPartCompanyListReplyMultiError is an error wrapping multiple validation
// errors returned by GetPartCompanyListReply.ValidateAll() if the designated
// constraints aren't met.
type GetPartCompanyListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartCompanyListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartCompanyListReplyMultiError) AllErrors() []error { return m }

// GetPartCompanyListReplyValidationError is the validation error returned by
// GetPartCompanyListReply.Validate if the designated constraints aren't met.
type GetPartCompanyListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartCompanyListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartCompanyListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartCompanyListReplyValidationError) Cause() error { return e.cause }

func (e GetPartCompanyListReplyValidationError) Code() int64 { return 10010001 }

func (e GetPartCompanyListReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e GetPartCompanyListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartCompanyListReplyValidationError) ErrorName() string {
	return "GetPartCompanyListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartCompanyListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartCompanyListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartCompanyListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = GetPartCompanyListReplyValidationError{}

// Validate checks the field values on GetPrivilegeLimitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPrivilegeLimitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPrivilegeLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPrivilegeLimitRequestMultiError, or nil if none found.
func (m *GetPrivilegeLimitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPrivilegeLimitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompanyId

	// no validation rules for PrivilegeType

	if len(errors) > 0 {
		return GetPrivilegeLimitRequestMultiError(errors)
	}

	return nil
}

// GetPrivilegeLimitRequestMultiError is an error wrapping multiple validation
// errors returned by GetPrivilegeLimitRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPrivilegeLimitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPrivilegeLimitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPrivilegeLimitRequestMultiError) AllErrors() []error { return m }

// GetPrivilegeLimitRequestValidationError is the validation error returned by
// GetPrivilegeLimitRequest.Validate if the designated constraints aren't met.
type GetPrivilegeLimitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrivilegeLimitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrivilegeLimitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPrivilegeLimitRequestValidationError) Cause() error { return e.cause }

func (e GetPrivilegeLimitRequestValidationError) Code() int64 { return 10010001 }

func (e GetPrivilegeLimitRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e GetPrivilegeLimitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrivilegeLimitRequestValidationError) ErrorName() string {
	return "GetPrivilegeLimitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrivilegeLimitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrivilegeLimitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrivilegeLimitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = GetPrivilegeLimitRequestValidationError{}

// Validate checks the field values on GetPrivilegeLimitReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPrivilegeLimitReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPrivilegeLimitReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPrivilegeLimitReplyMultiError, or nil if none found.
func (m *GetPrivilegeLimitReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPrivilegeLimitReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetPrivilegeLimitReplyMultiError(errors)
	}

	return nil
}

// GetPrivilegeLimitReplyMultiError is an error wrapping multiple validation
// errors returned by GetPrivilegeLimitReply.ValidateAll() if the designated
// constraints aren't met.
type GetPrivilegeLimitReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPrivilegeLimitReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPrivilegeLimitReplyMultiError) AllErrors() []error { return m }

// GetPrivilegeLimitReplyValidationError is the validation error returned by
// GetPrivilegeLimitReply.Validate if the designated constraints aren't met.
type GetPrivilegeLimitReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrivilegeLimitReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrivilegeLimitReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPrivilegeLimitReplyValidationError) Cause() error { return e.cause }

func (e GetPrivilegeLimitReplyValidationError) Code() int64 { return 10010001 }

func (e GetPrivilegeLimitReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e GetPrivilegeLimitReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrivilegeLimitReplyValidationError) ErrorName() string {
	return "GetPrivilegeLimitReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrivilegeLimitReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrivilegeLimitReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrivilegeLimitReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = GetPrivilegeLimitReplyValidationError{}

// Validate checks the field values on CheckAndUpdatePrivilegeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckAndUpdatePrivilegeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAndUpdatePrivilegeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckAndUpdatePrivilegeRequestMultiError, or nil if none found.
func (m *CheckAndUpdatePrivilegeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAndUpdatePrivilegeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompanyId

	// no validation rules for PrivilegeType

	// no validation rules for Increase

	if len(errors) > 0 {
		return CheckAndUpdatePrivilegeRequestMultiError(errors)
	}

	return nil
}

// CheckAndUpdatePrivilegeRequestMultiError is an error wrapping multiple
// validation errors returned by CheckAndUpdatePrivilegeRequest.ValidateAll()
// if the designated constraints aren't met.
type CheckAndUpdatePrivilegeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAndUpdatePrivilegeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAndUpdatePrivilegeRequestMultiError) AllErrors() []error { return m }

// CheckAndUpdatePrivilegeRequestValidationError is the validation error
// returned by CheckAndUpdatePrivilegeRequest.Validate if the designated
// constraints aren't met.
type CheckAndUpdatePrivilegeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAndUpdatePrivilegeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAndUpdatePrivilegeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAndUpdatePrivilegeRequestValidationError) Cause() error { return e.cause }

func (e CheckAndUpdatePrivilegeRequestValidationError) Code() int64 { return 10010001 }

func (e CheckAndUpdatePrivilegeRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e CheckAndUpdatePrivilegeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAndUpdatePrivilegeRequestValidationError) ErrorName() string {
	return "CheckAndUpdatePrivilegeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckAndUpdatePrivilegeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAndUpdatePrivilegeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAndUpdatePrivilegeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = CheckAndUpdatePrivilegeRequestValidationError{}

// Validate checks the field values on CheckAndUpdatePrivilegeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckAndUpdatePrivilegeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAndUpdatePrivilegeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckAndUpdatePrivilegeReplyMultiError, or nil if none found.
func (m *CheckAndUpdatePrivilegeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAndUpdatePrivilegeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CheckAndUpdatePrivilegeReplyMultiError(errors)
	}

	return nil
}

// CheckAndUpdatePrivilegeReplyMultiError is an error wrapping multiple
// validation errors returned by CheckAndUpdatePrivilegeReply.ValidateAll() if
// the designated constraints aren't met.
type CheckAndUpdatePrivilegeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAndUpdatePrivilegeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAndUpdatePrivilegeReplyMultiError) AllErrors() []error { return m }

// CheckAndUpdatePrivilegeReplyValidationError is the validation error returned
// by CheckAndUpdatePrivilegeReply.Validate if the designated constraints
// aren't met.
type CheckAndUpdatePrivilegeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAndUpdatePrivilegeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAndUpdatePrivilegeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAndUpdatePrivilegeReplyValidationError) Cause() error { return e.cause }

func (e CheckAndUpdatePrivilegeReplyValidationError) Code() int64 { return 10010001 }

func (e CheckAndUpdatePrivilegeReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e CheckAndUpdatePrivilegeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAndUpdatePrivilegeReplyValidationError) ErrorName() string {
	return "CheckAndUpdatePrivilegeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CheckAndUpdatePrivilegeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAndUpdatePrivilegeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAndUpdatePrivilegeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = CheckAndUpdatePrivilegeReplyValidationError{}

// Validate checks the field values on UpdateEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEmployeeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEmployeeRequestMultiError, or nil if none found.
func (m *UpdateEmployeeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEmployeeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Name

	// no validation rules for Avatar

	// no validation rules for Passwd

	// no validation rules for RegisterType

	// no validation rules for CompanyId

	if len(errors) > 0 {
		return UpdateEmployeeRequestMultiError(errors)
	}

	return nil
}

// UpdateEmployeeRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateEmployeeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEmployeeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEmployeeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEmployeeRequestMultiError) AllErrors() []error { return m }

// UpdateEmployeeRequestValidationError is the validation error returned by
// UpdateEmployeeRequest.Validate if the designated constraints aren't met.
type UpdateEmployeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmployeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmployeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmployeeRequestValidationError) Cause() error { return e.cause }

func (e UpdateEmployeeRequestValidationError) Code() int64 { return 10010001 }

func (e UpdateEmployeeRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UpdateEmployeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmployeeRequestValidationError) ErrorName() string {
	return "UpdateEmployeeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmployeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmployeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmployeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UpdateEmployeeRequestValidationError{}

// Validate checks the field values on UpdateEmployeeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEmployeeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEmployeeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEmployeeReplyMultiError, or nil if none found.
func (m *UpdateEmployeeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEmployeeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UpdateEmployeeReplyMultiError(errors)
	}

	return nil
}

// UpdateEmployeeReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateEmployeeReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateEmployeeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEmployeeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEmployeeReplyMultiError) AllErrors() []error { return m }

// UpdateEmployeeReplyValidationError is the validation error returned by
// UpdateEmployeeReply.Validate if the designated constraints aren't met.
type UpdateEmployeeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmployeeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmployeeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmployeeReplyValidationError) Cause() error { return e.cause }

func (e UpdateEmployeeReplyValidationError) Code() int64 { return 10010001 }

func (e UpdateEmployeeReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UpdateEmployeeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmployeeReplyValidationError) ErrorName() string {
	return "UpdateEmployeeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmployeeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmployeeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmployeeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UpdateEmployeeReplyValidationError{}

// Validate checks the field values on GetEmployeeByUidRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmployeeByUidRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmployeeByUidRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmployeeByUidRequestMultiError, or nil if none found.
func (m *GetEmployeeByUidRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmployeeByUidRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for RegisterType

	// no validation rules for CompanyId

	if len(errors) > 0 {
		return GetEmployeeByUidRequestMultiError(errors)
	}

	return nil
}

// GetEmployeeByUidRequestMultiError is an error wrapping multiple validation
// errors returned by GetEmployeeByUidRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEmployeeByUidRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmployeeByUidRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmployeeByUidRequestMultiError) AllErrors() []error { return m }

// GetEmployeeByUidRequestValidationError is the validation error returned by
// GetEmployeeByUidRequest.Validate if the designated constraints aren't met.
type GetEmployeeByUidRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmployeeByUidRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmployeeByUidRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmployeeByUidRequestValidationError) Cause() error { return e.cause }

func (e GetEmployeeByUidRequestValidationError) Code() int64 { return 10010001 }

func (e GetEmployeeByUidRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e GetEmployeeByUidRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmployeeByUidRequestValidationError) ErrorName() string {
	return "GetEmployeeByUidRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmployeeByUidRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmployeeByUidRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmployeeByUidRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = GetEmployeeByUidRequestValidationError{}

// Validate checks the field values on GetEmployeeByUidReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmployeeByUidReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmployeeByUidReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmployeeByUidReplyMultiError, or nil if none found.
func (m *GetEmployeeByUidReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmployeeByUidReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Passwd

	// no validation rules for CompanyId

	// no validation rules for Role

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Avatar

	// no validation rules for CompanyLabel

	if len(errors) > 0 {
		return GetEmployeeByUidReplyMultiError(errors)
	}

	return nil
}

// GetEmployeeByUidReplyMultiError is an error wrapping multiple validation
// errors returned by GetEmployeeByUidReply.ValidateAll() if the designated
// constraints aren't met.
type GetEmployeeByUidReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmployeeByUidReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmployeeByUidReplyMultiError) AllErrors() []error { return m }

// GetEmployeeByUidReplyValidationError is the validation error returned by
// GetEmployeeByUidReply.Validate if the designated constraints aren't met.
type GetEmployeeByUidReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmployeeByUidReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmployeeByUidReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmployeeByUidReplyValidationError) Cause() error { return e.cause }

func (e GetEmployeeByUidReplyValidationError) Code() int64 { return 10010001 }

func (e GetEmployeeByUidReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e GetEmployeeByUidReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmployeeByUidReplyValidationError) ErrorName() string {
	return "GetEmployeeByUidReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmployeeByUidReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmployeeByUidReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmployeeByUidReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = GetEmployeeByUidReplyValidationError{}

// Validate checks the field values on GetEmployeeInfoByLoginRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmployeeInfoByLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmployeeInfoByLoginRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetEmployeeInfoByLoginRequestMultiError, or nil if none found.
func (m *GetEmployeeInfoByLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmployeeInfoByLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for RegisterType

	if len(errors) > 0 {
		return GetEmployeeInfoByLoginRequestMultiError(errors)
	}

	return nil
}

// GetEmployeeInfoByLoginRequestMultiError is an error wrapping multiple
// validation errors returned by GetEmployeeInfoByLoginRequest.ValidateAll()
// if the designated constraints aren't met.
type GetEmployeeInfoByLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmployeeInfoByLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmployeeInfoByLoginRequestMultiError) AllErrors() []error { return m }

// GetEmployeeInfoByLoginRequestValidationError is the validation error
// returned by GetEmployeeInfoByLoginRequest.Validate if the designated
// constraints aren't met.
type GetEmployeeInfoByLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmployeeInfoByLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmployeeInfoByLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmployeeInfoByLoginRequestValidationError) Cause() error { return e.cause }

func (e GetEmployeeInfoByLoginRequestValidationError) Code() int64 { return 10010001 }

func (e GetEmployeeInfoByLoginRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e GetEmployeeInfoByLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmployeeInfoByLoginRequestValidationError) ErrorName() string {
	return "GetEmployeeInfoByLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmployeeInfoByLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmployeeInfoByLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmployeeInfoByLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = GetEmployeeInfoByLoginRequestValidationError{}

// Validate checks the field values on GetEmployeeInfoByLoginReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmployeeInfoByLoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmployeeInfoByLoginReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmployeeInfoByLoginReplyMultiError, or nil if none found.
func (m *GetEmployeeInfoByLoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmployeeInfoByLoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Passwd

	// no validation rules for CompanyId

	// no validation rules for Role

	// no validation rules for Message

	// no validation rules for CompanyLabel

	if len(errors) > 0 {
		return GetEmployeeInfoByLoginReplyMultiError(errors)
	}

	return nil
}

// GetEmployeeInfoByLoginReplyMultiError is an error wrapping multiple
// validation errors returned by GetEmployeeInfoByLoginReply.ValidateAll() if
// the designated constraints aren't met.
type GetEmployeeInfoByLoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmployeeInfoByLoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmployeeInfoByLoginReplyMultiError) AllErrors() []error { return m }

// GetEmployeeInfoByLoginReplyValidationError is the validation error returned
// by GetEmployeeInfoByLoginReply.Validate if the designated constraints
// aren't met.
type GetEmployeeInfoByLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmployeeInfoByLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmployeeInfoByLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmployeeInfoByLoginReplyValidationError) Cause() error { return e.cause }

func (e GetEmployeeInfoByLoginReplyValidationError) Code() int64 { return 10010001 }

func (e GetEmployeeInfoByLoginReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e GetEmployeeInfoByLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmployeeInfoByLoginReplyValidationError) ErrorName() string {
	return "GetEmployeeInfoByLoginReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmployeeInfoByLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmployeeInfoByLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmployeeInfoByLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = GetEmployeeInfoByLoginReplyValidationError{}

// Validate checks the field values on CreateDesignerORGForPersonRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateDesignerORGForPersonRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDesignerORGForPersonRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateDesignerORGForPersonRequestMultiError, or nil if none found.
func (m *CreateDesignerORGForPersonRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDesignerORGForPersonRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Username

	// no validation rules for ContactPhone

	// no validation rules for ContactEmail

	// no validation rules for CompanyAvatar

	if len(errors) > 0 {
		return CreateDesignerORGForPersonRequestMultiError(errors)
	}

	return nil
}

// CreateDesignerORGForPersonRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateDesignerORGForPersonRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDesignerORGForPersonRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDesignerORGForPersonRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDesignerORGForPersonRequestMultiError) AllErrors() []error { return m }

// CreateDesignerORGForPersonRequestValidationError is the validation error
// returned by CreateDesignerORGForPersonRequest.Validate if the designated
// constraints aren't met.
type CreateDesignerORGForPersonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDesignerORGForPersonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDesignerORGForPersonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDesignerORGForPersonRequestValidationError) Cause() error { return e.cause }

func (e CreateDesignerORGForPersonRequestValidationError) Code() int64 { return 10010001 }

func (e CreateDesignerORGForPersonRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e CreateDesignerORGForPersonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDesignerORGForPersonRequestValidationError) ErrorName() string {
	return "CreateDesignerORGForPersonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDesignerORGForPersonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDesignerORGForPersonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDesignerORGForPersonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = CreateDesignerORGForPersonRequestValidationError{}

// Validate checks the field values on CreateDesignerORGForPersonReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDesignerORGForPersonReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDesignerORGForPersonReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateDesignerORGForPersonReplyMultiError, or nil if none found.
func (m *CreateDesignerORGForPersonReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDesignerORGForPersonReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDesignerORGForPersonReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDesignerORGForPersonReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDesignerORGForPersonReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDesignerORGForPersonReplyMultiError(errors)
	}

	return nil
}

// CreateDesignerORGForPersonReplyMultiError is an error wrapping multiple
// validation errors returned by CreateDesignerORGForPersonReply.ValidateAll()
// if the designated constraints aren't met.
type CreateDesignerORGForPersonReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDesignerORGForPersonReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDesignerORGForPersonReplyMultiError) AllErrors() []error { return m }

// CreateDesignerORGForPersonReplyValidationError is the validation error
// returned by CreateDesignerORGForPersonReply.Validate if the designated
// constraints aren't met.
type CreateDesignerORGForPersonReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDesignerORGForPersonReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDesignerORGForPersonReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDesignerORGForPersonReplyValidationError) Cause() error { return e.cause }

func (e CreateDesignerORGForPersonReplyValidationError) Code() int64 { return 10010001 }

func (e CreateDesignerORGForPersonReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e CreateDesignerORGForPersonReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDesignerORGForPersonReplyValidationError) ErrorName() string {
	return "CreateDesignerORGForPersonReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDesignerORGForPersonReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDesignerORGForPersonReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDesignerORGForPersonReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = CreateDesignerORGForPersonReplyValidationError{}

// Validate checks the field values on DesignerCompanyInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DesignerCompanyInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DesignerCompanyInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DesignerCompanyInfoMultiError, or nil if none found.
func (m *DesignerCompanyInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *DesignerCompanyInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for GroupId

	// no validation rules for Logo

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for ContactName

	// no validation rules for CreateTime

	// no validation rules for CompanyLabel

	if len(errors) > 0 {
		return DesignerCompanyInfoMultiError(errors)
	}

	return nil
}

// DesignerCompanyInfoMultiError is an error wrapping multiple validation
// errors returned by DesignerCompanyInfo.ValidateAll() if the designated
// constraints aren't met.
type DesignerCompanyInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DesignerCompanyInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DesignerCompanyInfoMultiError) AllErrors() []error { return m }

// DesignerCompanyInfoValidationError is the validation error returned by
// DesignerCompanyInfo.Validate if the designated constraints aren't met.
type DesignerCompanyInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DesignerCompanyInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DesignerCompanyInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DesignerCompanyInfoValidationError) Cause() error { return e.cause }

func (e DesignerCompanyInfoValidationError) Code() int64 { return 10010001 }

func (e DesignerCompanyInfoValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e DesignerCompanyInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DesignerCompanyInfoValidationError) ErrorName() string {
	return "DesignerCompanyInfoValidationError"
}

// Error satisfies the builtin error interface
func (e DesignerCompanyInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDesignerCompanyInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DesignerCompanyInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = DesignerCompanyInfoValidationError{}

// Validate checks the field values on GetAndCheckLastCompanyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAndCheckLastCompanyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAndCheckLastCompanyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAndCheckLastCompanyRequestMultiError, or nil if none found.
func (m *GetAndCheckLastCompanyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAndCheckLastCompanyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for CompanyId

	if len(errors) > 0 {
		return GetAndCheckLastCompanyRequestMultiError(errors)
	}

	return nil
}

// GetAndCheckLastCompanyRequestMultiError is an error wrapping multiple
// validation errors returned by GetAndCheckLastCompanyRequest.ValidateAll()
// if the designated constraints aren't met.
type GetAndCheckLastCompanyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAndCheckLastCompanyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAndCheckLastCompanyRequestMultiError) AllErrors() []error { return m }

// GetAndCheckLastCompanyRequestValidationError is the validation error
// returned by GetAndCheckLastCompanyRequest.Validate if the designated
// constraints aren't met.
type GetAndCheckLastCompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAndCheckLastCompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAndCheckLastCompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAndCheckLastCompanyRequestValidationError) Cause() error { return e.cause }

func (e GetAndCheckLastCompanyRequestValidationError) Code() int64 { return 10010001 }

func (e GetAndCheckLastCompanyRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e GetAndCheckLastCompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAndCheckLastCompanyRequestValidationError) ErrorName() string {
	return "GetAndCheckLastCompanyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAndCheckLastCompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAndCheckLastCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAndCheckLastCompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = GetAndCheckLastCompanyRequestValidationError{}

// Validate checks the field values on GetAndCheckLastCompanyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAndCheckLastCompanyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAndCheckLastCompanyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAndCheckLastCompanyReplyMultiError, or nil if none found.
func (m *GetAndCheckLastCompanyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAndCheckLastCompanyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAndCheckLastCompanyReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAndCheckLastCompanyReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAndCheckLastCompanyReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAndCheckLastCompanyReplyMultiError(errors)
	}

	return nil
}

// GetAndCheckLastCompanyReplyMultiError is an error wrapping multiple
// validation errors returned by GetAndCheckLastCompanyReply.ValidateAll() if
// the designated constraints aren't met.
type GetAndCheckLastCompanyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAndCheckLastCompanyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAndCheckLastCompanyReplyMultiError) AllErrors() []error { return m }

// GetAndCheckLastCompanyReplyValidationError is the validation error returned
// by GetAndCheckLastCompanyReply.Validate if the designated constraints
// aren't met.
type GetAndCheckLastCompanyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAndCheckLastCompanyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAndCheckLastCompanyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAndCheckLastCompanyReplyValidationError) Cause() error { return e.cause }

func (e GetAndCheckLastCompanyReplyValidationError) Code() int64 { return 10010001 }

func (e GetAndCheckLastCompanyReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e GetAndCheckLastCompanyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAndCheckLastCompanyReplyValidationError) ErrorName() string {
	return "GetAndCheckLastCompanyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAndCheckLastCompanyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAndCheckLastCompanyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAndCheckLastCompanyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = GetAndCheckLastCompanyReplyValidationError{}
