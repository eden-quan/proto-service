// Code generated by protoc-gen-go-fx. DO NOT EDIT.
// versions:
// 	protoc-gen-go-fx v1.32.0-devel
// 	protoc        v5.26.1
// source: api/company-service/v1/errors/company.company.error.v1.proto

package companyerrorv1

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/go-kratos/kratos/v2/errors"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ERROR .
type COMPANY_ERROR int32

const (
	COMPANY_ERROR_COMPANY_UNKNOWN            COMPANY_ERROR = 0
	COMPANY_ERROR_PARAM                      COMPANY_ERROR = 100001    // 	params error
	COMPANY_ERROR_INTERNAL                   COMPANY_ERROR = 100002    // 	internal error
	COMPANY_ERROR_AUTHORIZATION_TOKEN        COMPANY_ERROR = 100003    // 	authorization token error
	COMPANY_ERROR_TOKEN_INVALID              COMPANY_ERROR = 100004    // 	token invalid
	COMPANY_ERROR_USER_NOT_EXIT              COMPANY_ERROR = 100001401 // 	user is not exist
	COMPANY_ERROR_COMPANY_NOT_EXIT           COMPANY_ERROR = 100001402 // 	company is not exist
	COMPANY_ERROR_USER_NOT_IN_COMPANY        COMPANY_ERROR = 100001403 // 	user not in company
	COMPANY_ERROR_USER_NOT_ADMIN             COMPANY_ERROR = 100001404 // 	user not admin
	COMPANY_ERROR_PWD_DecryptPassword        COMPANY_ERROR = 100001405 // 	password is Decrypted failed
	COMPANY_ERROR_UPLOAD_DATA                COMPANY_ERROR = 100001406 // 	upload data error
	COMPANY_ERROR_PRIVILEGE_NOT_ENOUGH       COMPANY_ERROR = 100001407 // 	privilege not good
	COMPANY_ERROR_MEMBER_IS_FULL             COMPANY_ERROR = 100001408 // 	member is full
	COMPANY_ERROR_USETIME_IS_FULL            COMPANY_ERROR = 100001409 // 	use time is over
	COMPANY_ERROR_PWD_EMPTY                  COMPANY_ERROR = 100001410 // 	passwd is empty
	COMPANY_ERROR_PWD_SAME                   COMPANY_ERROR = 100001411 // 	passwd is same
	COMPANY_ERROR_DELETE_YOURSELF            COMPANY_ERROR = 100001412 // 	can not delete yourself
	COMPANY_ERROR_PHONE_EXIST                COMPANY_ERROR = 100001413 // 	this phone exist
	COMPANY_ERROR_PWD_LENGTH_NOT_GOOD        COMPANY_ERROR = 100001414 // 	passwd length is not good
	COMPANY_ERROR_BUSINESS_LICENSE_EMPTY     COMPANY_ERROR = 100001415 // 	business license is empty
	COMPANY_ERROR_PRODUCTION_LICENSE_EMPTY   COMPANY_ERROR = 100001416 // 	production license is empty
	COMPANY_ERROR_PRIVILEGE_TYPE_ERROR       COMPANY_ERROR = 100001417 // 	privilege type error
	COMPANY_ERROR_EMAIL_NOT_REGEX_MATCH      COMPANY_ERROR = 100001418 // 	email regex error
	COMPANY_ERROR_PHONE_NOT_REGEX_MATCH      COMPANY_ERROR = 100001419 // 	phone regex error
	COMPANY_ERROR_ROLE_PERMISSION_NOT_ENOUGH COMPANY_ERROR = 100001420 // 	role permission not enough
	COMPANY_ERROR_USER_NOT_REGISTED          COMPANY_ERROR = 100001421 // 	user not registed
	COMPANY_ERROR_INVITE_SELF                COMPANY_ERROR = 100001422 // 	invite self not allow
	COMPANY_ERROR_FORBID                     COMPANY_ERROR = 100001423 // 	forbid error
	COMPANY_ERROR_USER_IN_COMPANY            COMPANY_ERROR = 100001424 // 	user in company
	COMPANY_ERROR_COMPANY_NOT_FOUND          COMPANY_ERROR = 100001425 // 	company not found
	COMPANY_ERROR_INVITE_RECORD_USED         COMPANY_ERROR = 100001426 // 	invite record used
	COMPANY_ERROR_CREATE_INVITE_RECORD       COMPANY_ERROR = 100001427 // 	create invite record error
	COMPANY_ERROR_NOT_SUPPORT_ADD_MEMBER     COMPANY_ERROR = 100001428 // 	not support add member
	COMPANY_ERROR_HAS_NOT_INVITE_RECORD      COMPANY_ERROR = 100001429 // 	has not invite record
	COMPANY_ERROR_CANNOT_DELETE_PERSON_ORG   COMPANY_ERROR = 100001430 // 	cannot delete company
	COMPANY_ERROR_NOT_SUPPORT_DEL_MEMBER     COMPANY_ERROR = 100001431 // 	not support delete member
	COMPANY_ERROR_SWITCH_IS_CURRENT_COMPANY  COMPANY_ERROR = 100001432 // 	switch company is current company
)

// Enum value maps for COMPANY_ERROR.
var (
	COMPANY_ERROR_name = map[int32]string{
		0:         "COMPANY_UNKNOWN",
		100001:    "PARAM",
		100002:    "INTERNAL",
		100003:    "AUTHORIZATION_TOKEN",
		100004:    "TOKEN_INVALID",
		100001401: "USER_NOT_EXIT",
		100001402: "COMPANY_NOT_EXIT",
		100001403: "USER_NOT_IN_COMPANY",
		100001404: "USER_NOT_ADMIN",
		100001405: "PWD_DecryptPassword",
		100001406: "UPLOAD_DATA",
		100001407: "PRIVILEGE_NOT_ENOUGH",
		100001408: "MEMBER_IS_FULL",
		100001409: "USETIME_IS_FULL",
		100001410: "PWD_EMPTY",
		100001411: "PWD_SAME",
		100001412: "DELETE_YOURSELF",
		100001413: "PHONE_EXIST",
		100001414: "PWD_LENGTH_NOT_GOOD",
		100001415: "BUSINESS_LICENSE_EMPTY",
		100001416: "PRODUCTION_LICENSE_EMPTY",
		100001417: "PRIVILEGE_TYPE_ERROR",
		100001418: "EMAIL_NOT_REGEX_MATCH",
		100001419: "PHONE_NOT_REGEX_MATCH",
		100001420: "ROLE_PERMISSION_NOT_ENOUGH",
		100001421: "USER_NOT_REGISTED",
		100001422: "INVITE_SELF",
		100001423: "FORBID",
		100001424: "USER_IN_COMPANY",
		100001425: "COMPANY_NOT_FOUND",
		100001426: "INVITE_RECORD_USED",
		100001427: "CREATE_INVITE_RECORD",
		100001428: "NOT_SUPPORT_ADD_MEMBER",
		100001429: "HAS_NOT_INVITE_RECORD",
		100001430: "CANNOT_DELETE_PERSON_ORG",
		100001431: "NOT_SUPPORT_DEL_MEMBER",
		100001432: "SWITCH_IS_CURRENT_COMPANY",
	}
	COMPANY_ERROR_value = map[string]int32{
		"COMPANY_UNKNOWN":            0,
		"PARAM":                      100001,
		"INTERNAL":                   100002,
		"AUTHORIZATION_TOKEN":        100003,
		"TOKEN_INVALID":              100004,
		"USER_NOT_EXIT":              100001401,
		"COMPANY_NOT_EXIT":           100001402,
		"USER_NOT_IN_COMPANY":        100001403,
		"USER_NOT_ADMIN":             100001404,
		"PWD_DecryptPassword":        100001405,
		"UPLOAD_DATA":                100001406,
		"PRIVILEGE_NOT_ENOUGH":       100001407,
		"MEMBER_IS_FULL":             100001408,
		"USETIME_IS_FULL":            100001409,
		"PWD_EMPTY":                  100001410,
		"PWD_SAME":                   100001411,
		"DELETE_YOURSELF":            100001412,
		"PHONE_EXIST":                100001413,
		"PWD_LENGTH_NOT_GOOD":        100001414,
		"BUSINESS_LICENSE_EMPTY":     100001415,
		"PRODUCTION_LICENSE_EMPTY":   100001416,
		"PRIVILEGE_TYPE_ERROR":       100001417,
		"EMAIL_NOT_REGEX_MATCH":      100001418,
		"PHONE_NOT_REGEX_MATCH":      100001419,
		"ROLE_PERMISSION_NOT_ENOUGH": 100001420,
		"USER_NOT_REGISTED":          100001421,
		"INVITE_SELF":                100001422,
		"FORBID":                     100001423,
		"USER_IN_COMPANY":            100001424,
		"COMPANY_NOT_FOUND":          100001425,
		"INVITE_RECORD_USED":         100001426,
		"CREATE_INVITE_RECORD":       100001427,
		"NOT_SUPPORT_ADD_MEMBER":     100001428,
		"HAS_NOT_INVITE_RECORD":      100001429,
		"CANNOT_DELETE_PERSON_ORG":   100001430,
		"NOT_SUPPORT_DEL_MEMBER":     100001431,
		"SWITCH_IS_CURRENT_COMPANY":  100001432,
	}
)

func (x COMPANY_ERROR) Enum() *COMPANY_ERROR {
	p := new(COMPANY_ERROR)
	*p = x
	return p
}

func (x COMPANY_ERROR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COMPANY_ERROR) Descriptor() protoreflect.EnumDescriptor {
	return file_api_company_service_v1_errors_company_company_error_v1_proto_enumTypes[0].Descriptor()
}

func (COMPANY_ERROR) Type() protoreflect.EnumType {
	return &file_api_company_service_v1_errors_company_company_error_v1_proto_enumTypes[0]
}

func (x COMPANY_ERROR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COMPANY_ERROR.Descriptor instead.
func (COMPANY_ERROR) EnumDescriptor() ([]byte, []int) {
	return file_api_company_service_v1_errors_company_company_error_v1_proto_rawDescGZIP(), []int{0}
}

var File_api_company_service_v1_errors_company_company_error_v1_proto protoreflect.FileDescriptor

var file_api_company_service_v1_errors_company_company_error_v1_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x76, 0x31, 0x1a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xa0, 0x09, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x50,
	0x41, 0x4e, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x19, 0x0a, 0x0f, 0x43, 0x4f, 0x4d,
	0x50, 0x41, 0x4e, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x04,
	0xa8, 0x45, 0x94, 0x03, 0x12, 0x11, 0x0a, 0x05, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0xa1, 0x8d,
	0x06, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x14, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x10, 0xa2, 0x8d, 0x06, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x1f, 0x0a,
	0x13, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x10, 0xa3, 0x8d, 0x06, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x19,
	0x0a, 0x0d, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0xa4, 0x8d, 0x06, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x1a, 0x0a, 0x0d, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0xf9, 0xcc, 0xd7, 0x2f, 0x1a,
	0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x1d, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0xfa, 0xcc, 0xd7, 0x2f, 0x1a, 0x04,
	0xa8, 0x45, 0x90, 0x03, 0x12, 0x20, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x10, 0xfb, 0xcc, 0xd7, 0x2f,
	0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x1b, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0xfc, 0xcc, 0xd7, 0x2f, 0x1a, 0x04, 0xa8,
	0x45, 0x90, 0x03, 0x12, 0x20, 0x0a, 0x13, 0x50, 0x57, 0x44, 0x5f, 0x44, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x10, 0xfd, 0xcc, 0xd7, 0x2f, 0x1a,
	0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x18, 0x0a, 0x0b, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x10, 0xfe, 0xcc, 0xd7, 0x2f, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12,
	0x21, 0x0a, 0x14, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x10, 0xff, 0xcc, 0xd7, 0x2f, 0x1a, 0x04, 0xa8, 0x45,
	0x90, 0x03, 0x12, 0x1b, 0x0a, 0x0e, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x10, 0x80, 0xcd, 0xd7, 0x2f, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12,
	0x1c, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x46, 0x55,
	0x4c, 0x4c, 0x10, 0x81, 0xcd, 0xd7, 0x2f, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x16, 0x0a,
	0x09, 0x50, 0x57, 0x44, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x82, 0xcd, 0xd7, 0x2f, 0x1a,
	0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x15, 0x0a, 0x08, 0x50, 0x57, 0x44, 0x5f, 0x53, 0x41, 0x4d,
	0x45, 0x10, 0x83, 0xcd, 0xd7, 0x2f, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x1c, 0x0a, 0x0f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x59, 0x4f, 0x55, 0x52, 0x53, 0x45, 0x4c, 0x46, 0x10,
	0x84, 0xcd, 0xd7, 0x2f, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x18, 0x0a, 0x0b, 0x50, 0x48,
	0x4f, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x85, 0xcd, 0xd7, 0x2f, 0x1a, 0x04,
	0xa8, 0x45, 0x90, 0x03, 0x12, 0x20, 0x0a, 0x13, 0x50, 0x57, 0x44, 0x5f, 0x4c, 0x45, 0x4e, 0x47,
	0x54, 0x48, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x10, 0x86, 0xcd, 0xd7, 0x2f,
	0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x23, 0x0a, 0x16, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45,
	0x53, 0x53, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59,
	0x10, 0x87, 0xcd, 0xd7, 0x2f, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x25, 0x0a, 0x18, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53,
	0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x88, 0xcd, 0xd7, 0x2f, 0x1a, 0x04, 0xa8, 0x45,
	0x90, 0x03, 0x12, 0x21, 0x0a, 0x14, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x89, 0xcd, 0xd7, 0x2f, 0x1a,
	0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x22, 0x0a, 0x15, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x58, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x8a,
	0xcd, 0xd7, 0x2f, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x22, 0x0a, 0x15, 0x50, 0x48, 0x4f,
	0x4e, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x58, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x8b, 0xcd, 0xd7, 0x2f, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x27, 0x0a,
	0x1a, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x10, 0x8c, 0xcd, 0xd7, 0x2f,
	0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x1e, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0x8d, 0xcd, 0xd7, 0x2f,
	0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x18, 0x0a, 0x0b, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45,
	0x5f, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x8e, 0xcd, 0xd7, 0x2f, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03,
	0x12, 0x13, 0x0a, 0x06, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x10, 0x8f, 0xcd, 0xd7, 0x2f, 0x1a,
	0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x1c, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x10, 0x90, 0xcd, 0xd7, 0x2f, 0x1a, 0x04, 0xa8,
	0x45, 0x90, 0x03, 0x12, 0x1e, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x91, 0xcd, 0xd7, 0x2f, 0x1a, 0x04, 0xa8,
	0x45, 0x90, 0x03, 0x12, 0x1f, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x92, 0xcd, 0xd7, 0x2f, 0x1a, 0x04,
	0xa8, 0x45, 0x90, 0x03, 0x12, 0x21, 0x0a, 0x14, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x93, 0xcd, 0xd7,
	0x2f, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x23, 0x0a, 0x16, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0x94, 0xcd, 0xd7, 0x2f, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x22, 0x0a, 0x15,
	0x48, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x95, 0xcd, 0xd7, 0x2f, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03,
	0x12, 0x25, 0x0a, 0x18, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x47, 0x10, 0x96, 0xcd, 0xd7,
	0x2f, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x23, 0x0a, 0x16, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0x97, 0xcd, 0xd7, 0x2f, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x26, 0x0a, 0x19,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x53, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x10, 0x98, 0xcd, 0xd7, 0x2f, 0x1a, 0x04,
	0xa8, 0x45, 0x90, 0x03, 0x1a, 0x04, 0xa0, 0x45, 0xf4, 0x03, 0x42, 0x5b, 0x5a, 0x59, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x6c, 0x61, 0x69, 0x6e, 0x75, 0x6f, 0x6e, 0x69, 0x61, 0x6f, 0x2e,
	0x63, 0x6e, 0x2f, 0x65, 0x64, 0x65, 0x6e, 0x2d, 0x71, 0x75, 0x61, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x3b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_company_service_v1_errors_company_company_error_v1_proto_rawDescOnce sync.Once
	file_api_company_service_v1_errors_company_company_error_v1_proto_rawDescData = file_api_company_service_v1_errors_company_company_error_v1_proto_rawDesc
)

func file_api_company_service_v1_errors_company_company_error_v1_proto_rawDescGZIP() []byte {
	file_api_company_service_v1_errors_company_company_error_v1_proto_rawDescOnce.Do(func() {
		file_api_company_service_v1_errors_company_company_error_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_company_service_v1_errors_company_company_error_v1_proto_rawDescData)
	})
	return file_api_company_service_v1_errors_company_company_error_v1_proto_rawDescData
}

var file_api_company_service_v1_errors_company_company_error_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_company_service_v1_errors_company_company_error_v1_proto_goTypes = []interface{}{
	(COMPANY_ERROR)(0), // 0: api.company.service.companyerrorv1.COMPANY_ERROR
}
var file_api_company_service_v1_errors_company_company_error_v1_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_company_service_v1_errors_company_company_error_v1_proto_init() }
func file_api_company_service_v1_errors_company_company_error_v1_proto_init() {
	if File_api_company_service_v1_errors_company_company_error_v1_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_company_service_v1_errors_company_company_error_v1_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_company_service_v1_errors_company_company_error_v1_proto_goTypes,
		DependencyIndexes: file_api_company_service_v1_errors_company_company_error_v1_proto_depIdxs,
		EnumInfos:         file_api_company_service_v1_errors_company_company_error_v1_proto_enumTypes,
	}.Build()
	File_api_company_service_v1_errors_company_company_error_v1_proto = out.File
	file_api_company_service_v1_errors_company_company_error_v1_proto_rawDesc = nil
	file_api_company_service_v1_errors_company_company_error_v1_proto_goTypes = nil
	file_api_company_service_v1_errors_company_company_error_v1_proto_depIdxs = nil
}
