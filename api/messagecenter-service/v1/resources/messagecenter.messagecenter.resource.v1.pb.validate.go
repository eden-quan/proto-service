// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/messagecenter-service/v1/resources/messagecenter.messagecenter.resource.v1.proto

package messagecenterv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	messagecenterenumv1 "gitlab.lainuoniao.cn/eden-quan/proto-service/api/messagecenter-service/v1/enums"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = messagecenterenumv1.MsgStatusEnum_MsgStatus(0)
)

// Validate checks the field values on PushMsg with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushMsg with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PushMsgMultiError, or nil if none found.
func (m *PushMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *PushMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsEventMsg

	// no validation rules for FromType

	// no validation rules for FromUID

	// no validation rules for FromCompanyID

	// no validation rules for UserDataID

	for idx, item := range m.GetTargetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PushMsgValidationError{
						field:  fmt.Sprintf("TargetList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PushMsgValidationError{
						field:  fmt.Sprintf("TargetList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushMsgValidationError{
					field:  fmt.Sprintf("TargetList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	// no validation rules for MsgDisplayType

	// no validation rules for MsgType

	// no validation rules for MsgContent

	if len(errors) > 0 {
		return PushMsgMultiError(errors)
	}

	return nil
}

// PushMsgMultiError is an error wrapping multiple validation errors returned
// by PushMsg.ValidateAll() if the designated constraints aren't met.
type PushMsgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushMsgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushMsgMultiError) AllErrors() []error { return m }

// PushMsgValidationError is the validation error returned by PushMsg.Validate
// if the designated constraints aren't met.
type PushMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushMsgValidationError) Cause() error { return e.cause }

func (e PushMsgValidationError) Code() int64 { return 10010001 }

func (e PushMsgValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e PushMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushMsgValidationError) ErrorName() string { return "PushMsgValidationError" }

// Error satisfies the builtin error interface
func (e PushMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = PushMsgValidationError{}

// Validate checks the field values on UserMsg with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserMsg with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMsgMultiError, or nil if none found.
func (m *UserMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *UserMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsEventMsg

	// no validation rules for MsgID

	// no validation rules for FromType

	// no validation rules for FromUID

	// no validation rules for FromCompanyID

	// no validation rules for Name

	// no validation rules for Avatar

	// no validation rules for UserDataID

	// no validation rules for ToUID

	// no validation rules for Status

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for MsgDisplayType

	// no validation rules for MsgType

	// no validation rules for MsgContent

	if len(errors) > 0 {
		return UserMsgMultiError(errors)
	}

	return nil
}

// UserMsgMultiError is an error wrapping multiple validation errors returned
// by UserMsg.ValidateAll() if the designated constraints aren't met.
type UserMsgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMsgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMsgMultiError) AllErrors() []error { return m }

// UserMsgValidationError is the validation error returned by UserMsg.Validate
// if the designated constraints aren't met.
type UserMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserMsgValidationError) Cause() error { return e.cause }

func (e UserMsgValidationError) Code() int64 { return 10010001 }

func (e UserMsgValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UserMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserMsgValidationError) ErrorName() string { return "UserMsgValidationError" }

// Error satisfies the builtin error interface
func (e UserMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UserMsgValidationError{}

// Validate checks the field values on Setting with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Setting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Setting with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SettingMultiError, or nil if none found.
func (m *Setting) ValidateAll() error {
	return m.validate(true)
}

func (m *Setting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Heartbeat

	// no validation rules for KeepTime

	if len(errors) > 0 {
		return SettingMultiError(errors)
	}

	return nil
}

// SettingMultiError is an error wrapping multiple validation errors returned
// by Setting.ValidateAll() if the designated constraints aren't met.
type SettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SettingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SettingMultiError) AllErrors() []error { return m }

// SettingValidationError is the validation error returned by Setting.Validate
// if the designated constraints aren't met.
type SettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingValidationError) Cause() error { return e.cause }

func (e SettingValidationError) Code() int64 { return 10010001 }

func (e SettingValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e SettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingValidationError) ErrorName() string { return "SettingValidationError" }

// Error satisfies the builtin error interface
func (e SettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = SettingValidationError{}

// Validate checks the field values on MsgBodyText with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MsgBodyText) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MsgBodyText with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MsgBodyTextMultiError, or
// nil if none found.
func (m *MsgBodyText) ValidateAll() error {
	return m.validate(true)
}

func (m *MsgBodyText) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Content

	if len(errors) > 0 {
		return MsgBodyTextMultiError(errors)
	}

	return nil
}

// MsgBodyTextMultiError is an error wrapping multiple validation errors
// returned by MsgBodyText.ValidateAll() if the designated constraints aren't met.
type MsgBodyTextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MsgBodyTextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MsgBodyTextMultiError) AllErrors() []error { return m }

// MsgBodyTextValidationError is the validation error returned by
// MsgBodyText.Validate if the designated constraints aren't met.
type MsgBodyTextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MsgBodyTextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MsgBodyTextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MsgBodyTextValidationError) Cause() error { return e.cause }

func (e MsgBodyTextValidationError) Code() int64 { return 10010001 }

func (e MsgBodyTextValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e MsgBodyTextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MsgBodyTextValidationError) ErrorName() string { return "MsgBodyTextValidationError" }

// Error satisfies the builtin error interface
func (e MsgBodyTextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMsgBodyText.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MsgBodyTextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = MsgBodyTextValidationError{}

// Validate checks the field values on MsgBodyMarkdown with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MsgBodyMarkdown) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MsgBodyMarkdown with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MsgBodyMarkdownMultiError, or nil if none found.
func (m *MsgBodyMarkdown) ValidateAll() error {
	return m.validate(true)
}

func (m *MsgBodyMarkdown) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Content

	if len(errors) > 0 {
		return MsgBodyMarkdownMultiError(errors)
	}

	return nil
}

// MsgBodyMarkdownMultiError is an error wrapping multiple validation errors
// returned by MsgBodyMarkdown.ValidateAll() if the designated constraints
// aren't met.
type MsgBodyMarkdownMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MsgBodyMarkdownMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MsgBodyMarkdownMultiError) AllErrors() []error { return m }

// MsgBodyMarkdownValidationError is the validation error returned by
// MsgBodyMarkdown.Validate if the designated constraints aren't met.
type MsgBodyMarkdownValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MsgBodyMarkdownValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MsgBodyMarkdownValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MsgBodyMarkdownValidationError) Cause() error { return e.cause }

func (e MsgBodyMarkdownValidationError) Code() int64 { return 10010001 }

func (e MsgBodyMarkdownValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e MsgBodyMarkdownValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MsgBodyMarkdownValidationError) ErrorName() string { return "MsgBodyMarkdownValidationError" }

// Error satisfies the builtin error interface
func (e MsgBodyMarkdownValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMsgBodyMarkdown.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MsgBodyMarkdownValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = MsgBodyMarkdownValidationError{}

// Validate checks the field values on Button with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Button) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Button with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ButtonMultiError, or nil if none found.
func (m *Button) ValidateAll() error {
	return m.validate(true)
}

func (m *Button) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Text

	// no validation rules for Value

	// no validation rules for AfterChosenText

	// no validation rules for Color

	if all {
		switch v := interface{}(m.GetAction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ButtonValidationError{
					field:  "Action",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ButtonValidationError{
					field:  "Action",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ButtonValidationError{
				field:  "Action",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Style

	if len(errors) > 0 {
		return ButtonMultiError(errors)
	}

	return nil
}

// ButtonMultiError is an error wrapping multiple validation errors returned by
// Button.ValidateAll() if the designated constraints aren't met.
type ButtonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ButtonMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ButtonMultiError) AllErrors() []error { return m }

// ButtonValidationError is the validation error returned by Button.Validate if
// the designated constraints aren't met.
type ButtonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ButtonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ButtonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ButtonValidationError) Cause() error { return e.cause }

func (e ButtonValidationError) Code() int64 { return 10010001 }

func (e ButtonValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e ButtonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ButtonValidationError) ErrorName() string { return "ButtonValidationError" }

// Error satisfies the builtin error interface
func (e ButtonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sButton.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ButtonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = ButtonValidationError{}

// Validate checks the field values on MsgBodyCard with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MsgBodyCard) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MsgBodyCard with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MsgBodyCardMultiError, or
// nil if none found.
func (m *MsgBodyCard) ValidateAll() error {
	return m.validate(true)
}

func (m *MsgBodyCard) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for ChosenText

	for idx, item := range m.GetButtons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MsgBodyCardValidationError{
						field:  fmt.Sprintf("Buttons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MsgBodyCardValidationError{
						field:  fmt.Sprintf("Buttons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MsgBodyCardValidationError{
					field:  fmt.Sprintf("Buttons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MsgBodyCardMultiError(errors)
	}

	return nil
}

// MsgBodyCardMultiError is an error wrapping multiple validation errors
// returned by MsgBodyCard.ValidateAll() if the designated constraints aren't met.
type MsgBodyCardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MsgBodyCardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MsgBodyCardMultiError) AllErrors() []error { return m }

// MsgBodyCardValidationError is the validation error returned by
// MsgBodyCard.Validate if the designated constraints aren't met.
type MsgBodyCardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MsgBodyCardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MsgBodyCardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MsgBodyCardValidationError) Cause() error { return e.cause }

func (e MsgBodyCardValidationError) Code() int64 { return 10010001 }

func (e MsgBodyCardValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e MsgBodyCardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MsgBodyCardValidationError) ErrorName() string { return "MsgBodyCardValidationError" }

// Error satisfies the builtin error interface
func (e MsgBodyCardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMsgBodyCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MsgBodyCardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = MsgBodyCardValidationError{}

// Validate checks the field values on ServerStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerStreamRequestMultiError, or nil if none found.
func (m *ServerStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for MsgType

	// no validation rules for ClientID

	// no validation rules for Platform

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return ServerStreamRequestMultiError(errors)
	}

	return nil
}

// ServerStreamRequestMultiError is an error wrapping multiple validation
// errors returned by ServerStreamRequest.ValidateAll() if the designated
// constraints aren't met.
type ServerStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerStreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerStreamRequestMultiError) AllErrors() []error { return m }

// ServerStreamRequestValidationError is the validation error returned by
// ServerStreamRequest.Validate if the designated constraints aren't met.
type ServerStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerStreamRequestValidationError) Cause() error { return e.cause }

func (e ServerStreamRequestValidationError) Code() int64 { return 10010001 }

func (e ServerStreamRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e ServerStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerStreamRequestValidationError) ErrorName() string {
	return "ServerStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServerStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = ServerStreamRequestValidationError{}

// Validate checks the field values on ServerStreamMsg with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServerStreamMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerStreamMsg with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerStreamMsgMultiError, or nil if none found.
func (m *ServerStreamMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerStreamMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cmd

	// no validation rules for Msg

	if len(errors) > 0 {
		return ServerStreamMsgMultiError(errors)
	}

	return nil
}

// ServerStreamMsgMultiError is an error wrapping multiple validation errors
// returned by ServerStreamMsg.ValidateAll() if the designated constraints
// aren't met.
type ServerStreamMsgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerStreamMsgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerStreamMsgMultiError) AllErrors() []error { return m }

// ServerStreamMsgValidationError is the validation error returned by
// ServerStreamMsg.Validate if the designated constraints aren't met.
type ServerStreamMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerStreamMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerStreamMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerStreamMsgValidationError) Cause() error { return e.cause }

func (e ServerStreamMsgValidationError) Code() int64 { return 10010001 }

func (e ServerStreamMsgValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e ServerStreamMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerStreamMsgValidationError) ErrorName() string { return "ServerStreamMsgValidationError" }

// Error satisfies the builtin error interface
func (e ServerStreamMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerStreamMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerStreamMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = ServerStreamMsgValidationError{}

// Validate checks the field values on SendUserMsgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendUserMsgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserMsgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendUserMsgRequestMultiError, or nil if none found.
func (m *SendUserMsgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserMsgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMsg()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendUserMsgRequestValidationError{
					field:  "Msg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendUserMsgRequestValidationError{
					field:  "Msg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMsg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendUserMsgRequestValidationError{
				field:  "Msg",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendUserMsgRequestMultiError(errors)
	}

	return nil
}

// SendUserMsgRequestMultiError is an error wrapping multiple validation errors
// returned by SendUserMsgRequest.ValidateAll() if the designated constraints
// aren't met.
type SendUserMsgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserMsgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserMsgRequestMultiError) AllErrors() []error { return m }

// SendUserMsgRequestValidationError is the validation error returned by
// SendUserMsgRequest.Validate if the designated constraints aren't met.
type SendUserMsgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserMsgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserMsgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserMsgRequestValidationError) Cause() error { return e.cause }

func (e SendUserMsgRequestValidationError) Code() int64 { return 10010001 }

func (e SendUserMsgRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e SendUserMsgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserMsgRequestValidationError) ErrorName() string {
	return "SendUserMsgRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserMsgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserMsgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserMsgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = SendUserMsgRequestValidationError{}

// Validate checks the field values on SendUserMsgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendUserMsgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserMsgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendUserMsgResponseMultiError, or nil if none found.
func (m *SendUserMsgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserMsgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendUserMsgResponseMultiError(errors)
	}

	return nil
}

// SendUserMsgResponseMultiError is an error wrapping multiple validation
// errors returned by SendUserMsgResponse.ValidateAll() if the designated
// constraints aren't met.
type SendUserMsgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserMsgResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserMsgResponseMultiError) AllErrors() []error { return m }

// SendUserMsgResponseValidationError is the validation error returned by
// SendUserMsgResponse.Validate if the designated constraints aren't met.
type SendUserMsgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserMsgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserMsgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserMsgResponseValidationError) Cause() error { return e.cause }

func (e SendUserMsgResponseValidationError) Code() int64 { return 10010001 }

func (e SendUserMsgResponseValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e SendUserMsgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserMsgResponseValidationError) ErrorName() string {
	return "SendUserMsgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserMsgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserMsgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserMsgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = SendUserMsgResponseValidationError{}

// Validate checks the field values on GetUserMsgListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserMsgListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserMsgListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserMsgListRequestMultiError, or nil if none found.
func (m *GetUserMsgListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserMsgListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ToUID

	// no validation rules for Limit

	// no validation rules for LastMsgID

	// no validation rules for OnlyUnread

	// no validation rules for MsgType

	// no validation rules for FromType

	if len(errors) > 0 {
		return GetUserMsgListRequestMultiError(errors)
	}

	return nil
}

// GetUserMsgListRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserMsgListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserMsgListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserMsgListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserMsgListRequestMultiError) AllErrors() []error { return m }

// GetUserMsgListRequestValidationError is the validation error returned by
// GetUserMsgListRequest.Validate if the designated constraints aren't met.
type GetUserMsgListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserMsgListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserMsgListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserMsgListRequestValidationError) Cause() error { return e.cause }

func (e GetUserMsgListRequestValidationError) Code() int64 { return 10010001 }

func (e GetUserMsgListRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e GetUserMsgListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserMsgListRequestValidationError) ErrorName() string {
	return "GetUserMsgListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserMsgListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserMsgListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserMsgListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = GetUserMsgListRequestValidationError{}

// Validate checks the field values on GetUserMsgListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserMsgListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserMsgListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserMsgListResponseMultiError, or nil if none found.
func (m *GetUserMsgListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserMsgListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserMsgListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserMsgListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserMsgListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsMore

	if len(errors) > 0 {
		return GetUserMsgListResponseMultiError(errors)
	}

	return nil
}

// GetUserMsgListResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserMsgListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserMsgListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserMsgListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserMsgListResponseMultiError) AllErrors() []error { return m }

// GetUserMsgListResponseValidationError is the validation error returned by
// GetUserMsgListResponse.Validate if the designated constraints aren't met.
type GetUserMsgListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserMsgListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserMsgListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserMsgListResponseValidationError) Cause() error { return e.cause }

func (e GetUserMsgListResponseValidationError) Code() int64 { return 10010001 }

func (e GetUserMsgListResponseValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e GetUserMsgListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserMsgListResponseValidationError) ErrorName() string {
	return "GetUserMsgListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserMsgListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserMsgListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserMsgListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = GetUserMsgListResponseValidationError{}

// Validate checks the field values on UpdateUserMsgStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserMsgStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserMsgStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserMsgStatusRequestMultiError, or nil if none found.
func (m *UpdateUserMsgStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserMsgStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UID

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateUserMsgStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateUserMsgStatusRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateUserMsgStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateUserMsgStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserMsgStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserMsgStatusRequestMultiError) AllErrors() []error { return m }

// UpdateUserMsgStatusRequestValidationError is the validation error returned
// by UpdateUserMsgStatusRequest.Validate if the designated constraints aren't met.
type UpdateUserMsgStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserMsgStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserMsgStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserMsgStatusRequestValidationError) Cause() error { return e.cause }

func (e UpdateUserMsgStatusRequestValidationError) Code() int64 { return 10010001 }

func (e UpdateUserMsgStatusRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UpdateUserMsgStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserMsgStatusRequestValidationError) ErrorName() string {
	return "UpdateUserMsgStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserMsgStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserMsgStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserMsgStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UpdateUserMsgStatusRequestValidationError{}

// Validate checks the field values on UpdateUserMsgStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserMsgStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserMsgStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserMsgStatusResponseMultiError, or nil if none found.
func (m *UpdateUserMsgStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserMsgStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserMsgStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateUserMsgStatusResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateUserMsgStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateUserMsgStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserMsgStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserMsgStatusResponseMultiError) AllErrors() []error { return m }

// UpdateUserMsgStatusResponseValidationError is the validation error returned
// by UpdateUserMsgStatusResponse.Validate if the designated constraints
// aren't met.
type UpdateUserMsgStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserMsgStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserMsgStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserMsgStatusResponseValidationError) Cause() error { return e.cause }

func (e UpdateUserMsgStatusResponseValidationError) Code() int64 { return 10010001 }

func (e UpdateUserMsgStatusResponseValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UpdateUserMsgStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserMsgStatusResponseValidationError) ErrorName() string {
	return "UpdateUserMsgStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserMsgStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserMsgStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserMsgStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UpdateUserMsgStatusResponseValidationError{}

// Validate checks the field values on ReadUserMsgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadUserMsgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadUserMsgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadUserMsgRequestMultiError, or nil if none found.
func (m *ReadUserMsgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadUserMsgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ToUID

	// no validation rules for FromType

	if len(errors) > 0 {
		return ReadUserMsgRequestMultiError(errors)
	}

	return nil
}

// ReadUserMsgRequestMultiError is an error wrapping multiple validation errors
// returned by ReadUserMsgRequest.ValidateAll() if the designated constraints
// aren't met.
type ReadUserMsgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadUserMsgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadUserMsgRequestMultiError) AllErrors() []error { return m }

// ReadUserMsgRequestValidationError is the validation error returned by
// ReadUserMsgRequest.Validate if the designated constraints aren't met.
type ReadUserMsgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadUserMsgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadUserMsgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadUserMsgRequestValidationError) Cause() error { return e.cause }

func (e ReadUserMsgRequestValidationError) Code() int64 { return 10010001 }

func (e ReadUserMsgRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e ReadUserMsgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadUserMsgRequestValidationError) ErrorName() string {
	return "ReadUserMsgRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadUserMsgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadUserMsgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadUserMsgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = ReadUserMsgRequestValidationError{}

// Validate checks the field values on ReadUserMsgByUserDataIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadUserMsgByUserDataIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadUserMsgByUserDataIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReadUserMsgByUserDataIDRequestMultiError, or nil if none found.
func (m *ReadUserMsgByUserDataIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadUserMsgByUserDataIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReadUserMsgByUserDataIDRequestMultiError(errors)
	}

	return nil
}

// ReadUserMsgByUserDataIDRequestMultiError is an error wrapping multiple
// validation errors returned by ReadUserMsgByUserDataIDRequest.ValidateAll()
// if the designated constraints aren't met.
type ReadUserMsgByUserDataIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadUserMsgByUserDataIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadUserMsgByUserDataIDRequestMultiError) AllErrors() []error { return m }

// ReadUserMsgByUserDataIDRequestValidationError is the validation error
// returned by ReadUserMsgByUserDataIDRequest.Validate if the designated
// constraints aren't met.
type ReadUserMsgByUserDataIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadUserMsgByUserDataIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadUserMsgByUserDataIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadUserMsgByUserDataIDRequestValidationError) Cause() error { return e.cause }

func (e ReadUserMsgByUserDataIDRequestValidationError) Code() int64 { return 10010001 }

func (e ReadUserMsgByUserDataIDRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e ReadUserMsgByUserDataIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadUserMsgByUserDataIDRequestValidationError) ErrorName() string {
	return "ReadUserMsgByUserDataIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadUserMsgByUserDataIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadUserMsgByUserDataIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadUserMsgByUserDataIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = ReadUserMsgByUserDataIDRequestValidationError{}

// Validate checks the field values on ReadUserMsgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadUserMsgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadUserMsgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadUserMsgResponseMultiError, or nil if none found.
func (m *ReadUserMsgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadUserMsgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReadUserMsgResponseMultiError(errors)
	}

	return nil
}

// ReadUserMsgResponseMultiError is an error wrapping multiple validation
// errors returned by ReadUserMsgResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadUserMsgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadUserMsgResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadUserMsgResponseMultiError) AllErrors() []error { return m }

// ReadUserMsgResponseValidationError is the validation error returned by
// ReadUserMsgResponse.Validate if the designated constraints aren't met.
type ReadUserMsgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadUserMsgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadUserMsgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadUserMsgResponseValidationError) Cause() error { return e.cause }

func (e ReadUserMsgResponseValidationError) Code() int64 { return 10010001 }

func (e ReadUserMsgResponseValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e ReadUserMsgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadUserMsgResponseValidationError) ErrorName() string {
	return "ReadUserMsgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadUserMsgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadUserMsgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadUserMsgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = ReadUserMsgResponseValidationError{}

// Validate checks the field values on ExistUnreadUserMsgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExistUnreadUserMsgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistUnreadUserMsgRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExistUnreadUserMsgRequestMultiError, or nil if none found.
func (m *ExistUnreadUserMsgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistUnreadUserMsgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ToUID

	// no validation rules for FromType

	if len(errors) > 0 {
		return ExistUnreadUserMsgRequestMultiError(errors)
	}

	return nil
}

// ExistUnreadUserMsgRequestMultiError is an error wrapping multiple validation
// errors returned by ExistUnreadUserMsgRequest.ValidateAll() if the
// designated constraints aren't met.
type ExistUnreadUserMsgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistUnreadUserMsgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistUnreadUserMsgRequestMultiError) AllErrors() []error { return m }

// ExistUnreadUserMsgRequestValidationError is the validation error returned by
// ExistUnreadUserMsgRequest.Validate if the designated constraints aren't met.
type ExistUnreadUserMsgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistUnreadUserMsgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistUnreadUserMsgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistUnreadUserMsgRequestValidationError) Cause() error { return e.cause }

func (e ExistUnreadUserMsgRequestValidationError) Code() int64 { return 10010001 }

func (e ExistUnreadUserMsgRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e ExistUnreadUserMsgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistUnreadUserMsgRequestValidationError) ErrorName() string {
	return "ExistUnreadUserMsgRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExistUnreadUserMsgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistUnreadUserMsgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistUnreadUserMsgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = ExistUnreadUserMsgRequestValidationError{}

// Validate checks the field values on ExistUnreadUserMsgResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExistUnreadUserMsgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistUnreadUserMsgResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExistUnreadUserMsgResponseMultiError, or nil if none found.
func (m *ExistUnreadUserMsgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistUnreadUserMsgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exist

	if len(errors) > 0 {
		return ExistUnreadUserMsgResponseMultiError(errors)
	}

	return nil
}

// ExistUnreadUserMsgResponseMultiError is an error wrapping multiple
// validation errors returned by ExistUnreadUserMsgResponse.ValidateAll() if
// the designated constraints aren't met.
type ExistUnreadUserMsgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistUnreadUserMsgResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistUnreadUserMsgResponseMultiError) AllErrors() []error { return m }

// ExistUnreadUserMsgResponseValidationError is the validation error returned
// by ExistUnreadUserMsgResponse.Validate if the designated constraints aren't met.
type ExistUnreadUserMsgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistUnreadUserMsgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistUnreadUserMsgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistUnreadUserMsgResponseValidationError) Cause() error { return e.cause }

func (e ExistUnreadUserMsgResponseValidationError) Code() int64 { return 10010001 }

func (e ExistUnreadUserMsgResponseValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e ExistUnreadUserMsgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistUnreadUserMsgResponseValidationError) ErrorName() string {
	return "ExistUnreadUserMsgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExistUnreadUserMsgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistUnreadUserMsgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistUnreadUserMsgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = ExistUnreadUserMsgResponseValidationError{}

// Validate checks the field values on UpdateMsgContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMsgContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMsgContentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMsgContentRequestMultiError, or nil if none found.
func (m *UpdateMsgContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMsgContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MsgID

	// no validation rules for Content

	if len(errors) > 0 {
		return UpdateMsgContentRequestMultiError(errors)
	}

	return nil
}

// UpdateMsgContentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMsgContentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMsgContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMsgContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMsgContentRequestMultiError) AllErrors() []error { return m }

// UpdateMsgContentRequestValidationError is the validation error returned by
// UpdateMsgContentRequest.Validate if the designated constraints aren't met.
type UpdateMsgContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMsgContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMsgContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMsgContentRequestValidationError) Cause() error { return e.cause }

func (e UpdateMsgContentRequestValidationError) Code() int64 { return 10010001 }

func (e UpdateMsgContentRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UpdateMsgContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMsgContentRequestValidationError) ErrorName() string {
	return "UpdateMsgContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMsgContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMsgContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMsgContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UpdateMsgContentRequestValidationError{}

// Validate checks the field values on UpdateMsgContentByUserDataIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateMsgContentByUserDataIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMsgContentByUserDataIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateMsgContentByUserDataIDRequestMultiError, or nil if none found.
func (m *UpdateMsgContentByUserDataIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMsgContentByUserDataIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserDataID

	// no validation rules for Content

	if len(errors) > 0 {
		return UpdateMsgContentByUserDataIDRequestMultiError(errors)
	}

	return nil
}

// UpdateMsgContentByUserDataIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateMsgContentByUserDataIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMsgContentByUserDataIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMsgContentByUserDataIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMsgContentByUserDataIDRequestMultiError) AllErrors() []error { return m }

// UpdateMsgContentByUserDataIDRequestValidationError is the validation error
// returned by UpdateMsgContentByUserDataIDRequest.Validate if the designated
// constraints aren't met.
type UpdateMsgContentByUserDataIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMsgContentByUserDataIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMsgContentByUserDataIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMsgContentByUserDataIDRequestValidationError) Cause() error { return e.cause }

func (e UpdateMsgContentByUserDataIDRequestValidationError) Code() int64 { return 10010001 }

func (e UpdateMsgContentByUserDataIDRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UpdateMsgContentByUserDataIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMsgContentByUserDataIDRequestValidationError) ErrorName() string {
	return "UpdateMsgContentByUserDataIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMsgContentByUserDataIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMsgContentByUserDataIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMsgContentByUserDataIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UpdateMsgContentByUserDataIDRequestValidationError{}

// Validate checks the field values on UpdateMsgContentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMsgContentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMsgContentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMsgContentResponseMultiError, or nil if none found.
func (m *UpdateMsgContentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMsgContentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateMsgContentResponseMultiError(errors)
	}

	return nil
}

// UpdateMsgContentResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateMsgContentResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateMsgContentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMsgContentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMsgContentResponseMultiError) AllErrors() []error { return m }

// UpdateMsgContentResponseValidationError is the validation error returned by
// UpdateMsgContentResponse.Validate if the designated constraints aren't met.
type UpdateMsgContentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMsgContentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMsgContentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMsgContentResponseValidationError) Cause() error { return e.cause }

func (e UpdateMsgContentResponseValidationError) Code() int64 { return 10010001 }

func (e UpdateMsgContentResponseValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UpdateMsgContentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMsgContentResponseValidationError) ErrorName() string {
	return "UpdateMsgContentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMsgContentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMsgContentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMsgContentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UpdateMsgContentResponseValidationError{}

// Validate checks the field values on SetThirdPartyMsgIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetThirdPartyMsgIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetThirdPartyMsgIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetThirdPartyMsgIDRequestMultiError, or nil if none found.
func (m *SetThirdPartyMsgIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetThirdPartyMsgIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MsgID

	// no validation rules for ToUID

	// no validation rules for ThirdPartyMsgID

	if len(errors) > 0 {
		return SetThirdPartyMsgIDRequestMultiError(errors)
	}

	return nil
}

// SetThirdPartyMsgIDRequestMultiError is an error wrapping multiple validation
// errors returned by SetThirdPartyMsgIDRequest.ValidateAll() if the
// designated constraints aren't met.
type SetThirdPartyMsgIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetThirdPartyMsgIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetThirdPartyMsgIDRequestMultiError) AllErrors() []error { return m }

// SetThirdPartyMsgIDRequestValidationError is the validation error returned by
// SetThirdPartyMsgIDRequest.Validate if the designated constraints aren't met.
type SetThirdPartyMsgIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetThirdPartyMsgIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetThirdPartyMsgIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetThirdPartyMsgIDRequestValidationError) Cause() error { return e.cause }

func (e SetThirdPartyMsgIDRequestValidationError) Code() int64 { return 10010001 }

func (e SetThirdPartyMsgIDRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e SetThirdPartyMsgIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetThirdPartyMsgIDRequestValidationError) ErrorName() string {
	return "SetThirdPartyMsgIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetThirdPartyMsgIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetThirdPartyMsgIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetThirdPartyMsgIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = SetThirdPartyMsgIDRequestValidationError{}

// Validate checks the field values on SetThirdPartyMsgIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetThirdPartyMsgIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetThirdPartyMsgIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetThirdPartyMsgIDResponseMultiError, or nil if none found.
func (m *SetThirdPartyMsgIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetThirdPartyMsgIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetThirdPartyMsgIDResponseMultiError(errors)
	}

	return nil
}

// SetThirdPartyMsgIDResponseMultiError is an error wrapping multiple
// validation errors returned by SetThirdPartyMsgIDResponse.ValidateAll() if
// the designated constraints aren't met.
type SetThirdPartyMsgIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetThirdPartyMsgIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetThirdPartyMsgIDResponseMultiError) AllErrors() []error { return m }

// SetThirdPartyMsgIDResponseValidationError is the validation error returned
// by SetThirdPartyMsgIDResponse.Validate if the designated constraints aren't met.
type SetThirdPartyMsgIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetThirdPartyMsgIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetThirdPartyMsgIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetThirdPartyMsgIDResponseValidationError) Cause() error { return e.cause }

func (e SetThirdPartyMsgIDResponseValidationError) Code() int64 { return 10010001 }

func (e SetThirdPartyMsgIDResponseValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e SetThirdPartyMsgIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetThirdPartyMsgIDResponseValidationError) ErrorName() string {
	return "SetThirdPartyMsgIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetThirdPartyMsgIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetThirdPartyMsgIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetThirdPartyMsgIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = SetThirdPartyMsgIDResponseValidationError{}

// Validate checks the field values on ReadThirdPartyMsgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadThirdPartyMsgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadThirdPartyMsgRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadThirdPartyMsgRequestMultiError, or nil if none found.
func (m *ReadThirdPartyMsgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadThirdPartyMsgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReadThirdPartyMsgRequestMultiError(errors)
	}

	return nil
}

// ReadThirdPartyMsgRequestMultiError is an error wrapping multiple validation
// errors returned by ReadThirdPartyMsgRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadThirdPartyMsgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadThirdPartyMsgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadThirdPartyMsgRequestMultiError) AllErrors() []error { return m }

// ReadThirdPartyMsgRequestValidationError is the validation error returned by
// ReadThirdPartyMsgRequest.Validate if the designated constraints aren't met.
type ReadThirdPartyMsgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadThirdPartyMsgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadThirdPartyMsgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadThirdPartyMsgRequestValidationError) Cause() error { return e.cause }

func (e ReadThirdPartyMsgRequestValidationError) Code() int64 { return 10010001 }

func (e ReadThirdPartyMsgRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e ReadThirdPartyMsgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadThirdPartyMsgRequestValidationError) ErrorName() string {
	return "ReadThirdPartyMsgRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadThirdPartyMsgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadThirdPartyMsgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadThirdPartyMsgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = ReadThirdPartyMsgRequestValidationError{}

// Validate checks the field values on ReadThirdPartyMsgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadThirdPartyMsgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadThirdPartyMsgResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadThirdPartyMsgResponseMultiError, or nil if none found.
func (m *ReadThirdPartyMsgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadThirdPartyMsgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReadThirdPartyMsgResponseMultiError(errors)
	}

	return nil
}

// ReadThirdPartyMsgResponseMultiError is an error wrapping multiple validation
// errors returned by ReadThirdPartyMsgResponse.ValidateAll() if the
// designated constraints aren't met.
type ReadThirdPartyMsgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadThirdPartyMsgResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadThirdPartyMsgResponseMultiError) AllErrors() []error { return m }

// ReadThirdPartyMsgResponseValidationError is the validation error returned by
// ReadThirdPartyMsgResponse.Validate if the designated constraints aren't met.
type ReadThirdPartyMsgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadThirdPartyMsgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadThirdPartyMsgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadThirdPartyMsgResponseValidationError) Cause() error { return e.cause }

func (e ReadThirdPartyMsgResponseValidationError) Code() int64 { return 10010001 }

func (e ReadThirdPartyMsgResponseValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e ReadThirdPartyMsgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadThirdPartyMsgResponseValidationError) ErrorName() string {
	return "ReadThirdPartyMsgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadThirdPartyMsgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadThirdPartyMsgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadThirdPartyMsgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = ReadThirdPartyMsgResponseValidationError{}

// Validate checks the field values on PushMsg_ToTarget with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PushMsg_ToTarget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushMsg_ToTarget with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushMsg_ToTargetMultiError, or nil if none found.
func (m *PushMsg_ToTarget) ValidateAll() error {
	return m.validate(true)
}

func (m *PushMsg_ToTarget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UID

	if len(errors) > 0 {
		return PushMsg_ToTargetMultiError(errors)
	}

	return nil
}

// PushMsg_ToTargetMultiError is an error wrapping multiple validation errors
// returned by PushMsg_ToTarget.ValidateAll() if the designated constraints
// aren't met.
type PushMsg_ToTargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushMsg_ToTargetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushMsg_ToTargetMultiError) AllErrors() []error { return m }

// PushMsg_ToTargetValidationError is the validation error returned by
// PushMsg_ToTarget.Validate if the designated constraints aren't met.
type PushMsg_ToTargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushMsg_ToTargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushMsg_ToTargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushMsg_ToTargetValidationError) Cause() error { return e.cause }

func (e PushMsg_ToTargetValidationError) Code() int64 { return 10010001 }

func (e PushMsg_ToTargetValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e PushMsg_ToTargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushMsg_ToTargetValidationError) ErrorName() string { return "PushMsg_ToTargetValidationError" }

// Error satisfies the builtin error interface
func (e PushMsg_ToTargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushMsg_ToTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushMsg_ToTargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = PushMsg_ToTargetValidationError{}

// Validate checks the field values on Button_Action with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Button_Action) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Button_Action with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Button_ActionMultiError, or
// nil if none found.
func (m *Button_Action) ValidateAll() error {
	return m.validate(true)
}

func (m *Button_Action) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Method

	// no validation rules for Body

	// no validation rules for Type

	if len(errors) > 0 {
		return Button_ActionMultiError(errors)
	}

	return nil
}

// Button_ActionMultiError is an error wrapping multiple validation errors
// returned by Button_Action.ValidateAll() if the designated constraints
// aren't met.
type Button_ActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Button_ActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Button_ActionMultiError) AllErrors() []error { return m }

// Button_ActionValidationError is the validation error returned by
// Button_Action.Validate if the designated constraints aren't met.
type Button_ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Button_ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Button_ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Button_ActionValidationError) Cause() error { return e.cause }

func (e Button_ActionValidationError) Code() int64 { return 10010001 }

func (e Button_ActionValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e Button_ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Button_ActionValidationError) ErrorName() string { return "Button_ActionValidationError" }

// Error satisfies the builtin error interface
func (e Button_ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sButton_Action.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Button_ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = Button_ActionValidationError{}
