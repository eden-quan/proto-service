// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/iam-service/v1/resources/iam.auth.resource.v1.proto

package iamv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CheckServiceAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckServiceAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckServiceAuthRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckServiceAuthRequestMultiError, or nil if none found.
func (m *CheckServiceAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckServiceAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Permission

	// no validation rules for Resource

	// no validation rules for Ak

	if len(errors) > 0 {
		return CheckServiceAuthRequestMultiError(errors)
	}

	return nil
}

// CheckServiceAuthRequestMultiError is an error wrapping multiple validation
// errors returned by CheckServiceAuthRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckServiceAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckServiceAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckServiceAuthRequestMultiError) AllErrors() []error { return m }

// CheckServiceAuthRequestValidationError is the validation error returned by
// CheckServiceAuthRequest.Validate if the designated constraints aren't met.
type CheckServiceAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckServiceAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckServiceAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckServiceAuthRequestValidationError) Cause() error { return e.cause }

func (e CheckServiceAuthRequestValidationError) Code() int64 { return 10010001 }

func (e CheckServiceAuthRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e CheckServiceAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckServiceAuthRequestValidationError) ErrorName() string {
	return "CheckServiceAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckServiceAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckServiceAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckServiceAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = CheckServiceAuthRequestValidationError{}

// Validate checks the field values on CheckServiceAuthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckServiceAuthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckServiceAuthResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckServiceAuthResponseMultiError, or nil if none found.
func (m *CheckServiceAuthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckServiceAuthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAllowed

	// no validation rules for CacheData

	if len(errors) > 0 {
		return CheckServiceAuthResponseMultiError(errors)
	}

	return nil
}

// CheckServiceAuthResponseMultiError is an error wrapping multiple validation
// errors returned by CheckServiceAuthResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckServiceAuthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckServiceAuthResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckServiceAuthResponseMultiError) AllErrors() []error { return m }

// CheckServiceAuthResponseValidationError is the validation error returned by
// CheckServiceAuthResponse.Validate if the designated constraints aren't met.
type CheckServiceAuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckServiceAuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckServiceAuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckServiceAuthResponseValidationError) Cause() error { return e.cause }

func (e CheckServiceAuthResponseValidationError) Code() int64 { return 10010001 }

func (e CheckServiceAuthResponseValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e CheckServiceAuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckServiceAuthResponseValidationError) ErrorName() string {
	return "CheckServiceAuthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckServiceAuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckServiceAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckServiceAuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = CheckServiceAuthResponseValidationError{}

// Validate checks the field values on CheckUserAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckUserAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckUserAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckUserAuthRequestMultiError, or nil if none found.
func (m *CheckUserAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckUserAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Resource

	// no validation rules for Permission

	if len(errors) > 0 {
		return CheckUserAuthRequestMultiError(errors)
	}

	return nil
}

// CheckUserAuthRequestMultiError is an error wrapping multiple validation
// errors returned by CheckUserAuthRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckUserAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckUserAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckUserAuthRequestMultiError) AllErrors() []error { return m }

// CheckUserAuthRequestValidationError is the validation error returned by
// CheckUserAuthRequest.Validate if the designated constraints aren't met.
type CheckUserAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUserAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUserAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUserAuthRequestValidationError) Cause() error { return e.cause }

func (e CheckUserAuthRequestValidationError) Code() int64 { return 10010001 }

func (e CheckUserAuthRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e CheckUserAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUserAuthRequestValidationError) ErrorName() string {
	return "CheckUserAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUserAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUserAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUserAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = CheckUserAuthRequestValidationError{}

// Validate checks the field values on CheckUserAuthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckUserAuthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckUserAuthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckUserAuthResponseMultiError, or nil if none found.
func (m *CheckUserAuthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckUserAuthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAllowed

	// no validation rules for CacheData

	if len(errors) > 0 {
		return CheckUserAuthResponseMultiError(errors)
	}

	return nil
}

// CheckUserAuthResponseMultiError is an error wrapping multiple validation
// errors returned by CheckUserAuthResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckUserAuthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckUserAuthResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckUserAuthResponseMultiError) AllErrors() []error { return m }

// CheckUserAuthResponseValidationError is the validation error returned by
// CheckUserAuthResponse.Validate if the designated constraints aren't met.
type CheckUserAuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUserAuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUserAuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUserAuthResponseValidationError) Cause() error { return e.cause }

func (e CheckUserAuthResponseValidationError) Code() int64 { return 10010001 }

func (e CheckUserAuthResponseValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e CheckUserAuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUserAuthResponseValidationError) ErrorName() string {
	return "CheckUserAuthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUserAuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUserAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUserAuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = CheckUserAuthResponseValidationError{}

// Validate checks the field values on ValidateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ValidateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateRequestMultiError, or nil if none found.
func (m *ValidateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Member

	// no validation rules for Permission

	// no validation rules for PolicyJson

	if len(errors) > 0 {
		return ValidateRequestMultiError(errors)
	}

	return nil
}

// ValidateRequestMultiError is an error wrapping multiple validation errors
// returned by ValidateRequest.ValidateAll() if the designated constraints
// aren't met.
type ValidateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateRequestMultiError) AllErrors() []error { return m }

// ValidateRequestValidationError is the validation error returned by
// ValidateRequest.Validate if the designated constraints aren't met.
type ValidateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateRequestValidationError) Cause() error { return e.cause }

func (e ValidateRequestValidationError) Code() int64 { return 10010001 }

func (e ValidateRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e ValidateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateRequestValidationError) ErrorName() string { return "ValidateRequestValidationError" }

// Error satisfies the builtin error interface
func (e ValidateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = ValidateRequestValidationError{}

// Validate checks the field values on ValidateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ValidateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateResponseMultiError, or nil if none found.
func (m *ValidateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAllowed

	if len(errors) > 0 {
		return ValidateResponseMultiError(errors)
	}

	return nil
}

// ValidateResponseMultiError is an error wrapping multiple validation errors
// returned by ValidateResponse.ValidateAll() if the designated constraints
// aren't met.
type ValidateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateResponseMultiError) AllErrors() []error { return m }

// ValidateResponseValidationError is the validation error returned by
// ValidateResponse.Validate if the designated constraints aren't met.
type ValidateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateResponseValidationError) Cause() error { return e.cause }

func (e ValidateResponseValidationError) Code() int64 { return 10010001 }

func (e ValidateResponseValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e ValidateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateResponseValidationError) ErrorName() string { return "ValidateResponseValidationError" }

// Error satisfies the builtin error interface
func (e ValidateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = ValidateResponseValidationError{}
