// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/iam-service/v1/resources/iam.user.resource.v1.proto

package iamv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserUserMultiError, or nil
// if none found.
func (m *UserUser) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	// no validation rules for RefreshTokenExpireTime

	// no validation rules for AccessTokenExpireTime

	// no validation rules for RegisterType

	// no validation rules for CompanyId

	// no validation rules for CompanyLabel

	if len(errors) > 0 {
		return UserUserMultiError(errors)
	}

	return nil
}

// UserUserMultiError is an error wrapping multiple validation errors returned
// by UserUser.ValidateAll() if the designated constraints aren't met.
type UserUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUserMultiError) AllErrors() []error { return m }

// UserUserValidationError is the validation error returned by
// UserUser.Validate if the designated constraints aren't met.
type UserUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUserValidationError) Cause() error { return e.cause }

func (e UserUserValidationError) Code() int64 { return 10010001 }

func (e UserUserValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UserUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUserValidationError) ErrorName() string { return "UserUserValidationError" }

// Error satisfies the builtin error interface
func (e UserUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UserUserValidationError{}

// Validate checks the field values on UserCheckLastLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserCheckLastLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCheckLastLoginRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCheckLastLoginRequestMultiError, or nil if none found.
func (m *UserCheckLastLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCheckLastLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return UserCheckLastLoginRequestMultiError(errors)
	}

	return nil
}

// UserCheckLastLoginRequestMultiError is an error wrapping multiple validation
// errors returned by UserCheckLastLoginRequest.ValidateAll() if the
// designated constraints aren't met.
type UserCheckLastLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCheckLastLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCheckLastLoginRequestMultiError) AllErrors() []error { return m }

// UserCheckLastLoginRequestValidationError is the validation error returned by
// UserCheckLastLoginRequest.Validate if the designated constraints aren't met.
type UserCheckLastLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCheckLastLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCheckLastLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCheckLastLoginRequestValidationError) Cause() error { return e.cause }

func (e UserCheckLastLoginRequestValidationError) Code() int64 { return 10010001 }

func (e UserCheckLastLoginRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UserCheckLastLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCheckLastLoginRequestValidationError) ErrorName() string {
	return "UserCheckLastLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserCheckLastLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCheckLastLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCheckLastLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UserCheckLastLoginRequestValidationError{}

// Validate checks the field values on UserCheckLastLoginResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserCheckLastLoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCheckLastLoginResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCheckLastLoginResponseMultiError, or nil if none found.
func (m *UserCheckLastLoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCheckLastLoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Yes

	if len(errors) > 0 {
		return UserCheckLastLoginResponseMultiError(errors)
	}

	return nil
}

// UserCheckLastLoginResponseMultiError is an error wrapping multiple
// validation errors returned by UserCheckLastLoginResponse.ValidateAll() if
// the designated constraints aren't met.
type UserCheckLastLoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCheckLastLoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCheckLastLoginResponseMultiError) AllErrors() []error { return m }

// UserCheckLastLoginResponseValidationError is the validation error returned
// by UserCheckLastLoginResponse.Validate if the designated constraints aren't met.
type UserCheckLastLoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCheckLastLoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCheckLastLoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCheckLastLoginResponseValidationError) Cause() error { return e.cause }

func (e UserCheckLastLoginResponseValidationError) Code() int64 { return 10010001 }

func (e UserCheckLastLoginResponseValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UserCheckLastLoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCheckLastLoginResponseValidationError) ErrorName() string {
	return "UserCheckLastLoginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserCheckLastLoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCheckLastLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCheckLastLoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UserCheckLastLoginResponseValidationError{}

// Validate checks the field values on UserUserLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserUserLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUserLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUserLoginRequestMultiError, or nil if none found.
func (m *UserUserLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUserLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for KickLastLogin

	// no validation rules for CompanyId

	// no validation rules for CompanyLabel

	if len(errors) > 0 {
		return UserUserLoginRequestMultiError(errors)
	}

	return nil
}

// UserUserLoginRequestMultiError is an error wrapping multiple validation
// errors returned by UserUserLoginRequest.ValidateAll() if the designated
// constraints aren't met.
type UserUserLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUserLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUserLoginRequestMultiError) AllErrors() []error { return m }

// UserUserLoginRequestValidationError is the validation error returned by
// UserUserLoginRequest.Validate if the designated constraints aren't met.
type UserUserLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUserLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUserLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUserLoginRequestValidationError) Cause() error { return e.cause }

func (e UserUserLoginRequestValidationError) Code() int64 { return 10010001 }

func (e UserUserLoginRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UserUserLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUserLoginRequestValidationError) ErrorName() string {
	return "UserUserLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserUserLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUserLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUserLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UserUserLoginRequestValidationError{}

// Validate checks the field values on UserUserLogoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserUserLogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUserLogoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUserLogoutRequestMultiError, or nil if none found.
func (m *UserUserLogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUserLogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for IsLogoutByUid

	// no validation rules for Uid

	if len(errors) > 0 {
		return UserUserLogoutRequestMultiError(errors)
	}

	return nil
}

// UserUserLogoutRequestMultiError is an error wrapping multiple validation
// errors returned by UserUserLogoutRequest.ValidateAll() if the designated
// constraints aren't met.
type UserUserLogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUserLogoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUserLogoutRequestMultiError) AllErrors() []error { return m }

// UserUserLogoutRequestValidationError is the validation error returned by
// UserUserLogoutRequest.Validate if the designated constraints aren't met.
type UserUserLogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUserLogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUserLogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUserLogoutRequestValidationError) Cause() error { return e.cause }

func (e UserUserLogoutRequestValidationError) Code() int64 { return 10010001 }

func (e UserUserLogoutRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UserUserLogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUserLogoutRequestValidationError) ErrorName() string {
	return "UserUserLogoutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserUserLogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUserLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUserLogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UserUserLogoutRequestValidationError{}

// Validate checks the field values on UserUserLogoutReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserUserLogoutReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUserLogoutReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUserLogoutReplyMultiError, or nil if none found.
func (m *UserUserLogoutReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUserLogoutReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return UserUserLogoutReplyMultiError(errors)
	}

	return nil
}

// UserUserLogoutReplyMultiError is an error wrapping multiple validation
// errors returned by UserUserLogoutReply.ValidateAll() if the designated
// constraints aren't met.
type UserUserLogoutReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUserLogoutReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUserLogoutReplyMultiError) AllErrors() []error { return m }

// UserUserLogoutReplyValidationError is the validation error returned by
// UserUserLogoutReply.Validate if the designated constraints aren't met.
type UserUserLogoutReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUserLogoutReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUserLogoutReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUserLogoutReplyValidationError) Cause() error { return e.cause }

func (e UserUserLogoutReplyValidationError) Code() int64 { return 10010001 }

func (e UserUserLogoutReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UserUserLogoutReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUserLogoutReplyValidationError) ErrorName() string {
	return "UserUserLogoutReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UserUserLogoutReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUserLogoutReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUserLogoutReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UserUserLogoutReplyValidationError{}

// Validate checks the field values on UserUserRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserUserRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUserRegisterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUserRegisterRequestMultiError, or nil if none found.
func (m *UserUserRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUserRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAutoLogin

	// no validation rules for RegisterType

	// no validation rules for CompanyId

	// no validation rules for CompanyLabel

	if len(errors) > 0 {
		return UserUserRegisterRequestMultiError(errors)
	}

	return nil
}

// UserUserRegisterRequestMultiError is an error wrapping multiple validation
// errors returned by UserUserRegisterRequest.ValidateAll() if the designated
// constraints aren't met.
type UserUserRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUserRegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUserRegisterRequestMultiError) AllErrors() []error { return m }

// UserUserRegisterRequestValidationError is the validation error returned by
// UserUserRegisterRequest.Validate if the designated constraints aren't met.
type UserUserRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUserRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUserRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUserRegisterRequestValidationError) Cause() error { return e.cause }

func (e UserUserRegisterRequestValidationError) Code() int64 { return 10010001 }

func (e UserUserRegisterRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UserUserRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUserRegisterRequestValidationError) ErrorName() string {
	return "UserUserRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserUserRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUserRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUserRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UserUserRegisterRequestValidationError{}

// Validate checks the field values on UserCheckTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserCheckTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCheckTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCheckTokenRequestMultiError, or nil if none found.
func (m *UserCheckTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCheckTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return UserCheckTokenRequestMultiError(errors)
	}

	return nil
}

// UserCheckTokenRequestMultiError is an error wrapping multiple validation
// errors returned by UserCheckTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type UserCheckTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCheckTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCheckTokenRequestMultiError) AllErrors() []error { return m }

// UserCheckTokenRequestValidationError is the validation error returned by
// UserCheckTokenRequest.Validate if the designated constraints aren't met.
type UserCheckTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCheckTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCheckTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCheckTokenRequestValidationError) Cause() error { return e.cause }

func (e UserCheckTokenRequestValidationError) Code() int64 { return 10010001 }

func (e UserCheckTokenRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UserCheckTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCheckTokenRequestValidationError) ErrorName() string {
	return "UserCheckTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserCheckTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCheckTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCheckTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UserCheckTokenRequestValidationError{}

// Validate checks the field values on UserCheckTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserCheckTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCheckTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCheckTokenResponseMultiError, or nil if none found.
func (m *UserCheckTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCheckTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Uid

	// no validation rules for RefreshToken

	// no validation rules for RefreshTokenExpireTime

	// no validation rules for RegisterType

	// no validation rules for CompanyId

	// no validation rules for CompanyLabel

	if len(errors) > 0 {
		return UserCheckTokenResponseMultiError(errors)
	}

	return nil
}

// UserCheckTokenResponseMultiError is an error wrapping multiple validation
// errors returned by UserCheckTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type UserCheckTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCheckTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCheckTokenResponseMultiError) AllErrors() []error { return m }

// UserCheckTokenResponseValidationError is the validation error returned by
// UserCheckTokenResponse.Validate if the designated constraints aren't met.
type UserCheckTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCheckTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCheckTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCheckTokenResponseValidationError) Cause() error { return e.cause }

func (e UserCheckTokenResponseValidationError) Code() int64 { return 10010001 }

func (e UserCheckTokenResponseValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UserCheckTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCheckTokenResponseValidationError) ErrorName() string {
	return "UserCheckTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserCheckTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCheckTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCheckTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UserCheckTokenResponseValidationError{}

// Validate checks the field values on UserCheckUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserCheckUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCheckUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCheckUserRequestMultiError, or nil if none found.
func (m *UserCheckUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCheckUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return UserCheckUserRequestMultiError(errors)
	}

	return nil
}

// UserCheckUserRequestMultiError is an error wrapping multiple validation
// errors returned by UserCheckUserRequest.ValidateAll() if the designated
// constraints aren't met.
type UserCheckUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCheckUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCheckUserRequestMultiError) AllErrors() []error { return m }

// UserCheckUserRequestValidationError is the validation error returned by
// UserCheckUserRequest.Validate if the designated constraints aren't met.
type UserCheckUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCheckUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCheckUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCheckUserRequestValidationError) Cause() error { return e.cause }

func (e UserCheckUserRequestValidationError) Code() int64 { return 10010001 }

func (e UserCheckUserRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UserCheckUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCheckUserRequestValidationError) ErrorName() string {
	return "UserCheckUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserCheckUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCheckUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCheckUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UserCheckUserRequestValidationError{}

// Validate checks the field values on UserCheckUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserCheckUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCheckUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCheckUserResponseMultiError, or nil if none found.
func (m *UserCheckUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCheckUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UserCheckUserResponseMultiError(errors)
	}

	return nil
}

// UserCheckUserResponseMultiError is an error wrapping multiple validation
// errors returned by UserCheckUserResponse.ValidateAll() if the designated
// constraints aren't met.
type UserCheckUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCheckUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCheckUserResponseMultiError) AllErrors() []error { return m }

// UserCheckUserResponseValidationError is the validation error returned by
// UserCheckUserResponse.Validate if the designated constraints aren't met.
type UserCheckUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCheckUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCheckUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCheckUserResponseValidationError) Cause() error { return e.cause }

func (e UserCheckUserResponseValidationError) Code() int64 { return 10010001 }

func (e UserCheckUserResponseValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UserCheckUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCheckUserResponseValidationError) ErrorName() string {
	return "UserCheckUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserCheckUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCheckUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCheckUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UserCheckUserResponseValidationError{}

// Validate checks the field values on UserRefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRefreshTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRefreshTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRefreshTokenRequestMultiError, or nil if none found.
func (m *UserRefreshTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRefreshTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return UserRefreshTokenRequestMultiError(errors)
	}

	return nil
}

// UserRefreshTokenRequestMultiError is an error wrapping multiple validation
// errors returned by UserRefreshTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type UserRefreshTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRefreshTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRefreshTokenRequestMultiError) AllErrors() []error { return m }

// UserRefreshTokenRequestValidationError is the validation error returned by
// UserRefreshTokenRequest.Validate if the designated constraints aren't met.
type UserRefreshTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRefreshTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRefreshTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRefreshTokenRequestValidationError) Cause() error { return e.cause }

func (e UserRefreshTokenRequestValidationError) Code() int64 { return 10010001 }

func (e UserRefreshTokenRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UserRefreshTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRefreshTokenRequestValidationError) ErrorName() string {
	return "UserRefreshTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserRefreshTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRefreshTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRefreshTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UserRefreshTokenRequestValidationError{}

// Validate checks the field values on UserRefreshTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRefreshTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRefreshTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRefreshTokenResponseMultiError, or nil if none found.
func (m *UserRefreshTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRefreshTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	// no validation rules for RefreshTokenExpireTime

	// no validation rules for AccessTokenExpireTime

	// no validation rules for CompanyId

	// no validation rules for CompanyLabel

	if len(errors) > 0 {
		return UserRefreshTokenResponseMultiError(errors)
	}

	return nil
}

// UserRefreshTokenResponseMultiError is an error wrapping multiple validation
// errors returned by UserRefreshTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type UserRefreshTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRefreshTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRefreshTokenResponseMultiError) AllErrors() []error { return m }

// UserRefreshTokenResponseValidationError is the validation error returned by
// UserRefreshTokenResponse.Validate if the designated constraints aren't met.
type UserRefreshTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRefreshTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRefreshTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRefreshTokenResponseValidationError) Cause() error { return e.cause }

func (e UserRefreshTokenResponseValidationError) Code() int64 { return 10010001 }

func (e UserRefreshTokenResponseValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UserRefreshTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRefreshTokenResponseValidationError) ErrorName() string {
	return "UserRefreshTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserRefreshTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRefreshTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRefreshTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UserRefreshTokenResponseValidationError{}

// Validate checks the field values on UserDeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserDeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDeleteUserRequestMultiError, or nil if none found.
func (m *UserDeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsOnlyUserToken

	if len(errors) > 0 {
		return UserDeleteUserRequestMultiError(errors)
	}

	return nil
}

// UserDeleteUserRequestMultiError is an error wrapping multiple validation
// errors returned by UserDeleteUserRequest.ValidateAll() if the designated
// constraints aren't met.
type UserDeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDeleteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDeleteUserRequestMultiError) AllErrors() []error { return m }

// UserDeleteUserRequestValidationError is the validation error returned by
// UserDeleteUserRequest.Validate if the designated constraints aren't met.
type UserDeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDeleteUserRequestValidationError) Cause() error { return e.cause }

func (e UserDeleteUserRequestValidationError) Code() int64 { return 10010001 }

func (e UserDeleteUserRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UserDeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDeleteUserRequestValidationError) ErrorName() string {
	return "UserDeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserDeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UserDeleteUserRequestValidationError{}

// Validate checks the field values on UserDeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserDeleteUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDeleteUserResponseMultiError, or nil if none found.
func (m *UserDeleteUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDeleteUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserDeleteUserResponseMultiError(errors)
	}

	return nil
}

// UserDeleteUserResponseMultiError is an error wrapping multiple validation
// errors returned by UserDeleteUserResponse.ValidateAll() if the designated
// constraints aren't met.
type UserDeleteUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDeleteUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDeleteUserResponseMultiError) AllErrors() []error { return m }

// UserDeleteUserResponseValidationError is the validation error returned by
// UserDeleteUserResponse.Validate if the designated constraints aren't met.
type UserDeleteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDeleteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDeleteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDeleteUserResponseValidationError) Cause() error { return e.cause }

func (e UserDeleteUserResponseValidationError) Code() int64 { return 10010001 }

func (e UserDeleteUserResponseValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UserDeleteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDeleteUserResponseValidationError) ErrorName() string {
	return "UserDeleteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserDeleteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDeleteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDeleteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UserDeleteUserResponseValidationError{}

// Validate checks the field values on UserUpdateCompanyIdAndLabelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UserUpdateCompanyIdAndLabelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateCompanyIdAndLabelRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UserUpdateCompanyIdAndLabelRequestMultiError, or nil if none found.
func (m *UserUpdateCompanyIdAndLabelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateCompanyIdAndLabelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	// no validation rules for CompanyId

	// no validation rules for CompanyLabel

	// no validation rules for Uid

	if len(errors) > 0 {
		return UserUpdateCompanyIdAndLabelRequestMultiError(errors)
	}

	return nil
}

// UserUpdateCompanyIdAndLabelRequestMultiError is an error wrapping multiple
// validation errors returned by
// UserUpdateCompanyIdAndLabelRequest.ValidateAll() if the designated
// constraints aren't met.
type UserUpdateCompanyIdAndLabelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateCompanyIdAndLabelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateCompanyIdAndLabelRequestMultiError) AllErrors() []error { return m }

// UserUpdateCompanyIdAndLabelRequestValidationError is the validation error
// returned by UserUpdateCompanyIdAndLabelRequest.Validate if the designated
// constraints aren't met.
type UserUpdateCompanyIdAndLabelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateCompanyIdAndLabelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateCompanyIdAndLabelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateCompanyIdAndLabelRequestValidationError) Cause() error { return e.cause }

func (e UserUpdateCompanyIdAndLabelRequestValidationError) Code() int64 { return 10010001 }

func (e UserUpdateCompanyIdAndLabelRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UserUpdateCompanyIdAndLabelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateCompanyIdAndLabelRequestValidationError) ErrorName() string {
	return "UserUpdateCompanyIdAndLabelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateCompanyIdAndLabelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateCompanyIdAndLabelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateCompanyIdAndLabelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UserUpdateCompanyIdAndLabelRequestValidationError{}

// Validate checks the field values on UserUpdateCompanyIdAndLabelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UserUpdateCompanyIdAndLabelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateCompanyIdAndLabelResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UserUpdateCompanyIdAndLabelResponseMultiError, or nil if none found.
func (m *UserUpdateCompanyIdAndLabelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateCompanyIdAndLabelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UserUpdateCompanyIdAndLabelResponseMultiError(errors)
	}

	return nil
}

// UserUpdateCompanyIdAndLabelResponseMultiError is an error wrapping multiple
// validation errors returned by
// UserUpdateCompanyIdAndLabelResponse.ValidateAll() if the designated
// constraints aren't met.
type UserUpdateCompanyIdAndLabelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateCompanyIdAndLabelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateCompanyIdAndLabelResponseMultiError) AllErrors() []error { return m }

// UserUpdateCompanyIdAndLabelResponseValidationError is the validation error
// returned by UserUpdateCompanyIdAndLabelResponse.Validate if the designated
// constraints aren't met.
type UserUpdateCompanyIdAndLabelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateCompanyIdAndLabelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateCompanyIdAndLabelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateCompanyIdAndLabelResponseValidationError) Cause() error { return e.cause }

func (e UserUpdateCompanyIdAndLabelResponseValidationError) Code() int64 { return 10010001 }

func (e UserUpdateCompanyIdAndLabelResponseValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e UserUpdateCompanyIdAndLabelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateCompanyIdAndLabelResponseValidationError) ErrorName() string {
	return "UserUpdateCompanyIdAndLabelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateCompanyIdAndLabelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateCompanyIdAndLabelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateCompanyIdAndLabelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = UserUpdateCompanyIdAndLabelResponseValidationError{}
