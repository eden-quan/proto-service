// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/iam-service/v1/resources/iam.api.resource.v1.proto

package iamv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on APICreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APICreateGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APICreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APICreateGroupRequestMultiError, or nil if none found.
func (m *APICreateGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *APICreateGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Uid

	if len(errors) > 0 {
		return APICreateGroupRequestMultiError(errors)
	}

	return nil
}

// APICreateGroupRequestMultiError is an error wrapping multiple validation
// errors returned by APICreateGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type APICreateGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APICreateGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APICreateGroupRequestMultiError) AllErrors() []error { return m }

// APICreateGroupRequestValidationError is the validation error returned by
// APICreateGroupRequest.Validate if the designated constraints aren't met.
type APICreateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APICreateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APICreateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APICreateGroupRequestValidationError) Cause() error { return e.cause }

func (e APICreateGroupRequestValidationError) Code() int64 { return 10010001 }

func (e APICreateGroupRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e APICreateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APICreateGroupRequestValidationError) ErrorName() string {
	return "APICreateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e APICreateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPICreateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APICreateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = APICreateGroupRequestValidationError{}

// Validate checks the field values on APICreateGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APICreateGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APICreateGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APICreateGroupReplyMultiError, or nil if none found.
func (m *APICreateGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *APICreateGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GourpId

	if len(errors) > 0 {
		return APICreateGroupReplyMultiError(errors)
	}

	return nil
}

// APICreateGroupReplyMultiError is an error wrapping multiple validation
// errors returned by APICreateGroupReply.ValidateAll() if the designated
// constraints aren't met.
type APICreateGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APICreateGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APICreateGroupReplyMultiError) AllErrors() []error { return m }

// APICreateGroupReplyValidationError is the validation error returned by
// APICreateGroupReply.Validate if the designated constraints aren't met.
type APICreateGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APICreateGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APICreateGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APICreateGroupReplyValidationError) Cause() error { return e.cause }

func (e APICreateGroupReplyValidationError) Code() int64 { return 10010001 }

func (e APICreateGroupReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e APICreateGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APICreateGroupReplyValidationError) ErrorName() string {
	return "APICreateGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e APICreateGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPICreateGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APICreateGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = APICreateGroupReplyValidationError{}

// Validate checks the field values on APIGetGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APIGetGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIGetGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APIGetGroupRequestMultiError, or nil if none found.
func (m *APIGetGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *APIGetGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return APIGetGroupRequestMultiError(errors)
	}

	return nil
}

// APIGetGroupRequestMultiError is an error wrapping multiple validation errors
// returned by APIGetGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type APIGetGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIGetGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIGetGroupRequestMultiError) AllErrors() []error { return m }

// APIGetGroupRequestValidationError is the validation error returned by
// APIGetGroupRequest.Validate if the designated constraints aren't met.
type APIGetGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIGetGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIGetGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIGetGroupRequestValidationError) Cause() error { return e.cause }

func (e APIGetGroupRequestValidationError) Code() int64 { return 10010001 }

func (e APIGetGroupRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e APIGetGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIGetGroupRequestValidationError) ErrorName() string {
	return "APIGetGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e APIGetGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIGetGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIGetGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = APIGetGroupRequestValidationError{}

// Validate checks the field values on APIDeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APIDeleteGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIDeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APIDeleteGroupRequestMultiError, or nil if none found.
func (m *APIDeleteGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *APIDeleteGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return APIDeleteGroupRequestMultiError(errors)
	}

	return nil
}

// APIDeleteGroupRequestMultiError is an error wrapping multiple validation
// errors returned by APIDeleteGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type APIDeleteGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIDeleteGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIDeleteGroupRequestMultiError) AllErrors() []error { return m }

// APIDeleteGroupRequestValidationError is the validation error returned by
// APIDeleteGroupRequest.Validate if the designated constraints aren't met.
type APIDeleteGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIDeleteGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIDeleteGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIDeleteGroupRequestValidationError) Cause() error { return e.cause }

func (e APIDeleteGroupRequestValidationError) Code() int64 { return 10010001 }

func (e APIDeleteGroupRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e APIDeleteGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIDeleteGroupRequestValidationError) ErrorName() string {
	return "APIDeleteGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e APIDeleteGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIDeleteGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIDeleteGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = APIDeleteGroupRequestValidationError{}

// Validate checks the field values on APIDeleteGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APIDeleteGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIDeleteGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APIDeleteGroupReplyMultiError, or nil if none found.
func (m *APIDeleteGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *APIDeleteGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return APIDeleteGroupReplyMultiError(errors)
	}

	return nil
}

// APIDeleteGroupReplyMultiError is an error wrapping multiple validation
// errors returned by APIDeleteGroupReply.ValidateAll() if the designated
// constraints aren't met.
type APIDeleteGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIDeleteGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIDeleteGroupReplyMultiError) AllErrors() []error { return m }

// APIDeleteGroupReplyValidationError is the validation error returned by
// APIDeleteGroupReply.Validate if the designated constraints aren't met.
type APIDeleteGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIDeleteGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIDeleteGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIDeleteGroupReplyValidationError) Cause() error { return e.cause }

func (e APIDeleteGroupReplyValidationError) Code() int64 { return 10010001 }

func (e APIDeleteGroupReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e APIDeleteGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIDeleteGroupReplyValidationError) ErrorName() string {
	return "APIDeleteGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e APIDeleteGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIDeleteGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIDeleteGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = APIDeleteGroupReplyValidationError{}

// Validate checks the field values on APIGroupMember with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *APIGroupMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIGroupMember with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in APIGroupMemberMultiError,
// or nil if none found.
func (m *APIGroupMember) ValidateAll() error {
	return m.validate(true)
}

func (m *APIGroupMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemberId

	// no validation rules for MemberType

	if len(errors) > 0 {
		return APIGroupMemberMultiError(errors)
	}

	return nil
}

// APIGroupMemberMultiError is an error wrapping multiple validation errors
// returned by APIGroupMember.ValidateAll() if the designated constraints
// aren't met.
type APIGroupMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIGroupMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIGroupMemberMultiError) AllErrors() []error { return m }

// APIGroupMemberValidationError is the validation error returned by
// APIGroupMember.Validate if the designated constraints aren't met.
type APIGroupMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIGroupMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIGroupMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIGroupMemberValidationError) Cause() error { return e.cause }

func (e APIGroupMemberValidationError) Code() int64 { return 10010001 }

func (e APIGroupMemberValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e APIGroupMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIGroupMemberValidationError) ErrorName() string { return "APIGroupMemberValidationError" }

// Error satisfies the builtin error interface
func (e APIGroupMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIGroupMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIGroupMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = APIGroupMemberValidationError{}

// Validate checks the field values on APIAddMemberToGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APIAddMemberToGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIAddMemberToGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APIAddMemberToGroupRequestMultiError, or nil if none found.
func (m *APIAddMemberToGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *APIAddMemberToGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, APIAddMemberToGroupRequestValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, APIAddMemberToGroupRequestValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return APIAddMemberToGroupRequestValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return APIAddMemberToGroupRequestMultiError(errors)
	}

	return nil
}

// APIAddMemberToGroupRequestMultiError is an error wrapping multiple
// validation errors returned by APIAddMemberToGroupRequest.ValidateAll() if
// the designated constraints aren't met.
type APIAddMemberToGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIAddMemberToGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIAddMemberToGroupRequestMultiError) AllErrors() []error { return m }

// APIAddMemberToGroupRequestValidationError is the validation error returned
// by APIAddMemberToGroupRequest.Validate if the designated constraints aren't met.
type APIAddMemberToGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIAddMemberToGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIAddMemberToGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIAddMemberToGroupRequestValidationError) Cause() error { return e.cause }

func (e APIAddMemberToGroupRequestValidationError) Code() int64 { return 10010001 }

func (e APIAddMemberToGroupRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e APIAddMemberToGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIAddMemberToGroupRequestValidationError) ErrorName() string {
	return "APIAddMemberToGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e APIAddMemberToGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIAddMemberToGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIAddMemberToGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = APIAddMemberToGroupRequestValidationError{}

// Validate checks the field values on APIAddMemberToGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APIAddMemberToGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIAddMemberToGroupReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APIAddMemberToGroupReplyMultiError, or nil if none found.
func (m *APIAddMemberToGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *APIAddMemberToGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return APIAddMemberToGroupReplyMultiError(errors)
	}

	return nil
}

// APIAddMemberToGroupReplyMultiError is an error wrapping multiple validation
// errors returned by APIAddMemberToGroupReply.ValidateAll() if the designated
// constraints aren't met.
type APIAddMemberToGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIAddMemberToGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIAddMemberToGroupReplyMultiError) AllErrors() []error { return m }

// APIAddMemberToGroupReplyValidationError is the validation error returned by
// APIAddMemberToGroupReply.Validate if the designated constraints aren't met.
type APIAddMemberToGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIAddMemberToGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIAddMemberToGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIAddMemberToGroupReplyValidationError) Cause() error { return e.cause }

func (e APIAddMemberToGroupReplyValidationError) Code() int64 { return 10010001 }

func (e APIAddMemberToGroupReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e APIAddMemberToGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIAddMemberToGroupReplyValidationError) ErrorName() string {
	return "APIAddMemberToGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e APIAddMemberToGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIAddMemberToGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIAddMemberToGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = APIAddMemberToGroupReplyValidationError{}

// Validate checks the field values on APIRemoveMemberFromGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APIRemoveMemberFromGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIRemoveMemberFromGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// APIRemoveMemberFromGroupRequestMultiError, or nil if none found.
func (m *APIRemoveMemberFromGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *APIRemoveMemberFromGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return APIRemoveMemberFromGroupRequestMultiError(errors)
	}

	return nil
}

// APIRemoveMemberFromGroupRequestMultiError is an error wrapping multiple
// validation errors returned by APIRemoveMemberFromGroupRequest.ValidateAll()
// if the designated constraints aren't met.
type APIRemoveMemberFromGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIRemoveMemberFromGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIRemoveMemberFromGroupRequestMultiError) AllErrors() []error { return m }

// APIRemoveMemberFromGroupRequestValidationError is the validation error
// returned by APIRemoveMemberFromGroupRequest.Validate if the designated
// constraints aren't met.
type APIRemoveMemberFromGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIRemoveMemberFromGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIRemoveMemberFromGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIRemoveMemberFromGroupRequestValidationError) Cause() error { return e.cause }

func (e APIRemoveMemberFromGroupRequestValidationError) Code() int64 { return 10010001 }

func (e APIRemoveMemberFromGroupRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e APIRemoveMemberFromGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIRemoveMemberFromGroupRequestValidationError) ErrorName() string {
	return "APIRemoveMemberFromGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e APIRemoveMemberFromGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIRemoveMemberFromGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIRemoveMemberFromGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = APIRemoveMemberFromGroupRequestValidationError{}

// Validate checks the field values on APIRemoveMemberFromGroupReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APIRemoveMemberFromGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIRemoveMemberFromGroupReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// APIRemoveMemberFromGroupReplyMultiError, or nil if none found.
func (m *APIRemoveMemberFromGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *APIRemoveMemberFromGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return APIRemoveMemberFromGroupReplyMultiError(errors)
	}

	return nil
}

// APIRemoveMemberFromGroupReplyMultiError is an error wrapping multiple
// validation errors returned by APIRemoveMemberFromGroupReply.ValidateAll()
// if the designated constraints aren't met.
type APIRemoveMemberFromGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIRemoveMemberFromGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIRemoveMemberFromGroupReplyMultiError) AllErrors() []error { return m }

// APIRemoveMemberFromGroupReplyValidationError is the validation error
// returned by APIRemoveMemberFromGroupReply.Validate if the designated
// constraints aren't met.
type APIRemoveMemberFromGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIRemoveMemberFromGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIRemoveMemberFromGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIRemoveMemberFromGroupReplyValidationError) Cause() error { return e.cause }

func (e APIRemoveMemberFromGroupReplyValidationError) Code() int64 { return 10010001 }

func (e APIRemoveMemberFromGroupReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e APIRemoveMemberFromGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIRemoveMemberFromGroupReplyValidationError) ErrorName() string {
	return "APIRemoveMemberFromGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e APIRemoveMemberFromGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIRemoveMemberFromGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIRemoveMemberFromGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = APIRemoveMemberFromGroupReplyValidationError{}

// Validate checks the field values on APICreateGroupListData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APICreateGroupListData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APICreateGroupListData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APICreateGroupListDataMultiError, or nil if none found.
func (m *APICreateGroupListData) ValidateAll() error {
	return m.validate(true)
}

func (m *APICreateGroupListData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	if len(errors) > 0 {
		return APICreateGroupListDataMultiError(errors)
	}

	return nil
}

// APICreateGroupListDataMultiError is an error wrapping multiple validation
// errors returned by APICreateGroupListData.ValidateAll() if the designated
// constraints aren't met.
type APICreateGroupListDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APICreateGroupListDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APICreateGroupListDataMultiError) AllErrors() []error { return m }

// APICreateGroupListDataValidationError is the validation error returned by
// APICreateGroupListData.Validate if the designated constraints aren't met.
type APICreateGroupListDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APICreateGroupListDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APICreateGroupListDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APICreateGroupListDataValidationError) Cause() error { return e.cause }

func (e APICreateGroupListDataValidationError) Code() int64 { return 10010001 }

func (e APICreateGroupListDataValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e APICreateGroupListDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APICreateGroupListDataValidationError) ErrorName() string {
	return "APICreateGroupListDataValidationError"
}

// Error satisfies the builtin error interface
func (e APICreateGroupListDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPICreateGroupListData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APICreateGroupListDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = APICreateGroupListDataValidationError{}

// Validate checks the field values on APICreateGroupListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APICreateGroupListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APICreateGroupListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APICreateGroupListRequestMultiError, or nil if none found.
func (m *APICreateGroupListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *APICreateGroupListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, APICreateGroupListRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, APICreateGroupListRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return APICreateGroupListRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return APICreateGroupListRequestMultiError(errors)
	}

	return nil
}

// APICreateGroupListRequestMultiError is an error wrapping multiple validation
// errors returned by APICreateGroupListRequest.ValidateAll() if the
// designated constraints aren't met.
type APICreateGroupListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APICreateGroupListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APICreateGroupListRequestMultiError) AllErrors() []error { return m }

// APICreateGroupListRequestValidationError is the validation error returned by
// APICreateGroupListRequest.Validate if the designated constraints aren't met.
type APICreateGroupListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APICreateGroupListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APICreateGroupListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APICreateGroupListRequestValidationError) Cause() error { return e.cause }

func (e APICreateGroupListRequestValidationError) Code() int64 { return 10010001 }

func (e APICreateGroupListRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e APICreateGroupListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APICreateGroupListRequestValidationError) ErrorName() string {
	return "APICreateGroupListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e APICreateGroupListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPICreateGroupListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APICreateGroupListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = APICreateGroupListRequestValidationError{}

// Validate checks the field values on APICreateGroupListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APICreateGroupListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APICreateGroupListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APICreateGroupListReplyMultiError, or nil if none found.
func (m *APICreateGroupListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *APICreateGroupListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return APICreateGroupListReplyMultiError(errors)
	}

	return nil
}

// APICreateGroupListReplyMultiError is an error wrapping multiple validation
// errors returned by APICreateGroupListReply.ValidateAll() if the designated
// constraints aren't met.
type APICreateGroupListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APICreateGroupListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APICreateGroupListReplyMultiError) AllErrors() []error { return m }

// APICreateGroupListReplyValidationError is the validation error returned by
// APICreateGroupListReply.Validate if the designated constraints aren't met.
type APICreateGroupListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APICreateGroupListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APICreateGroupListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APICreateGroupListReplyValidationError) Cause() error { return e.cause }

func (e APICreateGroupListReplyValidationError) Code() int64 { return 10010001 }

func (e APICreateGroupListReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e APICreateGroupListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APICreateGroupListReplyValidationError) ErrorName() string {
	return "APICreateGroupListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e APICreateGroupListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPICreateGroupListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APICreateGroupListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = APICreateGroupListReplyValidationError{}

// Validate checks the field values on APIDeleteGroupListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APIDeleteGroupListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIDeleteGroupListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APIDeleteGroupListRequestMultiError, or nil if none found.
func (m *APIDeleteGroupListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *APIDeleteGroupListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return APIDeleteGroupListRequestMultiError(errors)
	}

	return nil
}

// APIDeleteGroupListRequestMultiError is an error wrapping multiple validation
// errors returned by APIDeleteGroupListRequest.ValidateAll() if the
// designated constraints aren't met.
type APIDeleteGroupListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIDeleteGroupListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIDeleteGroupListRequestMultiError) AllErrors() []error { return m }

// APIDeleteGroupListRequestValidationError is the validation error returned by
// APIDeleteGroupListRequest.Validate if the designated constraints aren't met.
type APIDeleteGroupListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIDeleteGroupListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIDeleteGroupListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIDeleteGroupListRequestValidationError) Cause() error { return e.cause }

func (e APIDeleteGroupListRequestValidationError) Code() int64 { return 10010001 }

func (e APIDeleteGroupListRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e APIDeleteGroupListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIDeleteGroupListRequestValidationError) ErrorName() string {
	return "APIDeleteGroupListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e APIDeleteGroupListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIDeleteGroupListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIDeleteGroupListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = APIDeleteGroupListRequestValidationError{}

// Validate checks the field values on APIDeleteGroupListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APIDeleteGroupListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIDeleteGroupListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APIDeleteGroupListReplyMultiError, or nil if none found.
func (m *APIDeleteGroupListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *APIDeleteGroupListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return APIDeleteGroupListReplyMultiError(errors)
	}

	return nil
}

// APIDeleteGroupListReplyMultiError is an error wrapping multiple validation
// errors returned by APIDeleteGroupListReply.ValidateAll() if the designated
// constraints aren't met.
type APIDeleteGroupListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIDeleteGroupListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIDeleteGroupListReplyMultiError) AllErrors() []error { return m }

// APIDeleteGroupListReplyValidationError is the validation error returned by
// APIDeleteGroupListReply.Validate if the designated constraints aren't met.
type APIDeleteGroupListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIDeleteGroupListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIDeleteGroupListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIDeleteGroupListReplyValidationError) Cause() error { return e.cause }

func (e APIDeleteGroupListReplyValidationError) Code() int64 { return 10010001 }

func (e APIDeleteGroupListReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e APIDeleteGroupListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIDeleteGroupListReplyValidationError) ErrorName() string {
	return "APIDeleteGroupListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e APIDeleteGroupListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIDeleteGroupListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIDeleteGroupListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = APIDeleteGroupListReplyValidationError{}
