// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.1
// - protoc             v5.26.1
// source: api/iam-service/v1/services/iam.api.service.v1.proto

package iamservicev1

import (
	context "context"
	fmt "fmt"

	client "gitlab.lainuoniao.cn/eden-quan/go-biz-kit/client"
	def "gitlab.lainuoniao.cn/eden-quan/go-biz-kit/config/def"
	resources "gitlab.lainuoniao.cn/eden-quan/proto-service/api/iam-service/v1/resources"
	fx "go.uber.org/fx"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7
const _ = fx.Version

var _ = new(fmt.Stringer)
var _ = new(def.Server)
var _ = new(client.RegisterGRPCClientFactoryType)

const (
	IAMApiService_CreateGroup_FullMethodName           = "/api.iam.service.iamservicev1.IAMApiService/CreateGroup"
	IAMApiService_DeleteGroup_FullMethodName           = "/api.iam.service.iamservicev1.IAMApiService/DeleteGroup"
	IAMApiService_AddMemberToGroup_FullMethodName      = "/api.iam.service.iamservicev1.IAMApiService/AddMemberToGroup"
	IAMApiService_RemoveMemberFromGroup_FullMethodName = "/api.iam.service.iamservicev1.IAMApiService/RemoveMemberFromGroup"
	IAMApiService_CreateGroupList_FullMethodName       = "/api.iam.service.iamservicev1.IAMApiService/CreateGroupList"
	IAMApiService_DeleteGroupList_FullMethodName       = "/api.iam.service.iamservicev1.IAMApiService/DeleteGroupList"
)

// IAMApiServiceClient is the client API for IAMApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMApiServiceClient interface {
	CreateGroup(ctx context.Context, in *resources.APICreateGroupRequest, opts ...grpc.CallOption) (*resources.APICreateGroupReply, error)
	DeleteGroup(ctx context.Context, in *resources.APIDeleteGroupRequest, opts ...grpc.CallOption) (*resources.APIDeleteGroupReply, error)
	AddMemberToGroup(ctx context.Context, in *resources.APIAddMemberToGroupRequest, opts ...grpc.CallOption) (*resources.APIAddMemberToGroupReply, error)
	RemoveMemberFromGroup(ctx context.Context, in *resources.APIRemoveMemberFromGroupRequest, opts ...grpc.CallOption) (*resources.APIRemoveMemberFromGroupReply, error)
	CreateGroupList(ctx context.Context, in *resources.APICreateGroupListRequest, opts ...grpc.CallOption) (*resources.APICreateGroupListReply, error)
	DeleteGroupList(ctx context.Context, in *resources.APIDeleteGroupListRequest, opts ...grpc.CallOption) (*resources.APIDeleteGroupListReply, error)
	RegisterNameForDiscover() string
}

type iAMApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func (c *iAMApiServiceClient) RegisterNameForDiscover() string {
	return "/iam-service/v1"
}

func newIAMApiServiceClient(cc grpc.ClientConnInterface) IAMApiServiceClient {
	return &iAMApiServiceClient{cc}
}

func registerIAMApiServiceClientGRPCNameProvider() []string {
	return []string{"/iam-service/v1", "grpc"}
}

// RegisterIAMApiServiceClientGRPCProvider is the provider for injection framework
// creator is the factory function which use to create the IAMApiServiceClient instance/implement
// the creator function receive dependency provided by fx to create ClientInterface,
// and returns the new dependency can use by others functions
func RegisterIAMApiServiceClientGRPCProvider(creator interface{}) []interface{} {
	return []interface{}{
		fx.Annotate(
			newIAMApiServiceClient,
			fx.As(new(IAMApiServiceClient)),
			fx.ParamTags(`name:"/iam-service/v1/grpc/iAMApiService"`),
		),
		fx.Annotate(
			creator,
			fx.As(new(grpc.ClientConnInterface)),
			fx.ParamTags(`name:"/iam-service/v1/grpc/name/iAMApiService"`),
			fx.ResultTags(`name:"/iam-service/v1/grpc/iAMApiService"`),
		),
		fx.Annotate(
			registerIAMApiServiceClientGRPCNameProvider,
			fx.ResultTags(`name:"/iam-service/v1/grpc/name/iAMApiService"`),
		),
	}
}

type IAMApiServiceClientGRPCFactory interface {
	New(conf *def.Server) (IAMApiServiceClient, error)
}

type iAMApiServiceClientGRPCFactoryImpl struct {
	factory client.RegisterGRPCClientFactoryType
}

func (p *iAMApiServiceClientGRPCFactoryImpl) New(conf *def.Server) (IAMApiServiceClient, error) {
	cc, err := p.factory(conf)
	if err != nil {
		return nil, fmt.Errorf("create IAMApiServiceClient failed cause %s", err)
	}
	return &iAMApiServiceClient{cc: cc}, nil
}

func RegisterIAMApiServiceClientGRPCFactoryProvider(factory client.RegisterGRPCClientFactoryType) IAMApiServiceClientGRPCFactory {
	return &iAMApiServiceClientGRPCFactoryImpl{factory: factory}
}

func (c *iAMApiServiceClient) CreateGroup(ctx context.Context, in *resources.APICreateGroupRequest, opts ...grpc.CallOption) (*resources.APICreateGroupReply, error) {
	out := new(resources.APICreateGroupReply)
	err := c.cc.Invoke(ctx, IAMApiService_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMApiServiceClient) DeleteGroup(ctx context.Context, in *resources.APIDeleteGroupRequest, opts ...grpc.CallOption) (*resources.APIDeleteGroupReply, error) {
	out := new(resources.APIDeleteGroupReply)
	err := c.cc.Invoke(ctx, IAMApiService_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMApiServiceClient) AddMemberToGroup(ctx context.Context, in *resources.APIAddMemberToGroupRequest, opts ...grpc.CallOption) (*resources.APIAddMemberToGroupReply, error) {
	out := new(resources.APIAddMemberToGroupReply)
	err := c.cc.Invoke(ctx, IAMApiService_AddMemberToGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMApiServiceClient) RemoveMemberFromGroup(ctx context.Context, in *resources.APIRemoveMemberFromGroupRequest, opts ...grpc.CallOption) (*resources.APIRemoveMemberFromGroupReply, error) {
	out := new(resources.APIRemoveMemberFromGroupReply)
	err := c.cc.Invoke(ctx, IAMApiService_RemoveMemberFromGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMApiServiceClient) CreateGroupList(ctx context.Context, in *resources.APICreateGroupListRequest, opts ...grpc.CallOption) (*resources.APICreateGroupListReply, error) {
	out := new(resources.APICreateGroupListReply)
	err := c.cc.Invoke(ctx, IAMApiService_CreateGroupList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMApiServiceClient) DeleteGroupList(ctx context.Context, in *resources.APIDeleteGroupListRequest, opts ...grpc.CallOption) (*resources.APIDeleteGroupListReply, error) {
	out := new(resources.APIDeleteGroupListReply)
	err := c.cc.Invoke(ctx, IAMApiService_DeleteGroupList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMApiServiceServer is the server API for IAMApiService service.
// All implementations must embed UnimplementedIAMApiServiceServer
// for forward compatibility
type IAMApiServiceServer interface {
	CreateGroup(context.Context, *resources.APICreateGroupRequest) (*resources.APICreateGroupReply, error)
	DeleteGroup(context.Context, *resources.APIDeleteGroupRequest) (*resources.APIDeleteGroupReply, error)
	AddMemberToGroup(context.Context, *resources.APIAddMemberToGroupRequest) (*resources.APIAddMemberToGroupReply, error)
	RemoveMemberFromGroup(context.Context, *resources.APIRemoveMemberFromGroupRequest) (*resources.APIRemoveMemberFromGroupReply, error)
	CreateGroupList(context.Context, *resources.APICreateGroupListRequest) (*resources.APICreateGroupListReply, error)
	DeleteGroupList(context.Context, *resources.APIDeleteGroupListRequest) (*resources.APIDeleteGroupListReply, error)
	mustEmbedUnimplementedIAMApiServiceServer()
}

// Generate Injection
type registerIAMApiServiceServerGRPCResult struct{}

func (*registerIAMApiServiceServerGRPCResult) String() string {
	return "IAMApiServiceServerGRPCServer"
}

func RegisterIAMApiServiceServerGRPCProvider(newer interface{}) []interface{} {
	return []interface{}{
		// For provide dependency
		fx.Annotate(
			newer,
			fx.As(new(IAMApiServiceServer)),
		),
		// For create instance
		fx.Annotate(
			registerIAMApiServiceServerProviderImpl,
			fx.As(new(fmt.Stringer)),
			fx.ResultTags(`group:"grpc_register"`),
		),
	}
}

// registerIAMApiServiceServerProviderImpl use to trigger register
func registerIAMApiServiceServerProviderImpl(s grpc.ServiceRegistrar, srv IAMApiServiceServer) *registerIAMApiServiceServerGRPCResult {
	registerIAMApiServiceServer(s, srv)
	return &registerIAMApiServiceServerGRPCResult{}
}

// UnimplementedIAMApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMApiServiceServer struct {
}

func (UnimplementedIAMApiServiceServer) CreateGroup(context.Context, *resources.APICreateGroupRequest) (*resources.APICreateGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedIAMApiServiceServer) DeleteGroup(context.Context, *resources.APIDeleteGroupRequest) (*resources.APIDeleteGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedIAMApiServiceServer) AddMemberToGroup(context.Context, *resources.APIAddMemberToGroupRequest) (*resources.APIAddMemberToGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberToGroup not implemented")
}
func (UnimplementedIAMApiServiceServer) RemoveMemberFromGroup(context.Context, *resources.APIRemoveMemberFromGroupRequest) (*resources.APIRemoveMemberFromGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMemberFromGroup not implemented")
}
func (UnimplementedIAMApiServiceServer) CreateGroupList(context.Context, *resources.APICreateGroupListRequest) (*resources.APICreateGroupListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupList not implemented")
}
func (UnimplementedIAMApiServiceServer) DeleteGroupList(context.Context, *resources.APIDeleteGroupListRequest) (*resources.APIDeleteGroupListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupList not implemented")
}
func (UnimplementedIAMApiServiceServer) mustEmbedUnimplementedIAMApiServiceServer() {}

// UnsafeIAMApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMApiServiceServer will
// result in compilation errors.
type UnsafeIAMApiServiceServer interface {
	mustEmbedUnimplementedIAMApiServiceServer()
}

func registerIAMApiServiceServer(s grpc.ServiceRegistrar, srv IAMApiServiceServer) {
	s.RegisterService(&IAMApiService_ServiceDesc, srv)
}

func _IAMApiService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.APICreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMApiServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMApiService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMApiServiceServer).CreateGroup(ctx, req.(*resources.APICreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMApiService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.APIDeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMApiServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMApiService_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMApiServiceServer).DeleteGroup(ctx, req.(*resources.APIDeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMApiService_AddMemberToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.APIAddMemberToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMApiServiceServer).AddMemberToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMApiService_AddMemberToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMApiServiceServer).AddMemberToGroup(ctx, req.(*resources.APIAddMemberToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMApiService_RemoveMemberFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.APIRemoveMemberFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMApiServiceServer).RemoveMemberFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMApiService_RemoveMemberFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMApiServiceServer).RemoveMemberFromGroup(ctx, req.(*resources.APIRemoveMemberFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMApiService_CreateGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.APICreateGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMApiServiceServer).CreateGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMApiService_CreateGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMApiServiceServer).CreateGroupList(ctx, req.(*resources.APICreateGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMApiService_DeleteGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.APIDeleteGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMApiServiceServer).DeleteGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMApiService_DeleteGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMApiServiceServer).DeleteGroupList(ctx, req.(*resources.APIDeleteGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMApiService_ServiceDesc is the grpc.ServiceDesc for IAMApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.iam.service.iamservicev1.IAMApiService",
	HandlerType: (*IAMApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _IAMApiService_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _IAMApiService_DeleteGroup_Handler,
		},
		{
			MethodName: "AddMemberToGroup",
			Handler:    _IAMApiService_AddMemberToGroup_Handler,
		},
		{
			MethodName: "RemoveMemberFromGroup",
			Handler:    _IAMApiService_RemoveMemberFromGroup_Handler,
		},
		{
			MethodName: "CreateGroupList",
			Handler:    _IAMApiService_CreateGroupList_Handler,
		},
		{
			MethodName: "DeleteGroupList",
			Handler:    _IAMApiService_DeleteGroupList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/iam-service/v1/services/iam.api.service.v1.proto",
}
