// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.1
// - protoc             v5.26.1
// source: api/iam-service/v1/services/iam.permission.service.v1.proto

package iamservicev1

import (
	context "context"
	fmt "fmt"

	client "gitlab.lainuoniao.cn/eden-quan/go-biz-kit/client"
	def "gitlab.lainuoniao.cn/eden-quan/go-biz-kit/config/def"
	resources "gitlab.lainuoniao.cn/eden-quan/proto-service/api/iam-service/v1/resources"
	fx "go.uber.org/fx"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7
const _ = fx.Version

var _ = new(fmt.Stringer)
var _ = new(def.Server)
var _ = new(client.RegisterGRPCClientFactoryType)

const (
	IAMPermissionService_CreateService_FullMethodName            = "/api.iam.service.iamservicev1.IAMPermissionService/CreateService"
	IAMPermissionService_CreateServicePermissions_FullMethodName = "/api.iam.service.iamservicev1.IAMPermissionService/CreateServicePermissions"
	IAMPermissionService_UpdateServicePermissions_FullMethodName = "/api.iam.service.iamservicev1.IAMPermissionService/UpdateServicePermissions"
	IAMPermissionService_ListServices_FullMethodName             = "/api.iam.service.iamservicev1.IAMPermissionService/ListServices"
	IAMPermissionService_UpdateService_FullMethodName            = "/api.iam.service.iamservicev1.IAMPermissionService/UpdateService"
	IAMPermissionService_ListPermissions_FullMethodName          = "/api.iam.service.iamservicev1.IAMPermissionService/ListPermissions"
	IAMPermissionService_UpdatePermission_FullMethodName         = "/api.iam.service.iamservicev1.IAMPermissionService/UpdatePermission"
	IAMPermissionService_CreatePermission_FullMethodName         = "/api.iam.service.iamservicev1.IAMPermissionService/CreatePermission"
	IAMPermissionService_GetPermission_FullMethodName            = "/api.iam.service.iamservicev1.IAMPermissionService/GetPermission"
	IAMPermissionService_DeletePermission_FullMethodName         = "/api.iam.service.iamservicev1.IAMPermissionService/DeletePermission"
)

// IAMPermissionServiceClient is the client API for IAMPermissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMPermissionServiceClient interface {
	// set service permission
	CreateService(ctx context.Context, in *resources.CreateServiceRequest, opts ...grpc.CallOption) (*resources.CreateServiceResponse, error)
	CreateServicePermissions(ctx context.Context, in *resources.CreateServicePermissionsRequest, opts ...grpc.CallOption) (*resources.CreateServicePermissionsResponse, error)
	UpdateServicePermissions(ctx context.Context, in *resources.UpdateServicePermissionsRequest, opts ...grpc.CallOption) (*resources.UpdateServicePermissionsResponse, error)
	ListServices(ctx context.Context, in *resources.ListServicesRequest, opts ...grpc.CallOption) (*resources.ListServicesResponse, error)
	UpdateService(ctx context.Context, in *resources.UpdateServiceRequest, opts ...grpc.CallOption) (*resources.UpdateServiceResponse, error)
	ListPermissions(ctx context.Context, in *resources.ListPermissionsRequest, opts ...grpc.CallOption) (*resources.ListPermissionsResponse, error)
	UpdatePermission(ctx context.Context, in *resources.UpdatePermissionRequest, opts ...grpc.CallOption) (*resources.UpdatePermissionResponse, error)
	CreatePermission(ctx context.Context, in *resources.CreatePermissionRequest, opts ...grpc.CallOption) (*resources.CreatePermissionResponse, error)
	GetPermission(ctx context.Context, in *resources.GetPermissionRequest, opts ...grpc.CallOption) (*resources.GetPermissionResponse, error)
	DeletePermission(ctx context.Context, in *resources.DeletePermissionRequest, opts ...grpc.CallOption) (*resources.DeletePermissionResponse, error)
	RegisterNameForDiscover() string
}

type iAMPermissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func (c *iAMPermissionServiceClient) RegisterNameForDiscover() string {
	return "/iam-service/v1"
}

func newIAMPermissionServiceClient(cc grpc.ClientConnInterface) IAMPermissionServiceClient {
	return &iAMPermissionServiceClient{cc}
}

func registerIAMPermissionServiceClientGRPCNameProvider() []string {
	return []string{"/iam-service/v1", "grpc"}
}

// RegisterIAMPermissionServiceClientGRPCProvider is the provider for injection framework
// creator is the factory function which use to create the IAMPermissionServiceClient instance/implement
// the creator function receive dependency provided by fx to create ClientInterface,
// and returns the new dependency can use by others functions
func RegisterIAMPermissionServiceClientGRPCProvider(creator interface{}) []interface{} {
	return []interface{}{
		fx.Annotate(
			newIAMPermissionServiceClient,
			fx.As(new(IAMPermissionServiceClient)),
			fx.ParamTags(`name:"/iam-service/v1/grpc/iAMPermissionService"`),
		),
		fx.Annotate(
			creator,
			fx.As(new(grpc.ClientConnInterface)),
			fx.ParamTags(`name:"/iam-service/v1/grpc/name/iAMPermissionService"`),
			fx.ResultTags(`name:"/iam-service/v1/grpc/iAMPermissionService"`),
		),
		fx.Annotate(
			registerIAMPermissionServiceClientGRPCNameProvider,
			fx.ResultTags(`name:"/iam-service/v1/grpc/name/iAMPermissionService"`),
		),
	}
}

type IAMPermissionServiceClientGRPCFactory interface {
	New(conf *def.Server) (IAMPermissionServiceClient, error)
}

type iAMPermissionServiceClientGRPCFactoryImpl struct {
	factory client.RegisterGRPCClientFactoryType
}

func (p *iAMPermissionServiceClientGRPCFactoryImpl) New(conf *def.Server) (IAMPermissionServiceClient, error) {
	cc, err := p.factory(conf)
	if err != nil {
		return nil, fmt.Errorf("create IAMPermissionServiceClient failed cause %s", err)
	}
	return &iAMPermissionServiceClient{cc: cc}, nil
}

func RegisterIAMPermissionServiceClientGRPCFactoryProvider(factory client.RegisterGRPCClientFactoryType) IAMPermissionServiceClientGRPCFactory {
	return &iAMPermissionServiceClientGRPCFactoryImpl{factory: factory}
}

func (c *iAMPermissionServiceClient) CreateService(ctx context.Context, in *resources.CreateServiceRequest, opts ...grpc.CallOption) (*resources.CreateServiceResponse, error) {
	out := new(resources.CreateServiceResponse)
	err := c.cc.Invoke(ctx, IAMPermissionService_CreateService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMPermissionServiceClient) CreateServicePermissions(ctx context.Context, in *resources.CreateServicePermissionsRequest, opts ...grpc.CallOption) (*resources.CreateServicePermissionsResponse, error) {
	out := new(resources.CreateServicePermissionsResponse)
	err := c.cc.Invoke(ctx, IAMPermissionService_CreateServicePermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMPermissionServiceClient) UpdateServicePermissions(ctx context.Context, in *resources.UpdateServicePermissionsRequest, opts ...grpc.CallOption) (*resources.UpdateServicePermissionsResponse, error) {
	out := new(resources.UpdateServicePermissionsResponse)
	err := c.cc.Invoke(ctx, IAMPermissionService_UpdateServicePermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMPermissionServiceClient) ListServices(ctx context.Context, in *resources.ListServicesRequest, opts ...grpc.CallOption) (*resources.ListServicesResponse, error) {
	out := new(resources.ListServicesResponse)
	err := c.cc.Invoke(ctx, IAMPermissionService_ListServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMPermissionServiceClient) UpdateService(ctx context.Context, in *resources.UpdateServiceRequest, opts ...grpc.CallOption) (*resources.UpdateServiceResponse, error) {
	out := new(resources.UpdateServiceResponse)
	err := c.cc.Invoke(ctx, IAMPermissionService_UpdateService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMPermissionServiceClient) ListPermissions(ctx context.Context, in *resources.ListPermissionsRequest, opts ...grpc.CallOption) (*resources.ListPermissionsResponse, error) {
	out := new(resources.ListPermissionsResponse)
	err := c.cc.Invoke(ctx, IAMPermissionService_ListPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMPermissionServiceClient) UpdatePermission(ctx context.Context, in *resources.UpdatePermissionRequest, opts ...grpc.CallOption) (*resources.UpdatePermissionResponse, error) {
	out := new(resources.UpdatePermissionResponse)
	err := c.cc.Invoke(ctx, IAMPermissionService_UpdatePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMPermissionServiceClient) CreatePermission(ctx context.Context, in *resources.CreatePermissionRequest, opts ...grpc.CallOption) (*resources.CreatePermissionResponse, error) {
	out := new(resources.CreatePermissionResponse)
	err := c.cc.Invoke(ctx, IAMPermissionService_CreatePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMPermissionServiceClient) GetPermission(ctx context.Context, in *resources.GetPermissionRequest, opts ...grpc.CallOption) (*resources.GetPermissionResponse, error) {
	out := new(resources.GetPermissionResponse)
	err := c.cc.Invoke(ctx, IAMPermissionService_GetPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMPermissionServiceClient) DeletePermission(ctx context.Context, in *resources.DeletePermissionRequest, opts ...grpc.CallOption) (*resources.DeletePermissionResponse, error) {
	out := new(resources.DeletePermissionResponse)
	err := c.cc.Invoke(ctx, IAMPermissionService_DeletePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMPermissionServiceServer is the server API for IAMPermissionService service.
// All implementations must embed UnimplementedIAMPermissionServiceServer
// for forward compatibility
type IAMPermissionServiceServer interface {
	// set service permission
	CreateService(context.Context, *resources.CreateServiceRequest) (*resources.CreateServiceResponse, error)
	CreateServicePermissions(context.Context, *resources.CreateServicePermissionsRequest) (*resources.CreateServicePermissionsResponse, error)
	UpdateServicePermissions(context.Context, *resources.UpdateServicePermissionsRequest) (*resources.UpdateServicePermissionsResponse, error)
	ListServices(context.Context, *resources.ListServicesRequest) (*resources.ListServicesResponse, error)
	UpdateService(context.Context, *resources.UpdateServiceRequest) (*resources.UpdateServiceResponse, error)
	ListPermissions(context.Context, *resources.ListPermissionsRequest) (*resources.ListPermissionsResponse, error)
	UpdatePermission(context.Context, *resources.UpdatePermissionRequest) (*resources.UpdatePermissionResponse, error)
	CreatePermission(context.Context, *resources.CreatePermissionRequest) (*resources.CreatePermissionResponse, error)
	GetPermission(context.Context, *resources.GetPermissionRequest) (*resources.GetPermissionResponse, error)
	DeletePermission(context.Context, *resources.DeletePermissionRequest) (*resources.DeletePermissionResponse, error)
	mustEmbedUnimplementedIAMPermissionServiceServer()
}

// Generate Injection
type registerIAMPermissionServiceServerGRPCResult struct{}

func (*registerIAMPermissionServiceServerGRPCResult) String() string {
	return "IAMPermissionServiceServerGRPCServer"
}

func RegisterIAMPermissionServiceServerGRPCProvider(newer interface{}) []interface{} {
	return []interface{}{
		// For provide dependency
		fx.Annotate(
			newer,
			fx.As(new(IAMPermissionServiceServer)),
		),
		// For create instance
		fx.Annotate(
			registerIAMPermissionServiceServerProviderImpl,
			fx.As(new(fmt.Stringer)),
			fx.ResultTags(`group:"grpc_register"`),
		),
	}
}

// registerIAMPermissionServiceServerProviderImpl use to trigger register
func registerIAMPermissionServiceServerProviderImpl(s grpc.ServiceRegistrar, srv IAMPermissionServiceServer) *registerIAMPermissionServiceServerGRPCResult {
	registerIAMPermissionServiceServer(s, srv)
	return &registerIAMPermissionServiceServerGRPCResult{}
}

// UnimplementedIAMPermissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMPermissionServiceServer struct {
}

func (UnimplementedIAMPermissionServiceServer) CreateService(context.Context, *resources.CreateServiceRequest) (*resources.CreateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedIAMPermissionServiceServer) CreateServicePermissions(context.Context, *resources.CreateServicePermissionsRequest) (*resources.CreateServicePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServicePermissions not implemented")
}
func (UnimplementedIAMPermissionServiceServer) UpdateServicePermissions(context.Context, *resources.UpdateServicePermissionsRequest) (*resources.UpdateServicePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServicePermissions not implemented")
}
func (UnimplementedIAMPermissionServiceServer) ListServices(context.Context, *resources.ListServicesRequest) (*resources.ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedIAMPermissionServiceServer) UpdateService(context.Context, *resources.UpdateServiceRequest) (*resources.UpdateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedIAMPermissionServiceServer) ListPermissions(context.Context, *resources.ListPermissionsRequest) (*resources.ListPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedIAMPermissionServiceServer) UpdatePermission(context.Context, *resources.UpdatePermissionRequest) (*resources.UpdatePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermission not implemented")
}
func (UnimplementedIAMPermissionServiceServer) CreatePermission(context.Context, *resources.CreatePermissionRequest) (*resources.CreatePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedIAMPermissionServiceServer) GetPermission(context.Context, *resources.GetPermissionRequest) (*resources.GetPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (UnimplementedIAMPermissionServiceServer) DeletePermission(context.Context, *resources.DeletePermissionRequest) (*resources.DeletePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedIAMPermissionServiceServer) mustEmbedUnimplementedIAMPermissionServiceServer() {}

// UnsafeIAMPermissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMPermissionServiceServer will
// result in compilation errors.
type UnsafeIAMPermissionServiceServer interface {
	mustEmbedUnimplementedIAMPermissionServiceServer()
}

func registerIAMPermissionServiceServer(s grpc.ServiceRegistrar, srv IAMPermissionServiceServer) {
	s.RegisterService(&IAMPermissionService_ServiceDesc, srv)
}

func _IAMPermissionService_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMPermissionServiceServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMPermissionService_CreateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMPermissionServiceServer).CreateService(ctx, req.(*resources.CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMPermissionService_CreateServicePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateServicePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMPermissionServiceServer).CreateServicePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMPermissionService_CreateServicePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMPermissionServiceServer).CreateServicePermissions(ctx, req.(*resources.CreateServicePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMPermissionService_UpdateServicePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdateServicePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMPermissionServiceServer).UpdateServicePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMPermissionService_UpdateServicePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMPermissionServiceServer).UpdateServicePermissions(ctx, req.(*resources.UpdateServicePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMPermissionService_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMPermissionServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMPermissionService_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMPermissionServiceServer).ListServices(ctx, req.(*resources.ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMPermissionService_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMPermissionServiceServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMPermissionService_UpdateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMPermissionServiceServer).UpdateService(ctx, req.(*resources.UpdateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMPermissionService_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMPermissionServiceServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMPermissionService_ListPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMPermissionServiceServer).ListPermissions(ctx, req.(*resources.ListPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMPermissionService_UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMPermissionServiceServer).UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMPermissionService_UpdatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMPermissionServiceServer).UpdatePermission(ctx, req.(*resources.UpdatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMPermissionService_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMPermissionServiceServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMPermissionService_CreatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMPermissionServiceServer).CreatePermission(ctx, req.(*resources.CreatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMPermissionService_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMPermissionServiceServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMPermissionService_GetPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMPermissionServiceServer).GetPermission(ctx, req.(*resources.GetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMPermissionService_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeletePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMPermissionServiceServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMPermissionService_DeletePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMPermissionServiceServer).DeletePermission(ctx, req.(*resources.DeletePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMPermissionService_ServiceDesc is the grpc.ServiceDesc for IAMPermissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMPermissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.iam.service.iamservicev1.IAMPermissionService",
	HandlerType: (*IAMPermissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateService",
			Handler:    _IAMPermissionService_CreateService_Handler,
		},
		{
			MethodName: "CreateServicePermissions",
			Handler:    _IAMPermissionService_CreateServicePermissions_Handler,
		},
		{
			MethodName: "UpdateServicePermissions",
			Handler:    _IAMPermissionService_UpdateServicePermissions_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _IAMPermissionService_ListServices_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _IAMPermissionService_UpdateService_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _IAMPermissionService_ListPermissions_Handler,
		},
		{
			MethodName: "UpdatePermission",
			Handler:    _IAMPermissionService_UpdatePermission_Handler,
		},
		{
			MethodName: "CreatePermission",
			Handler:    _IAMPermissionService_CreatePermission_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _IAMPermissionService_GetPermission_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _IAMPermissionService_DeletePermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/iam-service/v1/services/iam.permission.service.v1.proto",
}
