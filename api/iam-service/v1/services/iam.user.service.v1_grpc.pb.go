// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.1
// - protoc             v5.26.1
// source: api/iam-service/v1/services/iam.user.service.v1.proto

package iamservicev1

import (
	context "context"
	fmt "fmt"

	client "gitlab.lainuoniao.cn/eden-quan/go-biz-kit/client"
	def "gitlab.lainuoniao.cn/eden-quan/go-biz-kit/config/def"
	resources "gitlab.lainuoniao.cn/eden-quan/proto-service/api/iam-service/v1/resources"
	fx "go.uber.org/fx"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7
const _ = fx.Version

var _ = new(fmt.Stringer)
var _ = new(def.Server)
var _ = new(client.RegisterGRPCClientFactoryType)

const (
	IAMUserService_UserLogin_FullMethodName               = "/api.iam.service.iamservicev1.IAMUserService/UserLogin"
	IAMUserService_UserLogout_FullMethodName              = "/api.iam.service.iamservicev1.IAMUserService/UserLogout"
	IAMUserService_UserRegister_FullMethodName            = "/api.iam.service.iamservicev1.IAMUserService/UserRegister"
	IAMUserService_CheckToken_FullMethodName              = "/api.iam.service.iamservicev1.IAMUserService/CheckToken"
	IAMUserService_CheckUser_FullMethodName               = "/api.iam.service.iamservicev1.IAMUserService/CheckUser"
	IAMUserService_RefreshToken_FullMethodName            = "/api.iam.service.iamservicev1.IAMUserService/RefreshToken"
	IAMUserService_UpdateCompanyIdAndLabel_FullMethodName = "/api.iam.service.iamservicev1.IAMUserService/UpdateCompanyIdAndLabel"
	IAMUserService_DeleteUser_FullMethodName              = "/api.iam.service.iamservicev1.IAMUserService/DeleteUser"
	IAMUserService_CheckLastLogin_FullMethodName          = "/api.iam.service.iamservicev1.IAMUserService/CheckLastLogin"
)

// IAMUserServiceClient is the client API for IAMUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMUserServiceClient interface {
	UserLogin(ctx context.Context, in *resources.UserUserLoginRequest, opts ...grpc.CallOption) (*resources.UserUser, error)
	UserLogout(ctx context.Context, in *resources.UserUserLogoutRequest, opts ...grpc.CallOption) (*resources.UserUserLogoutReply, error)
	UserRegister(ctx context.Context, in *resources.UserUserRegisterRequest, opts ...grpc.CallOption) (*resources.UserUser, error)
	CheckToken(ctx context.Context, in *resources.UserCheckTokenRequest, opts ...grpc.CallOption) (*resources.UserCheckTokenResponse, error)
	CheckUser(ctx context.Context, in *resources.UserCheckUserRequest, opts ...grpc.CallOption) (*resources.UserCheckUserResponse, error)
	RefreshToken(ctx context.Context, in *resources.UserRefreshTokenRequest, opts ...grpc.CallOption) (*resources.UserRefreshTokenResponse, error)
	UpdateCompanyIdAndLabel(ctx context.Context, in *resources.UserUpdateCompanyIdAndLabelRequest, opts ...grpc.CallOption) (*resources.UserUpdateCompanyIdAndLabelResponse, error)
	DeleteUser(ctx context.Context, in *resources.UserDeleteUserRequest, opts ...grpc.CallOption) (*resources.UserDeleteUserResponse, error)
	CheckLastLogin(ctx context.Context, in *resources.UserCheckLastLoginRequest, opts ...grpc.CallOption) (*resources.UserCheckLastLoginResponse, error)
	RegisterNameForDiscover() string
}

type iAMUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func (c *iAMUserServiceClient) RegisterNameForDiscover() string {
	return "/iam-service/v1"
}

func newIAMUserServiceClient(cc grpc.ClientConnInterface) IAMUserServiceClient {
	return &iAMUserServiceClient{cc}
}

func registerIAMUserServiceClientGRPCNameProvider() []string {
	return []string{"/iam-service/v1", "grpc"}
}

// RegisterIAMUserServiceClientGRPCProvider is the provider for injection framework
// creator is the factory function which use to create the IAMUserServiceClient instance/implement
// the creator function receive dependency provided by fx to create ClientInterface,
// and returns the new dependency can use by others functions
func RegisterIAMUserServiceClientGRPCProvider(creator interface{}) []interface{} {
	return []interface{}{
		fx.Annotate(
			newIAMUserServiceClient,
			fx.As(new(IAMUserServiceClient)),
			fx.ParamTags(`name:"/iam-service/v1/grpc/iAMUserService"`),
		),
		fx.Annotate(
			creator,
			fx.As(new(grpc.ClientConnInterface)),
			fx.ParamTags(`name:"/iam-service/v1/grpc/name/iAMUserService"`),
			fx.ResultTags(`name:"/iam-service/v1/grpc/iAMUserService"`),
		),
		fx.Annotate(
			registerIAMUserServiceClientGRPCNameProvider,
			fx.ResultTags(`name:"/iam-service/v1/grpc/name/iAMUserService"`),
		),
	}
}

type IAMUserServiceClientGRPCFactory interface {
	New(conf *def.Server) (IAMUserServiceClient, error)
}

type iAMUserServiceClientGRPCFactoryImpl struct {
	factory client.RegisterGRPCClientFactoryType
}

func (p *iAMUserServiceClientGRPCFactoryImpl) New(conf *def.Server) (IAMUserServiceClient, error) {
	cc, err := p.factory(conf)
	if err != nil {
		return nil, fmt.Errorf("create IAMUserServiceClient failed cause %s", err)
	}
	return &iAMUserServiceClient{cc: cc}, nil
}

func RegisterIAMUserServiceClientGRPCFactoryProvider(factory client.RegisterGRPCClientFactoryType) IAMUserServiceClientGRPCFactory {
	return &iAMUserServiceClientGRPCFactoryImpl{factory: factory}
}

func (c *iAMUserServiceClient) UserLogin(ctx context.Context, in *resources.UserUserLoginRequest, opts ...grpc.CallOption) (*resources.UserUser, error) {
	out := new(resources.UserUser)
	err := c.cc.Invoke(ctx, IAMUserService_UserLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMUserServiceClient) UserLogout(ctx context.Context, in *resources.UserUserLogoutRequest, opts ...grpc.CallOption) (*resources.UserUserLogoutReply, error) {
	out := new(resources.UserUserLogoutReply)
	err := c.cc.Invoke(ctx, IAMUserService_UserLogout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMUserServiceClient) UserRegister(ctx context.Context, in *resources.UserUserRegisterRequest, opts ...grpc.CallOption) (*resources.UserUser, error) {
	out := new(resources.UserUser)
	err := c.cc.Invoke(ctx, IAMUserService_UserRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMUserServiceClient) CheckToken(ctx context.Context, in *resources.UserCheckTokenRequest, opts ...grpc.CallOption) (*resources.UserCheckTokenResponse, error) {
	out := new(resources.UserCheckTokenResponse)
	err := c.cc.Invoke(ctx, IAMUserService_CheckToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMUserServiceClient) CheckUser(ctx context.Context, in *resources.UserCheckUserRequest, opts ...grpc.CallOption) (*resources.UserCheckUserResponse, error) {
	out := new(resources.UserCheckUserResponse)
	err := c.cc.Invoke(ctx, IAMUserService_CheckUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMUserServiceClient) RefreshToken(ctx context.Context, in *resources.UserRefreshTokenRequest, opts ...grpc.CallOption) (*resources.UserRefreshTokenResponse, error) {
	out := new(resources.UserRefreshTokenResponse)
	err := c.cc.Invoke(ctx, IAMUserService_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMUserServiceClient) UpdateCompanyIdAndLabel(ctx context.Context, in *resources.UserUpdateCompanyIdAndLabelRequest, opts ...grpc.CallOption) (*resources.UserUpdateCompanyIdAndLabelResponse, error) {
	out := new(resources.UserUpdateCompanyIdAndLabelResponse)
	err := c.cc.Invoke(ctx, IAMUserService_UpdateCompanyIdAndLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMUserServiceClient) DeleteUser(ctx context.Context, in *resources.UserDeleteUserRequest, opts ...grpc.CallOption) (*resources.UserDeleteUserResponse, error) {
	out := new(resources.UserDeleteUserResponse)
	err := c.cc.Invoke(ctx, IAMUserService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMUserServiceClient) CheckLastLogin(ctx context.Context, in *resources.UserCheckLastLoginRequest, opts ...grpc.CallOption) (*resources.UserCheckLastLoginResponse, error) {
	out := new(resources.UserCheckLastLoginResponse)
	err := c.cc.Invoke(ctx, IAMUserService_CheckLastLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMUserServiceServer is the server API for IAMUserService service.
// All implementations must embed UnimplementedIAMUserServiceServer
// for forward compatibility
type IAMUserServiceServer interface {
	UserLogin(context.Context, *resources.UserUserLoginRequest) (*resources.UserUser, error)
	UserLogout(context.Context, *resources.UserUserLogoutRequest) (*resources.UserUserLogoutReply, error)
	UserRegister(context.Context, *resources.UserUserRegisterRequest) (*resources.UserUser, error)
	CheckToken(context.Context, *resources.UserCheckTokenRequest) (*resources.UserCheckTokenResponse, error)
	CheckUser(context.Context, *resources.UserCheckUserRequest) (*resources.UserCheckUserResponse, error)
	RefreshToken(context.Context, *resources.UserRefreshTokenRequest) (*resources.UserRefreshTokenResponse, error)
	UpdateCompanyIdAndLabel(context.Context, *resources.UserUpdateCompanyIdAndLabelRequest) (*resources.UserUpdateCompanyIdAndLabelResponse, error)
	DeleteUser(context.Context, *resources.UserDeleteUserRequest) (*resources.UserDeleteUserResponse, error)
	CheckLastLogin(context.Context, *resources.UserCheckLastLoginRequest) (*resources.UserCheckLastLoginResponse, error)
	mustEmbedUnimplementedIAMUserServiceServer()
}

// Generate Injection
type registerIAMUserServiceServerGRPCResult struct{}

func (*registerIAMUserServiceServerGRPCResult) String() string {
	return "IAMUserServiceServerGRPCServer"
}

func RegisterIAMUserServiceServerGRPCProvider(newer interface{}) []interface{} {
	return []interface{}{
		// For provide dependency
		fx.Annotate(
			newer,
			fx.As(new(IAMUserServiceServer)),
		),
		// For create instance
		fx.Annotate(
			registerIAMUserServiceServerProviderImpl,
			fx.As(new(fmt.Stringer)),
			fx.ResultTags(`group:"grpc_register"`),
		),
	}
}

// registerIAMUserServiceServerProviderImpl use to trigger register
func registerIAMUserServiceServerProviderImpl(s grpc.ServiceRegistrar, srv IAMUserServiceServer) *registerIAMUserServiceServerGRPCResult {
	registerIAMUserServiceServer(s, srv)
	return &registerIAMUserServiceServerGRPCResult{}
}

// UnimplementedIAMUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMUserServiceServer struct {
}

func (UnimplementedIAMUserServiceServer) UserLogin(context.Context, *resources.UserUserLoginRequest) (*resources.UserUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedIAMUserServiceServer) UserLogout(context.Context, *resources.UserUserLogoutRequest) (*resources.UserUserLogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogout not implemented")
}
func (UnimplementedIAMUserServiceServer) UserRegister(context.Context, *resources.UserUserRegisterRequest) (*resources.UserUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedIAMUserServiceServer) CheckToken(context.Context, *resources.UserCheckTokenRequest) (*resources.UserCheckTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (UnimplementedIAMUserServiceServer) CheckUser(context.Context, *resources.UserCheckUserRequest) (*resources.UserCheckUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUser not implemented")
}
func (UnimplementedIAMUserServiceServer) RefreshToken(context.Context, *resources.UserRefreshTokenRequest) (*resources.UserRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedIAMUserServiceServer) UpdateCompanyIdAndLabel(context.Context, *resources.UserUpdateCompanyIdAndLabelRequest) (*resources.UserUpdateCompanyIdAndLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanyIdAndLabel not implemented")
}
func (UnimplementedIAMUserServiceServer) DeleteUser(context.Context, *resources.UserDeleteUserRequest) (*resources.UserDeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedIAMUserServiceServer) CheckLastLogin(context.Context, *resources.UserCheckLastLoginRequest) (*resources.UserCheckLastLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLastLogin not implemented")
}
func (UnimplementedIAMUserServiceServer) mustEmbedUnimplementedIAMUserServiceServer() {}

// UnsafeIAMUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMUserServiceServer will
// result in compilation errors.
type UnsafeIAMUserServiceServer interface {
	mustEmbedUnimplementedIAMUserServiceServer()
}

func registerIAMUserServiceServer(s grpc.ServiceRegistrar, srv IAMUserServiceServer) {
	s.RegisterService(&IAMUserService_ServiceDesc, srv)
}

func _IAMUserService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UserUserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMUserServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMUserService_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMUserServiceServer).UserLogin(ctx, req.(*resources.UserUserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMUserService_UserLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UserUserLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMUserServiceServer).UserLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMUserService_UserLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMUserServiceServer).UserLogout(ctx, req.(*resources.UserUserLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMUserService_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UserUserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMUserServiceServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMUserService_UserRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMUserServiceServer).UserRegister(ctx, req.(*resources.UserUserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMUserService_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UserCheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMUserServiceServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMUserService_CheckToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMUserServiceServer).CheckToken(ctx, req.(*resources.UserCheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMUserService_CheckUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UserCheckUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMUserServiceServer).CheckUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMUserService_CheckUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMUserServiceServer).CheckUser(ctx, req.(*resources.UserCheckUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMUserService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UserRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMUserServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMUserService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMUserServiceServer).RefreshToken(ctx, req.(*resources.UserRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMUserService_UpdateCompanyIdAndLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UserUpdateCompanyIdAndLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMUserServiceServer).UpdateCompanyIdAndLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMUserService_UpdateCompanyIdAndLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMUserServiceServer).UpdateCompanyIdAndLabel(ctx, req.(*resources.UserUpdateCompanyIdAndLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMUserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UserDeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMUserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMUserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMUserServiceServer).DeleteUser(ctx, req.(*resources.UserDeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMUserService_CheckLastLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UserCheckLastLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMUserServiceServer).CheckLastLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMUserService_CheckLastLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMUserServiceServer).CheckLastLogin(ctx, req.(*resources.UserCheckLastLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMUserService_ServiceDesc is the grpc.ServiceDesc for IAMUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.iam.service.iamservicev1.IAMUserService",
	HandlerType: (*IAMUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _IAMUserService_UserLogin_Handler,
		},
		{
			MethodName: "UserLogout",
			Handler:    _IAMUserService_UserLogout_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _IAMUserService_UserRegister_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _IAMUserService_CheckToken_Handler,
		},
		{
			MethodName: "CheckUser",
			Handler:    _IAMUserService_CheckUser_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _IAMUserService_RefreshToken_Handler,
		},
		{
			MethodName: "UpdateCompanyIdAndLabel",
			Handler:    _IAMUserService_UpdateCompanyIdAndLabel_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _IAMUserService_DeleteUser_Handler,
		},
		{
			MethodName: "CheckLastLogin",
			Handler:    _IAMUserService_CheckLastLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/iam-service/v1/services/iam.user.service.v1.proto",
}
