// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.1
// - protoc             v5.26.1
// source: api/iam-service/v1/services/iam.iam.service.v1.proto

package iamservicev1

import (
	context "context"
	fmt "fmt"

	client "gitlab.lainuoniao.cn/eden-quan/go-biz-kit/client"
	def "gitlab.lainuoniao.cn/eden-quan/go-biz-kit/config/def"
	resources "gitlab.lainuoniao.cn/eden-quan/proto-service/api/iam-service/v1/resources"
	fx "go.uber.org/fx"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7
const _ = fx.Version

var _ = new(fmt.Stringer)
var _ = new(def.Server)
var _ = new(client.RegisterGRPCClientFactoryType)

const (
	IAMService_CreateRole_FullMethodName               = "/api.iam.service.iamservicev1.IAMService/CreateRole"
	IAMService_GetRole_FullMethodName                  = "/api.iam.service.iamservicev1.IAMService/GetRole"
	IAMService_DeleteRole_FullMethodName               = "/api.iam.service.iamservicev1.IAMService/DeleteRole"
	IAMService_UpdateRole_FullMethodName               = "/api.iam.service.iamservicev1.IAMService/UpdateRole"
	IAMService_ListRoles_FullMethodName                = "/api.iam.service.iamservicev1.IAMService/ListRoles"
	IAMService_CreateServiceAccount_FullMethodName     = "/api.iam.service.iamservicev1.IAMService/CreateServiceAccount"
	IAMService_GetServiceAccount_FullMethodName        = "/api.iam.service.iamservicev1.IAMService/GetServiceAccount"
	IAMService_DeleteServiceAccount_FullMethodName     = "/api.iam.service.iamservicev1.IAMService/DeleteServiceAccount"
	IAMService_ListServiceAccounts_FullMethodName      = "/api.iam.service.iamservicev1.IAMService/ListServiceAccounts"
	IAMService_EnableServiceAccount_FullMethodName     = "/api.iam.service.iamservicev1.IAMService/EnableServiceAccount"
	IAMService_DisableServiceAccount_FullMethodName    = "/api.iam.service.iamservicev1.IAMService/DisableServiceAccount"
	IAMService_CreatePolicy_FullMethodName             = "/api.iam.service.iamservicev1.IAMService/CreatePolicy"
	IAMService_GetPolicy_FullMethodName                = "/api.iam.service.iamservicev1.IAMService/GetPolicy"
	IAMService_DeletePolicy_FullMethodName             = "/api.iam.service.iamservicev1.IAMService/DeletePolicy"
	IAMService_UpdatePolicy_FullMethodName             = "/api.iam.service.iamservicev1.IAMService/UpdatePolicy"
	IAMService_ListPolicies_FullMethodName             = "/api.iam.service.iamservicev1.IAMService/ListPolicies"
	IAMService_BindingPolicy_FullMethodName            = "/api.iam.service.iamservicev1.IAMService/BindingPolicy"
	IAMService_UnBindingPolicy_FullMethodName          = "/api.iam.service.iamservicev1.IAMService/UnBindingPolicy"
	IAMService_GetIamPolicy_FullMethodName             = "/api.iam.service.iamservicev1.IAMService/GetIamPolicy"
	IAMService_SetIamPolicy_FullMethodName             = "/api.iam.service.iamservicev1.IAMService/SetIamPolicy"
	IAMService_TestIamPermissions_FullMethodName       = "/api.iam.service.iamservicev1.IAMService/TestIamPermissions"
	IAMService_CreateUser_FullMethodName               = "/api.iam.service.iamservicev1.IAMService/CreateUser"
	IAMService_GetUser_FullMethodName                  = "/api.iam.service.iamservicev1.IAMService/GetUser"
	IAMService_DeleteUser_FullMethodName               = "/api.iam.service.iamservicev1.IAMService/DeleteUser"
	IAMService_ListUsers_FullMethodName                = "/api.iam.service.iamservicev1.IAMService/ListUsers"
	IAMService_CreateGroup_FullMethodName              = "/api.iam.service.iamservicev1.IAMService/CreateGroup"
	IAMService_GetGroup_FullMethodName                 = "/api.iam.service.iamservicev1.IAMService/GetGroup"
	IAMService_DeleteGroup_FullMethodName              = "/api.iam.service.iamservicev1.IAMService/DeleteGroup"
	IAMService_ListGroups_FullMethodName               = "/api.iam.service.iamservicev1.IAMService/ListGroups"
	IAMService_AddMemberToGroup_FullMethodName         = "/api.iam.service.iamservicev1.IAMService/AddMemberToGroup"
	IAMService_RemoveMemberFromGroup_FullMethodName    = "/api.iam.service.iamservicev1.IAMService/RemoveMemberFromGroup"
	IAMService_ListServiceAccountKeys_FullMethodName   = "/api.iam.service.iamservicev1.IAMService/ListServiceAccountKeys"
	IAMService_CreateServiceAccountKey_FullMethodName  = "/api.iam.service.iamservicev1.IAMService/CreateServiceAccountKey"
	IAMService_DeleteServiceAccountKey_FullMethodName  = "/api.iam.service.iamservicev1.IAMService/DeleteServiceAccountKey"
	IAMService_DisableServiceAccountKey_FullMethodName = "/api.iam.service.iamservicev1.IAMService/DisableServiceAccountKey"
	IAMService_EnableServiceAccountKey_FullMethodName  = "/api.iam.service.iamservicev1.IAMService/EnableServiceAccountKey"
	IAMService_GetServiceAccountKey_FullMethodName     = "/api.iam.service.iamservicev1.IAMService/GetServiceAccountKey"
	IAMService_GetResource_FullMethodName              = "/api.iam.service.iamservicev1.IAMService/GetResource"
	IAMService_CreateResource_FullMethodName           = "/api.iam.service.iamservicev1.IAMService/CreateResource"
	IAMService_ListResources_FullMethodName            = "/api.iam.service.iamservicev1.IAMService/ListResources"
)

// IAMServiceClient is the client API for IAMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMServiceClient interface {
	// create a new custom role
	CreateRole(ctx context.Context, in *resources.CreateRoleRequest, opts ...grpc.CallOption) (*resources.Role, error)
	GetRole(ctx context.Context, in *resources.GetRoleRequest, opts ...grpc.CallOption) (*resources.Role, error)
	DeleteRole(ctx context.Context, in *resources.DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateRole(ctx context.Context, in *resources.UpdateRoleRequest, opts ...grpc.CallOption) (*resources.Role, error)
	ListRoles(ctx context.Context, in *resources.ListRolesRequest, opts ...grpc.CallOption) (*resources.ListRolesResponse, error)
	// service account
	CreateServiceAccount(ctx context.Context, in *resources.CreateServiceAccountRequest, opts ...grpc.CallOption) (*resources.ServiceAccount, error)
	GetServiceAccount(ctx context.Context, in *resources.GetServiceAccountRequest, opts ...grpc.CallOption) (*resources.ServiceAccount, error)
	DeleteServiceAccount(ctx context.Context, in *resources.DeleteServiceAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListServiceAccounts(ctx context.Context, in *resources.ListServiceAccountsRequest, opts ...grpc.CallOption) (*resources.ListServiceAccountsResponse, error)
	EnableServiceAccount(ctx context.Context, in *resources.EnableServiceAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DisableServiceAccount(ctx context.Context, in *resources.DisableServiceAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// policy
	CreatePolicy(ctx context.Context, in *resources.CreatePolicyRequest, opts ...grpc.CallOption) (*resources.CreatePolicyResponse, error)
	GetPolicy(ctx context.Context, in *resources.GetPolicyRequest, opts ...grpc.CallOption) (*resources.GetPolicyResponse, error)
	DeletePolicy(ctx context.Context, in *resources.DeletePolicyRequest, opts ...grpc.CallOption) (*resources.DeletePolicyResponse, error)
	UpdatePolicy(ctx context.Context, in *resources.UpdatePolicyRequest, opts ...grpc.CallOption) (*resources.UpdatePolicyResponse, error)
	ListPolicies(ctx context.Context, in *resources.ListPoliciesRequest, opts ...grpc.CallOption) (*resources.ListPoliciesResponse, error)
	BindingPolicy(ctx context.Context, in *resources.BindingPolicyRequest, opts ...grpc.CallOption) (*resources.BindingPolicyResponse, error)
	UnBindingPolicy(ctx context.Context, in *resources.UnBindingPolicyRequest, opts ...grpc.CallOption) (*resources.UnBindingPolicyResponse, error)
	GetIamPolicy(ctx context.Context, in *resources.GetIamPolicyRequest, opts ...grpc.CallOption) (*resources.Policy, error)
	SetIamPolicy(ctx context.Context, in *resources.SetIamPolicyRequest, opts ...grpc.CallOption) (*resources.Policy, error)
	TestIamPermissions(ctx context.Context, in *resources.TestIamPermissionsRequest, opts ...grpc.CallOption) (*resources.TestIamPermissionsResponse, error)
	// member
	CreateUser(ctx context.Context, in *resources.CreateUserRequest, opts ...grpc.CallOption) (*resources.User, error)
	GetUser(ctx context.Context, in *resources.GetUserRequest, opts ...grpc.CallOption) (*resources.User, error)
	DeleteUser(ctx context.Context, in *resources.DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListUsers(ctx context.Context, in *resources.ListUsersRequest, opts ...grpc.CallOption) (*resources.ListUsersResponse, error)
	CreateGroup(ctx context.Context, in *resources.CreateGroupRequest, opts ...grpc.CallOption) (*resources.Group, error)
	GetGroup(ctx context.Context, in *resources.GetGroupRequest, opts ...grpc.CallOption) (*resources.Group, error)
	DeleteGroup(ctx context.Context, in *resources.DeleteGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListGroups(ctx context.Context, in *resources.ListGroupsRequest, opts ...grpc.CallOption) (*resources.ListGroupsResponse, error)
	AddMemberToGroup(ctx context.Context, in *resources.AddMemberToGroupRequest, opts ...grpc.CallOption) (*resources.AddMemberToGroupResponse, error)
	RemoveMemberFromGroup(ctx context.Context, in *resources.RemoveMemberFromGroupRequest, opts ...grpc.CallOption) (*resources.RemoveMemberFromGroupResponse, error)
	ListServiceAccountKeys(ctx context.Context, in *resources.ListServiceAccountKeysRequest, opts ...grpc.CallOption) (*resources.ListServiceAccountKeysResponse, error)
	CreateServiceAccountKey(ctx context.Context, in *resources.CreateServiceAccountKeyRequest, opts ...grpc.CallOption) (*resources.ServiceAccountKey, error)
	DeleteServiceAccountKey(ctx context.Context, in *resources.DeleteServiceAccountKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DisableServiceAccountKey(ctx context.Context, in *resources.DisableServiceAccountKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EnableServiceAccountKey(ctx context.Context, in *resources.EnableServiceAccountKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetServiceAccountKey(ctx context.Context, in *resources.GetServiceAccountKeyRequest, opts ...grpc.CallOption) (*resources.ServiceAccountKey, error)
	// 获取资源
	GetResource(ctx context.Context, in *resources.GetResourceRequest, opts ...grpc.CallOption) (*resources.Resource, error)
	// 创建资源
	CreateResource(ctx context.Context, in *resources.CreateResourceRequest, opts ...grpc.CallOption) (*resources.Resource, error)
	// 资源列表
	ListResources(ctx context.Context, in *resources.ListResourcesRequest, opts ...grpc.CallOption) (*resources.ListResourcesResponse, error)
	RegisterNameForDiscover() string
}

type iAMServiceClient struct {
	cc grpc.ClientConnInterface
}

func (c *iAMServiceClient) RegisterNameForDiscover() string {
	return "/iam-service/v1"
}

func newIAMServiceClient(cc grpc.ClientConnInterface) IAMServiceClient {
	return &iAMServiceClient{cc}
}

func registerIAMServiceClientGRPCNameProvider() []string {
	return []string{"/iam-service/v1", "grpc"}
}

// RegisterIAMServiceClientGRPCProvider is the provider for injection framework
// creator is the factory function which use to create the IAMServiceClient instance/implement
// the creator function receive dependency provided by fx to create ClientInterface,
// and returns the new dependency can use by others functions
func RegisterIAMServiceClientGRPCProvider(creator interface{}) []interface{} {
	return []interface{}{
		fx.Annotate(
			newIAMServiceClient,
			fx.As(new(IAMServiceClient)),
			fx.ParamTags(`name:"/iam-service/v1/grpc/iAMService"`),
		),
		fx.Annotate(
			creator,
			fx.As(new(grpc.ClientConnInterface)),
			fx.ParamTags(`name:"/iam-service/v1/grpc/name/iAMService"`),
			fx.ResultTags(`name:"/iam-service/v1/grpc/iAMService"`),
		),
		fx.Annotate(
			registerIAMServiceClientGRPCNameProvider,
			fx.ResultTags(`name:"/iam-service/v1/grpc/name/iAMService"`),
		),
	}
}

type IAMServiceClientGRPCFactory interface {
	New(conf *def.Server) (IAMServiceClient, error)
}

type iAMServiceClientGRPCFactoryImpl struct {
	factory client.RegisterGRPCClientFactoryType
}

func (p *iAMServiceClientGRPCFactoryImpl) New(conf *def.Server) (IAMServiceClient, error) {
	cc, err := p.factory(conf)
	if err != nil {
		return nil, fmt.Errorf("create IAMServiceClient failed cause %s", err)
	}
	return &iAMServiceClient{cc: cc}, nil
}

func RegisterIAMServiceClientGRPCFactoryProvider(factory client.RegisterGRPCClientFactoryType) IAMServiceClientGRPCFactory {
	return &iAMServiceClientGRPCFactoryImpl{factory: factory}
}

func (c *iAMServiceClient) CreateRole(ctx context.Context, in *resources.CreateRoleRequest, opts ...grpc.CallOption) (*resources.Role, error) {
	out := new(resources.Role)
	err := c.cc.Invoke(ctx, IAMService_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetRole(ctx context.Context, in *resources.GetRoleRequest, opts ...grpc.CallOption) (*resources.Role, error) {
	out := new(resources.Role)
	err := c.cc.Invoke(ctx, IAMService_GetRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) DeleteRole(ctx context.Context, in *resources.DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IAMService_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) UpdateRole(ctx context.Context, in *resources.UpdateRoleRequest, opts ...grpc.CallOption) (*resources.Role, error) {
	out := new(resources.Role)
	err := c.cc.Invoke(ctx, IAMService_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ListRoles(ctx context.Context, in *resources.ListRolesRequest, opts ...grpc.CallOption) (*resources.ListRolesResponse, error) {
	out := new(resources.ListRolesResponse)
	err := c.cc.Invoke(ctx, IAMService_ListRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) CreateServiceAccount(ctx context.Context, in *resources.CreateServiceAccountRequest, opts ...grpc.CallOption) (*resources.ServiceAccount, error) {
	out := new(resources.ServiceAccount)
	err := c.cc.Invoke(ctx, IAMService_CreateServiceAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetServiceAccount(ctx context.Context, in *resources.GetServiceAccountRequest, opts ...grpc.CallOption) (*resources.ServiceAccount, error) {
	out := new(resources.ServiceAccount)
	err := c.cc.Invoke(ctx, IAMService_GetServiceAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) DeleteServiceAccount(ctx context.Context, in *resources.DeleteServiceAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IAMService_DeleteServiceAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ListServiceAccounts(ctx context.Context, in *resources.ListServiceAccountsRequest, opts ...grpc.CallOption) (*resources.ListServiceAccountsResponse, error) {
	out := new(resources.ListServiceAccountsResponse)
	err := c.cc.Invoke(ctx, IAMService_ListServiceAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) EnableServiceAccount(ctx context.Context, in *resources.EnableServiceAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IAMService_EnableServiceAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) DisableServiceAccount(ctx context.Context, in *resources.DisableServiceAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IAMService_DisableServiceAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) CreatePolicy(ctx context.Context, in *resources.CreatePolicyRequest, opts ...grpc.CallOption) (*resources.CreatePolicyResponse, error) {
	out := new(resources.CreatePolicyResponse)
	err := c.cc.Invoke(ctx, IAMService_CreatePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetPolicy(ctx context.Context, in *resources.GetPolicyRequest, opts ...grpc.CallOption) (*resources.GetPolicyResponse, error) {
	out := new(resources.GetPolicyResponse)
	err := c.cc.Invoke(ctx, IAMService_GetPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) DeletePolicy(ctx context.Context, in *resources.DeletePolicyRequest, opts ...grpc.CallOption) (*resources.DeletePolicyResponse, error) {
	out := new(resources.DeletePolicyResponse)
	err := c.cc.Invoke(ctx, IAMService_DeletePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) UpdatePolicy(ctx context.Context, in *resources.UpdatePolicyRequest, opts ...grpc.CallOption) (*resources.UpdatePolicyResponse, error) {
	out := new(resources.UpdatePolicyResponse)
	err := c.cc.Invoke(ctx, IAMService_UpdatePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ListPolicies(ctx context.Context, in *resources.ListPoliciesRequest, opts ...grpc.CallOption) (*resources.ListPoliciesResponse, error) {
	out := new(resources.ListPoliciesResponse)
	err := c.cc.Invoke(ctx, IAMService_ListPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) BindingPolicy(ctx context.Context, in *resources.BindingPolicyRequest, opts ...grpc.CallOption) (*resources.BindingPolicyResponse, error) {
	out := new(resources.BindingPolicyResponse)
	err := c.cc.Invoke(ctx, IAMService_BindingPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) UnBindingPolicy(ctx context.Context, in *resources.UnBindingPolicyRequest, opts ...grpc.CallOption) (*resources.UnBindingPolicyResponse, error) {
	out := new(resources.UnBindingPolicyResponse)
	err := c.cc.Invoke(ctx, IAMService_UnBindingPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetIamPolicy(ctx context.Context, in *resources.GetIamPolicyRequest, opts ...grpc.CallOption) (*resources.Policy, error) {
	out := new(resources.Policy)
	err := c.cc.Invoke(ctx, IAMService_GetIamPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) SetIamPolicy(ctx context.Context, in *resources.SetIamPolicyRequest, opts ...grpc.CallOption) (*resources.Policy, error) {
	out := new(resources.Policy)
	err := c.cc.Invoke(ctx, IAMService_SetIamPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) TestIamPermissions(ctx context.Context, in *resources.TestIamPermissionsRequest, opts ...grpc.CallOption) (*resources.TestIamPermissionsResponse, error) {
	out := new(resources.TestIamPermissionsResponse)
	err := c.cc.Invoke(ctx, IAMService_TestIamPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) CreateUser(ctx context.Context, in *resources.CreateUserRequest, opts ...grpc.CallOption) (*resources.User, error) {
	out := new(resources.User)
	err := c.cc.Invoke(ctx, IAMService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetUser(ctx context.Context, in *resources.GetUserRequest, opts ...grpc.CallOption) (*resources.User, error) {
	out := new(resources.User)
	err := c.cc.Invoke(ctx, IAMService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) DeleteUser(ctx context.Context, in *resources.DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IAMService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ListUsers(ctx context.Context, in *resources.ListUsersRequest, opts ...grpc.CallOption) (*resources.ListUsersResponse, error) {
	out := new(resources.ListUsersResponse)
	err := c.cc.Invoke(ctx, IAMService_ListUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) CreateGroup(ctx context.Context, in *resources.CreateGroupRequest, opts ...grpc.CallOption) (*resources.Group, error) {
	out := new(resources.Group)
	err := c.cc.Invoke(ctx, IAMService_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetGroup(ctx context.Context, in *resources.GetGroupRequest, opts ...grpc.CallOption) (*resources.Group, error) {
	out := new(resources.Group)
	err := c.cc.Invoke(ctx, IAMService_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) DeleteGroup(ctx context.Context, in *resources.DeleteGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IAMService_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ListGroups(ctx context.Context, in *resources.ListGroupsRequest, opts ...grpc.CallOption) (*resources.ListGroupsResponse, error) {
	out := new(resources.ListGroupsResponse)
	err := c.cc.Invoke(ctx, IAMService_ListGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) AddMemberToGroup(ctx context.Context, in *resources.AddMemberToGroupRequest, opts ...grpc.CallOption) (*resources.AddMemberToGroupResponse, error) {
	out := new(resources.AddMemberToGroupResponse)
	err := c.cc.Invoke(ctx, IAMService_AddMemberToGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) RemoveMemberFromGroup(ctx context.Context, in *resources.RemoveMemberFromGroupRequest, opts ...grpc.CallOption) (*resources.RemoveMemberFromGroupResponse, error) {
	out := new(resources.RemoveMemberFromGroupResponse)
	err := c.cc.Invoke(ctx, IAMService_RemoveMemberFromGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ListServiceAccountKeys(ctx context.Context, in *resources.ListServiceAccountKeysRequest, opts ...grpc.CallOption) (*resources.ListServiceAccountKeysResponse, error) {
	out := new(resources.ListServiceAccountKeysResponse)
	err := c.cc.Invoke(ctx, IAMService_ListServiceAccountKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) CreateServiceAccountKey(ctx context.Context, in *resources.CreateServiceAccountKeyRequest, opts ...grpc.CallOption) (*resources.ServiceAccountKey, error) {
	out := new(resources.ServiceAccountKey)
	err := c.cc.Invoke(ctx, IAMService_CreateServiceAccountKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) DeleteServiceAccountKey(ctx context.Context, in *resources.DeleteServiceAccountKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IAMService_DeleteServiceAccountKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) DisableServiceAccountKey(ctx context.Context, in *resources.DisableServiceAccountKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IAMService_DisableServiceAccountKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) EnableServiceAccountKey(ctx context.Context, in *resources.EnableServiceAccountKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IAMService_EnableServiceAccountKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetServiceAccountKey(ctx context.Context, in *resources.GetServiceAccountKeyRequest, opts ...grpc.CallOption) (*resources.ServiceAccountKey, error) {
	out := new(resources.ServiceAccountKey)
	err := c.cc.Invoke(ctx, IAMService_GetServiceAccountKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetResource(ctx context.Context, in *resources.GetResourceRequest, opts ...grpc.CallOption) (*resources.Resource, error) {
	out := new(resources.Resource)
	err := c.cc.Invoke(ctx, IAMService_GetResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) CreateResource(ctx context.Context, in *resources.CreateResourceRequest, opts ...grpc.CallOption) (*resources.Resource, error) {
	out := new(resources.Resource)
	err := c.cc.Invoke(ctx, IAMService_CreateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ListResources(ctx context.Context, in *resources.ListResourcesRequest, opts ...grpc.CallOption) (*resources.ListResourcesResponse, error) {
	out := new(resources.ListResourcesResponse)
	err := c.cc.Invoke(ctx, IAMService_ListResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMServiceServer is the server API for IAMService service.
// All implementations must embed UnimplementedIAMServiceServer
// for forward compatibility
type IAMServiceServer interface {
	// create a new custom role
	CreateRole(context.Context, *resources.CreateRoleRequest) (*resources.Role, error)
	GetRole(context.Context, *resources.GetRoleRequest) (*resources.Role, error)
	DeleteRole(context.Context, *resources.DeleteRoleRequest) (*emptypb.Empty, error)
	UpdateRole(context.Context, *resources.UpdateRoleRequest) (*resources.Role, error)
	ListRoles(context.Context, *resources.ListRolesRequest) (*resources.ListRolesResponse, error)
	// service account
	CreateServiceAccount(context.Context, *resources.CreateServiceAccountRequest) (*resources.ServiceAccount, error)
	GetServiceAccount(context.Context, *resources.GetServiceAccountRequest) (*resources.ServiceAccount, error)
	DeleteServiceAccount(context.Context, *resources.DeleteServiceAccountRequest) (*emptypb.Empty, error)
	ListServiceAccounts(context.Context, *resources.ListServiceAccountsRequest) (*resources.ListServiceAccountsResponse, error)
	EnableServiceAccount(context.Context, *resources.EnableServiceAccountRequest) (*emptypb.Empty, error)
	DisableServiceAccount(context.Context, *resources.DisableServiceAccountRequest) (*emptypb.Empty, error)
	// policy
	CreatePolicy(context.Context, *resources.CreatePolicyRequest) (*resources.CreatePolicyResponse, error)
	GetPolicy(context.Context, *resources.GetPolicyRequest) (*resources.GetPolicyResponse, error)
	DeletePolicy(context.Context, *resources.DeletePolicyRequest) (*resources.DeletePolicyResponse, error)
	UpdatePolicy(context.Context, *resources.UpdatePolicyRequest) (*resources.UpdatePolicyResponse, error)
	ListPolicies(context.Context, *resources.ListPoliciesRequest) (*resources.ListPoliciesResponse, error)
	BindingPolicy(context.Context, *resources.BindingPolicyRequest) (*resources.BindingPolicyResponse, error)
	UnBindingPolicy(context.Context, *resources.UnBindingPolicyRequest) (*resources.UnBindingPolicyResponse, error)
	GetIamPolicy(context.Context, *resources.GetIamPolicyRequest) (*resources.Policy, error)
	SetIamPolicy(context.Context, *resources.SetIamPolicyRequest) (*resources.Policy, error)
	TestIamPermissions(context.Context, *resources.TestIamPermissionsRequest) (*resources.TestIamPermissionsResponse, error)
	// member
	CreateUser(context.Context, *resources.CreateUserRequest) (*resources.User, error)
	GetUser(context.Context, *resources.GetUserRequest) (*resources.User, error)
	DeleteUser(context.Context, *resources.DeleteUserRequest) (*emptypb.Empty, error)
	ListUsers(context.Context, *resources.ListUsersRequest) (*resources.ListUsersResponse, error)
	CreateGroup(context.Context, *resources.CreateGroupRequest) (*resources.Group, error)
	GetGroup(context.Context, *resources.GetGroupRequest) (*resources.Group, error)
	DeleteGroup(context.Context, *resources.DeleteGroupRequest) (*emptypb.Empty, error)
	ListGroups(context.Context, *resources.ListGroupsRequest) (*resources.ListGroupsResponse, error)
	AddMemberToGroup(context.Context, *resources.AddMemberToGroupRequest) (*resources.AddMemberToGroupResponse, error)
	RemoveMemberFromGroup(context.Context, *resources.RemoveMemberFromGroupRequest) (*resources.RemoveMemberFromGroupResponse, error)
	ListServiceAccountKeys(context.Context, *resources.ListServiceAccountKeysRequest) (*resources.ListServiceAccountKeysResponse, error)
	CreateServiceAccountKey(context.Context, *resources.CreateServiceAccountKeyRequest) (*resources.ServiceAccountKey, error)
	DeleteServiceAccountKey(context.Context, *resources.DeleteServiceAccountKeyRequest) (*emptypb.Empty, error)
	DisableServiceAccountKey(context.Context, *resources.DisableServiceAccountKeyRequest) (*emptypb.Empty, error)
	EnableServiceAccountKey(context.Context, *resources.EnableServiceAccountKeyRequest) (*emptypb.Empty, error)
	GetServiceAccountKey(context.Context, *resources.GetServiceAccountKeyRequest) (*resources.ServiceAccountKey, error)
	// 获取资源
	GetResource(context.Context, *resources.GetResourceRequest) (*resources.Resource, error)
	// 创建资源
	CreateResource(context.Context, *resources.CreateResourceRequest) (*resources.Resource, error)
	// 资源列表
	ListResources(context.Context, *resources.ListResourcesRequest) (*resources.ListResourcesResponse, error)
	mustEmbedUnimplementedIAMServiceServer()
}

// Generate Injection
type registerIAMServiceServerGRPCResult struct{}

func (*registerIAMServiceServerGRPCResult) String() string {
	return "IAMServiceServerGRPCServer"
}

func RegisterIAMServiceServerGRPCProvider(newer interface{}) []interface{} {
	return []interface{}{
		// For provide dependency
		fx.Annotate(
			newer,
			fx.As(new(IAMServiceServer)),
		),
		// For create instance
		fx.Annotate(
			registerIAMServiceServerProviderImpl,
			fx.As(new(fmt.Stringer)),
			fx.ResultTags(`group:"grpc_register"`),
		),
	}
}

// registerIAMServiceServerProviderImpl use to trigger register
func registerIAMServiceServerProviderImpl(s grpc.ServiceRegistrar, srv IAMServiceServer) *registerIAMServiceServerGRPCResult {
	registerIAMServiceServer(s, srv)
	return &registerIAMServiceServerGRPCResult{}
}

// UnimplementedIAMServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMServiceServer struct {
}

func (UnimplementedIAMServiceServer) CreateRole(context.Context, *resources.CreateRoleRequest) (*resources.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedIAMServiceServer) GetRole(context.Context, *resources.GetRoleRequest) (*resources.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedIAMServiceServer) DeleteRole(context.Context, *resources.DeleteRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedIAMServiceServer) UpdateRole(context.Context, *resources.UpdateRoleRequest) (*resources.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedIAMServiceServer) ListRoles(context.Context, *resources.ListRolesRequest) (*resources.ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedIAMServiceServer) CreateServiceAccount(context.Context, *resources.CreateServiceAccountRequest) (*resources.ServiceAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceAccount not implemented")
}
func (UnimplementedIAMServiceServer) GetServiceAccount(context.Context, *resources.GetServiceAccountRequest) (*resources.ServiceAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceAccount not implemented")
}
func (UnimplementedIAMServiceServer) DeleteServiceAccount(context.Context, *resources.DeleteServiceAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceAccount not implemented")
}
func (UnimplementedIAMServiceServer) ListServiceAccounts(context.Context, *resources.ListServiceAccountsRequest) (*resources.ListServiceAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceAccounts not implemented")
}
func (UnimplementedIAMServiceServer) EnableServiceAccount(context.Context, *resources.EnableServiceAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableServiceAccount not implemented")
}
func (UnimplementedIAMServiceServer) DisableServiceAccount(context.Context, *resources.DisableServiceAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableServiceAccount not implemented")
}
func (UnimplementedIAMServiceServer) CreatePolicy(context.Context, *resources.CreatePolicyRequest) (*resources.CreatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedIAMServiceServer) GetPolicy(context.Context, *resources.GetPolicyRequest) (*resources.GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedIAMServiceServer) DeletePolicy(context.Context, *resources.DeletePolicyRequest) (*resources.DeletePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedIAMServiceServer) UpdatePolicy(context.Context, *resources.UpdatePolicyRequest) (*resources.UpdatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (UnimplementedIAMServiceServer) ListPolicies(context.Context, *resources.ListPoliciesRequest) (*resources.ListPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (UnimplementedIAMServiceServer) BindingPolicy(context.Context, *resources.BindingPolicyRequest) (*resources.BindingPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindingPolicy not implemented")
}
func (UnimplementedIAMServiceServer) UnBindingPolicy(context.Context, *resources.UnBindingPolicyRequest) (*resources.UnBindingPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBindingPolicy not implemented")
}
func (UnimplementedIAMServiceServer) GetIamPolicy(context.Context, *resources.GetIamPolicyRequest) (*resources.Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIamPolicy not implemented")
}
func (UnimplementedIAMServiceServer) SetIamPolicy(context.Context, *resources.SetIamPolicyRequest) (*resources.Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIamPolicy not implemented")
}
func (UnimplementedIAMServiceServer) TestIamPermissions(context.Context, *resources.TestIamPermissionsRequest) (*resources.TestIamPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestIamPermissions not implemented")
}
func (UnimplementedIAMServiceServer) CreateUser(context.Context, *resources.CreateUserRequest) (*resources.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedIAMServiceServer) GetUser(context.Context, *resources.GetUserRequest) (*resources.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedIAMServiceServer) DeleteUser(context.Context, *resources.DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedIAMServiceServer) ListUsers(context.Context, *resources.ListUsersRequest) (*resources.ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedIAMServiceServer) CreateGroup(context.Context, *resources.CreateGroupRequest) (*resources.Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedIAMServiceServer) GetGroup(context.Context, *resources.GetGroupRequest) (*resources.Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedIAMServiceServer) DeleteGroup(context.Context, *resources.DeleteGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedIAMServiceServer) ListGroups(context.Context, *resources.ListGroupsRequest) (*resources.ListGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (UnimplementedIAMServiceServer) AddMemberToGroup(context.Context, *resources.AddMemberToGroupRequest) (*resources.AddMemberToGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberToGroup not implemented")
}
func (UnimplementedIAMServiceServer) RemoveMemberFromGroup(context.Context, *resources.RemoveMemberFromGroupRequest) (*resources.RemoveMemberFromGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMemberFromGroup not implemented")
}
func (UnimplementedIAMServiceServer) ListServiceAccountKeys(context.Context, *resources.ListServiceAccountKeysRequest) (*resources.ListServiceAccountKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceAccountKeys not implemented")
}
func (UnimplementedIAMServiceServer) CreateServiceAccountKey(context.Context, *resources.CreateServiceAccountKeyRequest) (*resources.ServiceAccountKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceAccountKey not implemented")
}
func (UnimplementedIAMServiceServer) DeleteServiceAccountKey(context.Context, *resources.DeleteServiceAccountKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceAccountKey not implemented")
}
func (UnimplementedIAMServiceServer) DisableServiceAccountKey(context.Context, *resources.DisableServiceAccountKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableServiceAccountKey not implemented")
}
func (UnimplementedIAMServiceServer) EnableServiceAccountKey(context.Context, *resources.EnableServiceAccountKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableServiceAccountKey not implemented")
}
func (UnimplementedIAMServiceServer) GetServiceAccountKey(context.Context, *resources.GetServiceAccountKeyRequest) (*resources.ServiceAccountKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceAccountKey not implemented")
}
func (UnimplementedIAMServiceServer) GetResource(context.Context, *resources.GetResourceRequest) (*resources.Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedIAMServiceServer) CreateResource(context.Context, *resources.CreateResourceRequest) (*resources.Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedIAMServiceServer) ListResources(context.Context, *resources.ListResourcesRequest) (*resources.ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedIAMServiceServer) mustEmbedUnimplementedIAMServiceServer() {}

// UnsafeIAMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMServiceServer will
// result in compilation errors.
type UnsafeIAMServiceServer interface {
	mustEmbedUnimplementedIAMServiceServer()
}

func registerIAMServiceServer(s grpc.ServiceRegistrar, srv IAMServiceServer) {
	s.RegisterService(&IAMService_ServiceDesc, srv)
}

func _IAMService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).CreateRole(ctx, req.(*resources.CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetRole(ctx, req.(*resources.GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).DeleteRole(ctx, req.(*resources.DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).UpdateRole(ctx, req.(*resources.UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ListRoles(ctx, req.(*resources.ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_CreateServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).CreateServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_CreateServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).CreateServiceAccount(ctx, req.(*resources.CreateServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_GetServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetServiceAccount(ctx, req.(*resources.GetServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_DeleteServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).DeleteServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_DeleteServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).DeleteServiceAccount(ctx, req.(*resources.DeleteServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ListServiceAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListServiceAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ListServiceAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_ListServiceAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ListServiceAccounts(ctx, req.(*resources.ListServiceAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_EnableServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.EnableServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).EnableServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_EnableServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).EnableServiceAccount(ctx, req.(*resources.EnableServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_DisableServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DisableServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).DisableServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_DisableServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).DisableServiceAccount(ctx, req.(*resources.DisableServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_CreatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).CreatePolicy(ctx, req.(*resources.CreatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_GetPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetPolicy(ctx, req.(*resources.GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_DeletePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).DeletePolicy(ctx, req.(*resources.DeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_UpdatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).UpdatePolicy(ctx, req.(*resources.UpdatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_ListPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ListPolicies(ctx, req.(*resources.ListPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_BindingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.BindingPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).BindingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_BindingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).BindingPolicy(ctx, req.(*resources.BindingPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_UnBindingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UnBindingPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).UnBindingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_UnBindingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).UnBindingPolicy(ctx, req.(*resources.UnBindingPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetIamPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetIamPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetIamPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_GetIamPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetIamPolicy(ctx, req.(*resources.GetIamPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_SetIamPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SetIamPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).SetIamPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_SetIamPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).SetIamPolicy(ctx, req.(*resources.SetIamPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_TestIamPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.TestIamPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).TestIamPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_TestIamPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).TestIamPermissions(ctx, req.(*resources.TestIamPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).CreateUser(ctx, req.(*resources.CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetUser(ctx, req.(*resources.GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).DeleteUser(ctx, req.(*resources.DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ListUsers(ctx, req.(*resources.ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).CreateGroup(ctx, req.(*resources.CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetGroup(ctx, req.(*resources.GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).DeleteGroup(ctx, req.(*resources.DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_ListGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ListGroups(ctx, req.(*resources.ListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_AddMemberToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.AddMemberToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).AddMemberToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_AddMemberToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).AddMemberToGroup(ctx, req.(*resources.AddMemberToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_RemoveMemberFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.RemoveMemberFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).RemoveMemberFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_RemoveMemberFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).RemoveMemberFromGroup(ctx, req.(*resources.RemoveMemberFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ListServiceAccountKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListServiceAccountKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ListServiceAccountKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_ListServiceAccountKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ListServiceAccountKeys(ctx, req.(*resources.ListServiceAccountKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_CreateServiceAccountKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateServiceAccountKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).CreateServiceAccountKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_CreateServiceAccountKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).CreateServiceAccountKey(ctx, req.(*resources.CreateServiceAccountKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_DeleteServiceAccountKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteServiceAccountKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).DeleteServiceAccountKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_DeleteServiceAccountKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).DeleteServiceAccountKey(ctx, req.(*resources.DeleteServiceAccountKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_DisableServiceAccountKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DisableServiceAccountKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).DisableServiceAccountKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_DisableServiceAccountKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).DisableServiceAccountKey(ctx, req.(*resources.DisableServiceAccountKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_EnableServiceAccountKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.EnableServiceAccountKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).EnableServiceAccountKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_EnableServiceAccountKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).EnableServiceAccountKey(ctx, req.(*resources.EnableServiceAccountKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetServiceAccountKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetServiceAccountKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetServiceAccountKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_GetServiceAccountKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetServiceAccountKey(ctx, req.(*resources.GetServiceAccountKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_GetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetResource(ctx, req.(*resources.GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_CreateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).CreateResource(ctx, req.(*resources.CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_ListResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ListResources(ctx, req.(*resources.ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMService_ServiceDesc is the grpc.ServiceDesc for IAMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.iam.service.iamservicev1.IAMService",
	HandlerType: (*IAMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRole",
			Handler:    _IAMService_CreateRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _IAMService_GetRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _IAMService_DeleteRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _IAMService_UpdateRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _IAMService_ListRoles_Handler,
		},
		{
			MethodName: "CreateServiceAccount",
			Handler:    _IAMService_CreateServiceAccount_Handler,
		},
		{
			MethodName: "GetServiceAccount",
			Handler:    _IAMService_GetServiceAccount_Handler,
		},
		{
			MethodName: "DeleteServiceAccount",
			Handler:    _IAMService_DeleteServiceAccount_Handler,
		},
		{
			MethodName: "ListServiceAccounts",
			Handler:    _IAMService_ListServiceAccounts_Handler,
		},
		{
			MethodName: "EnableServiceAccount",
			Handler:    _IAMService_EnableServiceAccount_Handler,
		},
		{
			MethodName: "DisableServiceAccount",
			Handler:    _IAMService_DisableServiceAccount_Handler,
		},
		{
			MethodName: "CreatePolicy",
			Handler:    _IAMService_CreatePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _IAMService_GetPolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _IAMService_DeletePolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _IAMService_UpdatePolicy_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _IAMService_ListPolicies_Handler,
		},
		{
			MethodName: "BindingPolicy",
			Handler:    _IAMService_BindingPolicy_Handler,
		},
		{
			MethodName: "UnBindingPolicy",
			Handler:    _IAMService_UnBindingPolicy_Handler,
		},
		{
			MethodName: "GetIamPolicy",
			Handler:    _IAMService_GetIamPolicy_Handler,
		},
		{
			MethodName: "SetIamPolicy",
			Handler:    _IAMService_SetIamPolicy_Handler,
		},
		{
			MethodName: "TestIamPermissions",
			Handler:    _IAMService_TestIamPermissions_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _IAMService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _IAMService_GetUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _IAMService_DeleteUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _IAMService_ListUsers_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _IAMService_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _IAMService_GetGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _IAMService_DeleteGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _IAMService_ListGroups_Handler,
		},
		{
			MethodName: "AddMemberToGroup",
			Handler:    _IAMService_AddMemberToGroup_Handler,
		},
		{
			MethodName: "RemoveMemberFromGroup",
			Handler:    _IAMService_RemoveMemberFromGroup_Handler,
		},
		{
			MethodName: "ListServiceAccountKeys",
			Handler:    _IAMService_ListServiceAccountKeys_Handler,
		},
		{
			MethodName: "CreateServiceAccountKey",
			Handler:    _IAMService_CreateServiceAccountKey_Handler,
		},
		{
			MethodName: "DeleteServiceAccountKey",
			Handler:    _IAMService_DeleteServiceAccountKey_Handler,
		},
		{
			MethodName: "DisableServiceAccountKey",
			Handler:    _IAMService_DisableServiceAccountKey_Handler,
		},
		{
			MethodName: "EnableServiceAccountKey",
			Handler:    _IAMService_EnableServiceAccountKey_Handler,
		},
		{
			MethodName: "GetServiceAccountKey",
			Handler:    _IAMService_GetServiceAccountKey_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _IAMService_GetResource_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _IAMService_CreateResource_Handler,
		},
		{
			MethodName: "ListResources",
			Handler:    _IAMService_ListResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/iam-service/v1/services/iam.iam.service.v1.proto",
}
