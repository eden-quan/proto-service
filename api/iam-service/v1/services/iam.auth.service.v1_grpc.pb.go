// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.1
// - protoc             v5.26.1
// source: api/iam-service/v1/services/iam.auth.service.v1.proto

package iamservicev1

import (
	context "context"
	fmt "fmt"

	client "gitlab.lainuoniao.cn/eden-quan/go-biz-kit/client"
	def "gitlab.lainuoniao.cn/eden-quan/go-biz-kit/config/def"
	resources "gitlab.lainuoniao.cn/eden-quan/proto-service/api/iam-service/v1/resources"
	fx "go.uber.org/fx"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7
const _ = fx.Version

var _ = new(fmt.Stringer)
var _ = new(def.Server)
var _ = new(client.RegisterGRPCClientFactoryType)

const (
	IAMAuthService_CheckServiceAuth_FullMethodName = "/api.iam.service.iamservicev1.IAMAuthService/CheckServiceAuth"
	IAMAuthService_CheckUserAuth_FullMethodName    = "/api.iam.service.iamservicev1.IAMAuthService/CheckUserAuth"
	IAMAuthService_Validate_FullMethodName         = "/api.iam.service.iamservicev1.IAMAuthService/Validate"
)

// IAMAuthServiceClient is the client API for IAMAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMAuthServiceClient interface {
	CheckServiceAuth(ctx context.Context, in *resources.CheckServiceAuthRequest, opts ...grpc.CallOption) (*resources.CheckServiceAuthResponse, error)
	CheckUserAuth(ctx context.Context, in *resources.CheckUserAuthRequest, opts ...grpc.CallOption) (*resources.CheckUserAuthResponse, error)
	Validate(ctx context.Context, in *resources.ValidateRequest, opts ...grpc.CallOption) (*resources.ValidateResponse, error)
	RegisterNameForDiscover() string
}

type iAMAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func (c *iAMAuthServiceClient) RegisterNameForDiscover() string {
	return "/iam-service/v1"
}

func newIAMAuthServiceClient(cc grpc.ClientConnInterface) IAMAuthServiceClient {
	return &iAMAuthServiceClient{cc}
}

func registerIAMAuthServiceClientGRPCNameProvider() []string {
	return []string{"/iam-service/v1", "grpc"}
}

// RegisterIAMAuthServiceClientGRPCProvider is the provider for injection framework
// creator is the factory function which use to create the IAMAuthServiceClient instance/implement
// the creator function receive dependency provided by fx to create ClientInterface,
// and returns the new dependency can use by others functions
func RegisterIAMAuthServiceClientGRPCProvider(creator interface{}) []interface{} {
	return []interface{}{
		fx.Annotate(
			newIAMAuthServiceClient,
			fx.As(new(IAMAuthServiceClient)),
			fx.ParamTags(`name:"/iam-service/v1/grpc/iAMAuthService"`),
		),
		fx.Annotate(
			creator,
			fx.As(new(grpc.ClientConnInterface)),
			fx.ParamTags(`name:"/iam-service/v1/grpc/name/iAMAuthService"`),
			fx.ResultTags(`name:"/iam-service/v1/grpc/iAMAuthService"`),
		),
		fx.Annotate(
			registerIAMAuthServiceClientGRPCNameProvider,
			fx.ResultTags(`name:"/iam-service/v1/grpc/name/iAMAuthService"`),
		),
	}
}

type IAMAuthServiceClientGRPCFactory interface {
	New(conf *def.Server) (IAMAuthServiceClient, error)
}

type iAMAuthServiceClientGRPCFactoryImpl struct {
	factory client.RegisterGRPCClientFactoryType
}

func (p *iAMAuthServiceClientGRPCFactoryImpl) New(conf *def.Server) (IAMAuthServiceClient, error) {
	cc, err := p.factory(conf)
	if err != nil {
		return nil, fmt.Errorf("create IAMAuthServiceClient failed cause %s", err)
	}
	return &iAMAuthServiceClient{cc: cc}, nil
}

func RegisterIAMAuthServiceClientGRPCFactoryProvider(factory client.RegisterGRPCClientFactoryType) IAMAuthServiceClientGRPCFactory {
	return &iAMAuthServiceClientGRPCFactoryImpl{factory: factory}
}

func (c *iAMAuthServiceClient) CheckServiceAuth(ctx context.Context, in *resources.CheckServiceAuthRequest, opts ...grpc.CallOption) (*resources.CheckServiceAuthResponse, error) {
	out := new(resources.CheckServiceAuthResponse)
	err := c.cc.Invoke(ctx, IAMAuthService_CheckServiceAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthServiceClient) CheckUserAuth(ctx context.Context, in *resources.CheckUserAuthRequest, opts ...grpc.CallOption) (*resources.CheckUserAuthResponse, error) {
	out := new(resources.CheckUserAuthResponse)
	err := c.cc.Invoke(ctx, IAMAuthService_CheckUserAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthServiceClient) Validate(ctx context.Context, in *resources.ValidateRequest, opts ...grpc.CallOption) (*resources.ValidateResponse, error) {
	out := new(resources.ValidateResponse)
	err := c.cc.Invoke(ctx, IAMAuthService_Validate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMAuthServiceServer is the server API for IAMAuthService service.
// All implementations must embed UnimplementedIAMAuthServiceServer
// for forward compatibility
type IAMAuthServiceServer interface {
	CheckServiceAuth(context.Context, *resources.CheckServiceAuthRequest) (*resources.CheckServiceAuthResponse, error)
	CheckUserAuth(context.Context, *resources.CheckUserAuthRequest) (*resources.CheckUserAuthResponse, error)
	Validate(context.Context, *resources.ValidateRequest) (*resources.ValidateResponse, error)
	mustEmbedUnimplementedIAMAuthServiceServer()
}

// Generate Injection
type registerIAMAuthServiceServerGRPCResult struct{}

func (*registerIAMAuthServiceServerGRPCResult) String() string {
	return "IAMAuthServiceServerGRPCServer"
}

func RegisterIAMAuthServiceServerGRPCProvider(newer interface{}) []interface{} {
	return []interface{}{
		// For provide dependency
		fx.Annotate(
			newer,
			fx.As(new(IAMAuthServiceServer)),
		),
		// For create instance
		fx.Annotate(
			registerIAMAuthServiceServerProviderImpl,
			fx.As(new(fmt.Stringer)),
			fx.ResultTags(`group:"grpc_register"`),
		),
	}
}

// registerIAMAuthServiceServerProviderImpl use to trigger register
func registerIAMAuthServiceServerProviderImpl(s grpc.ServiceRegistrar, srv IAMAuthServiceServer) *registerIAMAuthServiceServerGRPCResult {
	registerIAMAuthServiceServer(s, srv)
	return &registerIAMAuthServiceServerGRPCResult{}
}

// UnimplementedIAMAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMAuthServiceServer struct {
}

func (UnimplementedIAMAuthServiceServer) CheckServiceAuth(context.Context, *resources.CheckServiceAuthRequest) (*resources.CheckServiceAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckServiceAuth not implemented")
}
func (UnimplementedIAMAuthServiceServer) CheckUserAuth(context.Context, *resources.CheckUserAuthRequest) (*resources.CheckUserAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserAuth not implemented")
}
func (UnimplementedIAMAuthServiceServer) Validate(context.Context, *resources.ValidateRequest) (*resources.ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedIAMAuthServiceServer) mustEmbedUnimplementedIAMAuthServiceServer() {}

// UnsafeIAMAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMAuthServiceServer will
// result in compilation errors.
type UnsafeIAMAuthServiceServer interface {
	mustEmbedUnimplementedIAMAuthServiceServer()
}

func registerIAMAuthServiceServer(s grpc.ServiceRegistrar, srv IAMAuthServiceServer) {
	s.RegisterService(&IAMAuthService_ServiceDesc, srv)
}

func _IAMAuthService_CheckServiceAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CheckServiceAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthServiceServer).CheckServiceAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMAuthService_CheckServiceAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthServiceServer).CheckServiceAuth(ctx, req.(*resources.CheckServiceAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthService_CheckUserAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CheckUserAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthServiceServer).CheckUserAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMAuthService_CheckUserAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthServiceServer).CheckUserAuth(ctx, req.(*resources.CheckUserAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMAuthService_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthServiceServer).Validate(ctx, req.(*resources.ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMAuthService_ServiceDesc is the grpc.ServiceDesc for IAMAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.iam.service.iamservicev1.IAMAuthService",
	HandlerType: (*IAMAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckServiceAuth",
			Handler:    _IAMAuthService_CheckServiceAuth_Handler,
		},
		{
			MethodName: "CheckUserAuth",
			Handler:    _IAMAuthService_CheckUserAuth_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _IAMAuthService_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/iam-service/v1/services/iam.auth.service.v1.proto",
}
