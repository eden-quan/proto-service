syntax = "proto3";

package api.common.configv1;

option go_package = "gitlab.lainuoniao.cn/eden-quan/proto-service/api/common/v1/config;configv1";

import "google/protobuf/duration.proto";

// Bootstrap 服务配置
message Bootstrap {
  // app application
  App app = 1;
  // server 服务
  Server server = 2;
  // log 日志
  Log log = 3;
  // registry 服务注册与发现
  Registry registry = 4;
  // Data 数据
  Data data = 5;
  // Secret 密钥
  Secret secret = 6;
}

// App application
message App {
  // belong_to 属于哪个项目
  string belong_to = 1;
  // name app名字
  string name = 2;
  // version app版本
  string version = 3;
  // env app 环境
  string env = 4;
  // env_branch 环境分支
  string env_branch = 5;
  // endpoints app站点
  repeated string endpoints = 6;
  // metadata 元数据
  map<string, string> metadata = 7;
}

// Server 服务
message Server {
  // HTTP http服务配置
  message HTTP {
    // enable 是否启动
    bool enable = 100;
    // network 网络
    string network = 1;
    // addr 地址
    string addr = 2;
    // timeout 超时时间
    google.protobuf.Duration timeout = 3;
  }
  // GRPC grpc服务配置
  message GRPC {
    // enable 是否启动
    bool enable = 100;
    // network 网络
    string network = 1;
    // addr 地址
    string addr = 2;
    // timeout 超时时间
    google.protobuf.Duration timeout = 3;
  }
  // http http服务配置
  HTTP http = 1;
  // grpc grpc服务配置
  GRPC grpc = 2;
}

// Log 日志
message Log {
  // Console 输出到控制台
  message Console {
    // enable 是否启用
    bool enable = 1;
    // level 日志级别；DEBUG、INFO、WARN、ERROR、FATAL
    string level = 2;
    bool use_json_encoder = 3;
  }
  // Graylog ...
  message Graylog {
    bool enable = 1;
    // level 日志级别；DEBUG、INFO、WARN、ERROR、FATAL
    string level = 2;
    string proto = 3;
    string addr = 4;
    string facility = 5;
    int32 async_pool_size = 6;
  }
  // File 输出到文件
  message File {
    // enable 是否启用
    bool enable = 1;
    // level 日志级别；DEBUG、INFO、WARN、ERROR、FATAL
    string level = 2;

    // dir 存储目录
    string dir = 3;
    // filename 文件名(默认：${filename}_app.%Y%m%d%H%M%S.log)
    string filename = 4;

    // rotate_time 轮询规则：n久(默认：86400s # 86400s = 1天)
    // 轮询规则：默认为：rotate_time
    google.protobuf.Duration rotate_time = 5;
    // rotate_size 轮询规则：按文件大小(默认：52428800 # 50<<20 = 50M)
    // 轮询规则：默认为：rotate_time
    int64 rotate_size = 6;

    // storage_age 存储n久(默认：2592000s = 30天)
    // 存储规则：默认为：storage_age
    google.protobuf.Duration storage_age = 8;
    // storage_counter 存储：n个 或 有效期storage_age(默认：2592000s = 30天)
    // 存储规则：默认为：storage_age
    uint32 storage_counter = 7;
  }

  // Console 输出到控制台
  Console console = 1;
  // Graylog 输出到文件
  Graylog graylog = 2;
  // File 输出到文件
  File file = 3;
}

// Registry 服务注册发现
message Registry {
  message LocalServer {
    string name = 1;
    string addr = 2;
  }
  repeated LocalServer local_server = 1;
  repeated LocalServer remote_server = 2;
  string host = 3;
  int32 port = 4;
  string namespace_id = 5;
  string username = 6;
  string password = 7;
  string type = 8;
}

// Data 数据
message Data {
  message Redis {
    bool enable = 10;
    repeated string addrs = 1;
    string username = 2;
    string password = 3;
    int64 max_retries = 4;
    google.protobuf.Duration dial_timeout = 5;
    google.protobuf.Duration read_timeout = 6;
    google.protobuf.Duration write_timeout = 7;
    int64 pool_size = 8;
    int64 min_idle_conns = 9;
  }

  message Mongo {
    bool enable = 14;
    string app_name = 1;
    string addr = 2;
    uint64 max_pool_size = 3;
    uint64 min_pool_size = 4;
    uint64 max_connecting = 5;
    google.protobuf.Duration connect_timeout = 6;
    google.protobuf.Duration heartbeat_interval = 7;
    google.protobuf.Duration local_threshold = 8;
    google.protobuf.Duration max_conn_idle_time = 9;
    google.protobuf.Duration timeout = 10;
    string database = 11;
    repeated string hosts = 12;
    bool debug = 13;
  }
  Redis redis = 1;
  Mongo mongo = 2;
}

// Secret ...
message Secret {
  // 非对称加密传输,主要用于密码传递等,防止传递过程中明文信息被log,导致泄露
  message TransferEncrypt {
    string public_key = 1;
    string private_key = 2;
  }
  // 非对称加密传输,主要用于服务请求鉴权,服务间的鉴权
  message ServiceEncrypt {
    string public_key = 1;
    string private_key = 2;
  }
  message TokenEncrypt {
    string key = 1;
  }
  message RefreshEncrypt {
    string key = 1;
  }

  TransferEncrypt transfer_encrypt = 1;
  ServiceEncrypt service_encrypt = 2;
  TokenEncrypt jwt_encrypt = 3;
  RefreshEncrypt refresh_encrypt = 4;
}