// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/common/v3/resources/common.resource.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SortField with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SortField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SortField with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SortFieldMultiError, or nil
// if none found.
func (m *SortField) ValidateAll() error {
	return m.validate(true)
}

func (m *SortField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for Desc

	if len(errors) > 0 {
		return SortFieldMultiError(errors)
	}

	return nil
}

// SortFieldMultiError is an error wrapping multiple validation errors returned
// by SortField.ValidateAll() if the designated constraints aren't met.
type SortFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SortFieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SortFieldMultiError) AllErrors() []error { return m }

// SortFieldValidationError is the validation error returned by
// SortField.Validate if the designated constraints aren't met.
type SortFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortFieldValidationError) Cause() error { return e.cause }

func (e SortFieldValidationError) Code() int64 { return 10000000 }

func (e SortFieldValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e SortFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortFieldValidationError) ErrorName() string { return "SortFieldValidationError" }

// Error satisfies the builtin error interface
func (e SortFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSortField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = SortFieldValidationError{}

// Validate checks the field values on Paging with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Paging) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Paging with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PagingMultiError, or nil if none found.
func (m *Paging) ValidateAll() error {
	return m.validate(true)
}

func (m *Paging) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Count

	// no validation rules for HasNext

	for idx, item := range m.GetSort() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PagingValidationError{
						field:  fmt.Sprintf("Sort[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PagingValidationError{
						field:  fmt.Sprintf("Sort[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PagingValidationError{
					field:  fmt.Sprintf("Sort[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NeedCount

	if len(errors) > 0 {
		return PagingMultiError(errors)
	}

	return nil
}

// PagingMultiError is an error wrapping multiple validation errors returned by
// Paging.ValidateAll() if the designated constraints aren't met.
type PagingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagingMultiError) AllErrors() []error { return m }

// PagingValidationError is the validation error returned by Paging.Validate if
// the designated constraints aren't met.
type PagingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagingValidationError) Cause() error { return e.cause }

func (e PagingValidationError) Code() int64 { return 10000000 }

func (e PagingValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e PagingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagingValidationError) ErrorName() string { return "PagingValidationError" }

// Error satisfies the builtin error interface
func (e PagingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaging.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = PagingValidationError{}

// Validate checks the field values on Result with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Result with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ResultMultiError, or nil if none found.
func (m *Result) ValidateAll() error {
	return m.validate(true)
}

func (m *Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCode() < 0 {
		err := ResultValidationError{
			field:  "Code",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Identity

	// no validation rules for TraceId

	// no validation rules for ErrorChain

	if len(errors) > 0 {
		return ResultMultiError(errors)
	}

	return nil
}

// ResultMultiError is an error wrapping multiple validation errors returned by
// Result.ValidateAll() if the designated constraints aren't met.
type ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResultMultiError) AllErrors() []error { return m }

// ResultValidationError is the validation error returned by Result.Validate if
// the designated constraints aren't met.
type ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResultValidationError) Cause() error { return e.cause }

func (e ResultValidationError) Code() int64 { return 10000000 }

func (e ResultValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResultValidationError) ErrorName() string { return "ResultValidationError" }

// Error satisfies the builtin error interface
func (e ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = ResultValidationError{}

// Validate checks the field values on DBModel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DBModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DBModel with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DBModelMultiError, or nil if none found.
func (m *DBModel) ValidateAll() error {
	return m.validate(true)
}

func (m *DBModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for IsDeleted

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DBModelValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DBModelValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DBModelValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DBModelValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DBModelValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DBModelValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DBModelMultiError(errors)
	}

	return nil
}

// DBModelMultiError is an error wrapping multiple validation errors returned
// by DBModel.ValidateAll() if the designated constraints aren't met.
type DBModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DBModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DBModelMultiError) AllErrors() []error { return m }

// DBModelValidationError is the validation error returned by DBModel.Validate
// if the designated constraints aren't met.
type DBModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DBModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DBModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DBModelValidationError) Cause() error { return e.cause }

func (e DBModelValidationError) Code() int64 { return 10000000 }

func (e DBModelValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e DBModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DBModelValidationError) ErrorName() string { return "DBModelValidationError" }

// Error satisfies the builtin error interface
func (e DBModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDBModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DBModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = DBModelValidationError{}

// Validate checks the field values on FlattenRules with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FlattenRules) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlattenRules with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FlattenRulesMultiError, or
// nil if none found.
func (m *FlattenRules) ValidateAll() error {
	return m.validate(true)
}

func (m *FlattenRules) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Reserved != nil {

		if all {
			switch v := interface{}(m.GetReserved()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FlattenRulesValidationError{
						field:  "Reserved",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FlattenRulesValidationError{
						field:  "Reserved",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReserved()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FlattenRulesValidationError{
					field:  "Reserved",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FlattenRulesMultiError(errors)
	}

	return nil
}

// FlattenRulesMultiError is an error wrapping multiple validation errors
// returned by FlattenRules.ValidateAll() if the designated constraints aren't met.
type FlattenRulesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlattenRulesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlattenRulesMultiError) AllErrors() []error { return m }

// FlattenRulesValidationError is the validation error returned by
// FlattenRules.Validate if the designated constraints aren't met.
type FlattenRulesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlattenRulesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlattenRulesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlattenRulesValidationError) Cause() error { return e.cause }

func (e FlattenRulesValidationError) Code() int64 { return 10000000 }

func (e FlattenRulesValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FlattenRulesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlattenRulesValidationError) ErrorName() string { return "FlattenRulesValidationError" }

// Error satisfies the builtin error interface
func (e FlattenRulesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlattenRules.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlattenRulesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FlattenRulesValidationError{}

// Validate checks the field values on Reserved with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Reserved) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reserved with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReservedMultiError, or nil
// if none found.
func (m *Reserved) ValidateAll() error {
	return m.validate(true)
}

func (m *Reserved) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Min != nil {
		// no validation rules for Min
	}

	if m.Max != nil {
		// no validation rules for Max
	}

	if len(errors) > 0 {
		return ReservedMultiError(errors)
	}

	return nil
}

// ReservedMultiError is an error wrapping multiple validation errors returned
// by Reserved.ValidateAll() if the designated constraints aren't met.
type ReservedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReservedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReservedMultiError) AllErrors() []error { return m }

// ReservedValidationError is the validation error returned by
// Reserved.Validate if the designated constraints aren't met.
type ReservedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReservedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReservedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReservedValidationError) Cause() error { return e.cause }

func (e ReservedValidationError) Code() int64 { return 10000000 }

func (e ReservedValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e ReservedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReservedValidationError) ErrorName() string { return "ReservedValidationError" }

// Error satisfies the builtin error interface
func (e ReservedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReserved.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReservedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = ReservedValidationError{}
