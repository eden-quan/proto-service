// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/filesystem-service/v1/resources/filesystem.filesystem.resource.v1.proto

package filesystemv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	filesystemerrorv1 "gitlab.lainuoniao.cn/eden-quan/proto-service/api/filesystem-service/v1/errors"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = filesystemerrorv1.FILEIO_ERROR(0)
)

// Validate checks the field values on FSFileObject with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FSFileObject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FSFileObject with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FSFileObjectMultiError, or
// nil if none found.
func (m *FSFileObject) ValidateAll() error {
	return m.validate(true)
}

func (m *FSFileObject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Type

	if len(errors) > 0 {
		return FSFileObjectMultiError(errors)
	}

	return nil
}

// FSFileObjectMultiError is an error wrapping multiple validation errors
// returned by FSFileObject.ValidateAll() if the designated constraints aren't met.
type FSFileObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FSFileObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FSFileObjectMultiError) AllErrors() []error { return m }

// FSFileObjectValidationError is the validation error returned by
// FSFileObject.Validate if the designated constraints aren't met.
type FSFileObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSFileObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSFileObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSFileObjectValidationError) Cause() error { return e.cause }

func (e FSFileObjectValidationError) Code() int64 { return 10010001 }

func (e FSFileObjectValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FSFileObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSFileObjectValidationError) ErrorName() string { return "FSFileObjectValidationError" }

// Error satisfies the builtin error interface
func (e FSFileObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSFileObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSFileObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FSFileObjectValidationError{}

// Validate checks the field values on FSListEntriesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FSListEntriesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FSListEntriesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FSListEntriesReplyMultiError, or nil if none found.
func (m *FSListEntriesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FSListEntriesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FSListEntriesReplyValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FSListEntriesReplyValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FSListEntriesReplyValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FSListEntriesReplyMultiError(errors)
	}

	return nil
}

// FSListEntriesReplyMultiError is an error wrapping multiple validation errors
// returned by FSListEntriesReply.ValidateAll() if the designated constraints
// aren't met.
type FSListEntriesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FSListEntriesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FSListEntriesReplyMultiError) AllErrors() []error { return m }

// FSListEntriesReplyValidationError is the validation error returned by
// FSListEntriesReply.Validate if the designated constraints aren't met.
type FSListEntriesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSListEntriesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSListEntriesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSListEntriesReplyValidationError) Cause() error { return e.cause }

func (e FSListEntriesReplyValidationError) Code() int64 { return 10010001 }

func (e FSListEntriesReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FSListEntriesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSListEntriesReplyValidationError) ErrorName() string {
	return "FSListEntriesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e FSListEntriesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSListEntriesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSListEntriesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FSListEntriesReplyValidationError{}

// Validate checks the field values on FSCreateFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FSCreateFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FSCreateFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FSCreateFileRequestMultiError, or nil if none found.
func (m *FSCreateFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FSCreateFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Attribute

	if len(errors) > 0 {
		return FSCreateFileRequestMultiError(errors)
	}

	return nil
}

// FSCreateFileRequestMultiError is an error wrapping multiple validation
// errors returned by FSCreateFileRequest.ValidateAll() if the designated
// constraints aren't met.
type FSCreateFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FSCreateFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FSCreateFileRequestMultiError) AllErrors() []error { return m }

// FSCreateFileRequestValidationError is the validation error returned by
// FSCreateFileRequest.Validate if the designated constraints aren't met.
type FSCreateFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSCreateFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSCreateFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSCreateFileRequestValidationError) Cause() error { return e.cause }

func (e FSCreateFileRequestValidationError) Code() int64 { return 10010001 }

func (e FSCreateFileRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FSCreateFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSCreateFileRequestValidationError) ErrorName() string {
	return "FSCreateFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FSCreateFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSCreateFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSCreateFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FSCreateFileRequestValidationError{}

// Validate checks the field values on FSObjectCopyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FSObjectCopyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FSObjectCopyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FSObjectCopyRequestMultiError, or nil if none found.
func (m *FSObjectCopyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FSObjectCopyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PathFrom

	// no validation rules for PathTo

	// no validation rules for Attribute

	if len(errors) > 0 {
		return FSObjectCopyRequestMultiError(errors)
	}

	return nil
}

// FSObjectCopyRequestMultiError is an error wrapping multiple validation
// errors returned by FSObjectCopyRequest.ValidateAll() if the designated
// constraints aren't met.
type FSObjectCopyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FSObjectCopyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FSObjectCopyRequestMultiError) AllErrors() []error { return m }

// FSObjectCopyRequestValidationError is the validation error returned by
// FSObjectCopyRequest.Validate if the designated constraints aren't met.
type FSObjectCopyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSObjectCopyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSObjectCopyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSObjectCopyRequestValidationError) Cause() error { return e.cause }

func (e FSObjectCopyRequestValidationError) Code() int64 { return 10010001 }

func (e FSObjectCopyRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FSObjectCopyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSObjectCopyRequestValidationError) ErrorName() string {
	return "FSObjectCopyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FSObjectCopyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSObjectCopyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSObjectCopyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FSObjectCopyRequestValidationError{}

// Validate checks the field values on FSObjectRenameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FSObjectRenameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FSObjectRenameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FSObjectRenameRequestMultiError, or nil if none found.
func (m *FSObjectRenameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FSObjectRenameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PathFrom

	// no validation rules for PathTo

	if len(errors) > 0 {
		return FSObjectRenameRequestMultiError(errors)
	}

	return nil
}

// FSObjectRenameRequestMultiError is an error wrapping multiple validation
// errors returned by FSObjectRenameRequest.ValidateAll() if the designated
// constraints aren't met.
type FSObjectRenameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FSObjectRenameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FSObjectRenameRequestMultiError) AllErrors() []error { return m }

// FSObjectRenameRequestValidationError is the validation error returned by
// FSObjectRenameRequest.Validate if the designated constraints aren't met.
type FSObjectRenameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSObjectRenameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSObjectRenameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSObjectRenameRequestValidationError) Cause() error { return e.cause }

func (e FSObjectRenameRequestValidationError) Code() int64 { return 10010001 }

func (e FSObjectRenameRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FSObjectRenameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSObjectRenameRequestValidationError) ErrorName() string {
	return "FSObjectRenameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FSObjectRenameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSObjectRenameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSObjectRenameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FSObjectRenameRequestValidationError{}

// Validate checks the field values on FSObjectExistReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FSObjectExistReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FSObjectExistReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FSObjectExistReplyMultiError, or nil if none found.
func (m *FSObjectExistReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FSObjectExistReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Exist

	if len(errors) > 0 {
		return FSObjectExistReplyMultiError(errors)
	}

	return nil
}

// FSObjectExistReplyMultiError is an error wrapping multiple validation errors
// returned by FSObjectExistReply.ValidateAll() if the designated constraints
// aren't met.
type FSObjectExistReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FSObjectExistReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FSObjectExistReplyMultiError) AllErrors() []error { return m }

// FSObjectExistReplyValidationError is the validation error returned by
// FSObjectExistReply.Validate if the designated constraints aren't met.
type FSObjectExistReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSObjectExistReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSObjectExistReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSObjectExistReplyValidationError) Cause() error { return e.cause }

func (e FSObjectExistReplyValidationError) Code() int64 { return 10010001 }

func (e FSObjectExistReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FSObjectExistReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSObjectExistReplyValidationError) ErrorName() string {
	return "FSObjectExistReplyValidationError"
}

// Error satisfies the builtin error interface
func (e FSObjectExistReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSObjectExistReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSObjectExistReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FSObjectExistReplyValidationError{}

// Validate checks the field values on FSObjectEquivalentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FSObjectEquivalentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FSObjectEquivalentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FSObjectEquivalentRequestMultiError, or nil if none found.
func (m *FSObjectEquivalentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FSObjectEquivalentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SrcPath

	// no validation rules for TargetPath

	if len(errors) > 0 {
		return FSObjectEquivalentRequestMultiError(errors)
	}

	return nil
}

// FSObjectEquivalentRequestMultiError is an error wrapping multiple validation
// errors returned by FSObjectEquivalentRequest.ValidateAll() if the
// designated constraints aren't met.
type FSObjectEquivalentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FSObjectEquivalentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FSObjectEquivalentRequestMultiError) AllErrors() []error { return m }

// FSObjectEquivalentRequestValidationError is the validation error returned by
// FSObjectEquivalentRequest.Validate if the designated constraints aren't met.
type FSObjectEquivalentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSObjectEquivalentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSObjectEquivalentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSObjectEquivalentRequestValidationError) Cause() error { return e.cause }

func (e FSObjectEquivalentRequestValidationError) Code() int64 { return 10010001 }

func (e FSObjectEquivalentRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FSObjectEquivalentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSObjectEquivalentRequestValidationError) ErrorName() string {
	return "FSObjectEquivalentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FSObjectEquivalentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSObjectEquivalentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSObjectEquivalentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FSObjectEquivalentRequestValidationError{}

// Validate checks the field values on FSObjectEquivalentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FSObjectEquivalentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FSObjectEquivalentReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FSObjectEquivalentReplyMultiError, or nil if none found.
func (m *FSObjectEquivalentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FSObjectEquivalentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Quivalent

	if len(errors) > 0 {
		return FSObjectEquivalentReplyMultiError(errors)
	}

	return nil
}

// FSObjectEquivalentReplyMultiError is an error wrapping multiple validation
// errors returned by FSObjectEquivalentReply.ValidateAll() if the designated
// constraints aren't met.
type FSObjectEquivalentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FSObjectEquivalentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FSObjectEquivalentReplyMultiError) AllErrors() []error { return m }

// FSObjectEquivalentReplyValidationError is the validation error returned by
// FSObjectEquivalentReply.Validate if the designated constraints aren't met.
type FSObjectEquivalentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSObjectEquivalentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSObjectEquivalentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSObjectEquivalentReplyValidationError) Cause() error { return e.cause }

func (e FSObjectEquivalentReplyValidationError) Code() int64 { return 10010001 }

func (e FSObjectEquivalentReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FSObjectEquivalentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSObjectEquivalentReplyValidationError) ErrorName() string {
	return "FSObjectEquivalentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e FSObjectEquivalentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSObjectEquivalentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSObjectEquivalentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FSObjectEquivalentReplyValidationError{}

// Validate checks the field values on FSObjectSizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FSObjectSizeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FSObjectSizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FSObjectSizeRequestMultiError, or nil if none found.
func (m *FSObjectSizeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FSObjectSizeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Md5

	if len(errors) > 0 {
		return FSObjectSizeRequestMultiError(errors)
	}

	return nil
}

// FSObjectSizeRequestMultiError is an error wrapping multiple validation
// errors returned by FSObjectSizeRequest.ValidateAll() if the designated
// constraints aren't met.
type FSObjectSizeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FSObjectSizeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FSObjectSizeRequestMultiError) AllErrors() []error { return m }

// FSObjectSizeRequestValidationError is the validation error returned by
// FSObjectSizeRequest.Validate if the designated constraints aren't met.
type FSObjectSizeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSObjectSizeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSObjectSizeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSObjectSizeRequestValidationError) Cause() error { return e.cause }

func (e FSObjectSizeRequestValidationError) Code() int64 { return 10010001 }

func (e FSObjectSizeRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FSObjectSizeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSObjectSizeRequestValidationError) ErrorName() string {
	return "FSObjectSizeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FSObjectSizeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSObjectSizeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSObjectSizeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FSObjectSizeRequestValidationError{}

// Validate checks the field values on FSObjectSizeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FSObjectSizeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FSObjectSizeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FSObjectSizeReplyMultiError, or nil if none found.
func (m *FSObjectSizeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FSObjectSizeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Size

	if len(errors) > 0 {
		return FSObjectSizeReplyMultiError(errors)
	}

	return nil
}

// FSObjectSizeReplyMultiError is an error wrapping multiple validation errors
// returned by FSObjectSizeReply.ValidateAll() if the designated constraints
// aren't met.
type FSObjectSizeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FSObjectSizeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FSObjectSizeReplyMultiError) AllErrors() []error { return m }

// FSObjectSizeReplyValidationError is the validation error returned by
// FSObjectSizeReply.Validate if the designated constraints aren't met.
type FSObjectSizeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSObjectSizeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSObjectSizeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSObjectSizeReplyValidationError) Cause() error { return e.cause }

func (e FSObjectSizeReplyValidationError) Code() int64 { return 10010001 }

func (e FSObjectSizeReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FSObjectSizeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSObjectSizeReplyValidationError) ErrorName() string {
	return "FSObjectSizeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e FSObjectSizeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSObjectSizeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSObjectSizeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FSObjectSizeReplyValidationError{}

// Validate checks the field values on FSFileAttributeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FSFileAttributeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FSFileAttributeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FSFileAttributeReplyMultiError, or nil if none found.
func (m *FSFileAttributeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FSFileAttributeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Attribute

	// no validation rules for Md5

	// no validation rules for Size

	if len(errors) > 0 {
		return FSFileAttributeReplyMultiError(errors)
	}

	return nil
}

// FSFileAttributeReplyMultiError is an error wrapping multiple validation
// errors returned by FSFileAttributeReply.ValidateAll() if the designated
// constraints aren't met.
type FSFileAttributeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FSFileAttributeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FSFileAttributeReplyMultiError) AllErrors() []error { return m }

// FSFileAttributeReplyValidationError is the validation error returned by
// FSFileAttributeReply.Validate if the designated constraints aren't met.
type FSFileAttributeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSFileAttributeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSFileAttributeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSFileAttributeReplyValidationError) Cause() error { return e.cause }

func (e FSFileAttributeReplyValidationError) Code() int64 { return 10010001 }

func (e FSFileAttributeReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FSFileAttributeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSFileAttributeReplyValidationError) ErrorName() string {
	return "FSFileAttributeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e FSFileAttributeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSFileAttributeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSFileAttributeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FSFileAttributeReplyValidationError{}

// Validate checks the field values on FSBatchGetSizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FSBatchGetSizeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FSBatchGetSizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FSBatchGetSizeRequestMultiError, or nil if none found.
func (m *FSBatchGetSizeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FSBatchGetSizeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FSBatchGetSizeRequestMultiError(errors)
	}

	return nil
}

// FSBatchGetSizeRequestMultiError is an error wrapping multiple validation
// errors returned by FSBatchGetSizeRequest.ValidateAll() if the designated
// constraints aren't met.
type FSBatchGetSizeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FSBatchGetSizeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FSBatchGetSizeRequestMultiError) AllErrors() []error { return m }

// FSBatchGetSizeRequestValidationError is the validation error returned by
// FSBatchGetSizeRequest.Validate if the designated constraints aren't met.
type FSBatchGetSizeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSBatchGetSizeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSBatchGetSizeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSBatchGetSizeRequestValidationError) Cause() error { return e.cause }

func (e FSBatchGetSizeRequestValidationError) Code() int64 { return 10010001 }

func (e FSBatchGetSizeRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FSBatchGetSizeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSBatchGetSizeRequestValidationError) ErrorName() string {
	return "FSBatchGetSizeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FSBatchGetSizeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSBatchGetSizeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSBatchGetSizeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FSBatchGetSizeRequestValidationError{}

// Validate checks the field values on FSObjectSizeInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FSObjectSizeInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FSObjectSizeInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FSObjectSizeInfoMultiError, or nil if none found.
func (m *FSObjectSizeInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *FSObjectSizeInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Size

	if len(errors) > 0 {
		return FSObjectSizeInfoMultiError(errors)
	}

	return nil
}

// FSObjectSizeInfoMultiError is an error wrapping multiple validation errors
// returned by FSObjectSizeInfo.ValidateAll() if the designated constraints
// aren't met.
type FSObjectSizeInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FSObjectSizeInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FSObjectSizeInfoMultiError) AllErrors() []error { return m }

// FSObjectSizeInfoValidationError is the validation error returned by
// FSObjectSizeInfo.Validate if the designated constraints aren't met.
type FSObjectSizeInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSObjectSizeInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSObjectSizeInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSObjectSizeInfoValidationError) Cause() error { return e.cause }

func (e FSObjectSizeInfoValidationError) Code() int64 { return 10010001 }

func (e FSObjectSizeInfoValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FSObjectSizeInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSObjectSizeInfoValidationError) ErrorName() string { return "FSObjectSizeInfoValidationError" }

// Error satisfies the builtin error interface
func (e FSObjectSizeInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSObjectSizeInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSObjectSizeInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FSObjectSizeInfoValidationError{}

// Validate checks the field values on FSBatchGetSizeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FSBatchGetSizeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FSBatchGetSizeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FSBatchGetSizeReplyMultiError, or nil if none found.
func (m *FSBatchGetSizeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FSBatchGetSizeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FSBatchGetSizeReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FSBatchGetSizeReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FSBatchGetSizeReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FSBatchGetSizeReplyMultiError(errors)
	}

	return nil
}

// FSBatchGetSizeReplyMultiError is an error wrapping multiple validation
// errors returned by FSBatchGetSizeReply.ValidateAll() if the designated
// constraints aren't met.
type FSBatchGetSizeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FSBatchGetSizeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FSBatchGetSizeReplyMultiError) AllErrors() []error { return m }

// FSBatchGetSizeReplyValidationError is the validation error returned by
// FSBatchGetSizeReply.Validate if the designated constraints aren't met.
type FSBatchGetSizeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSBatchGetSizeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSBatchGetSizeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSBatchGetSizeReplyValidationError) Cause() error { return e.cause }

func (e FSBatchGetSizeReplyValidationError) Code() int64 { return 10010001 }

func (e FSBatchGetSizeReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FSBatchGetSizeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSBatchGetSizeReplyValidationError) ErrorName() string {
	return "FSBatchGetSizeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e FSBatchGetSizeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSBatchGetSizeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSBatchGetSizeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FSBatchGetSizeReplyValidationError{}

// Validate checks the field values on FSBatchObjectRemoveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FSBatchObjectRemoveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FSBatchObjectRemoveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FSBatchObjectRemoveRequestMultiError, or nil if none found.
func (m *FSBatchObjectRemoveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FSBatchObjectRemoveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FSBatchObjectRemoveRequestMultiError(errors)
	}

	return nil
}

// FSBatchObjectRemoveRequestMultiError is an error wrapping multiple
// validation errors returned by FSBatchObjectRemoveRequest.ValidateAll() if
// the designated constraints aren't met.
type FSBatchObjectRemoveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FSBatchObjectRemoveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FSBatchObjectRemoveRequestMultiError) AllErrors() []error { return m }

// FSBatchObjectRemoveRequestValidationError is the validation error returned
// by FSBatchObjectRemoveRequest.Validate if the designated constraints aren't met.
type FSBatchObjectRemoveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSBatchObjectRemoveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSBatchObjectRemoveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSBatchObjectRemoveRequestValidationError) Cause() error { return e.cause }

func (e FSBatchObjectRemoveRequestValidationError) Code() int64 { return 10010001 }

func (e FSBatchObjectRemoveRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FSBatchObjectRemoveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSBatchObjectRemoveRequestValidationError) ErrorName() string {
	return "FSBatchObjectRemoveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FSBatchObjectRemoveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSBatchObjectRemoveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSBatchObjectRemoveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FSBatchObjectRemoveRequestValidationError{}
