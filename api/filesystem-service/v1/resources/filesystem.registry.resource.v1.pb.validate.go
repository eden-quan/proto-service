// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/filesystem-service/v1/resources/filesystem.registry.resource.v1.proto

package filesystemv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RGCommonValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RGCommonValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RGCommonValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RGCommonValueRequestMultiError, or nil if none found.
func (m *RGCommonValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RGCommonValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for ValName

	if len(errors) > 0 {
		return RGCommonValueRequestMultiError(errors)
	}

	return nil
}

// RGCommonValueRequestMultiError is an error wrapping multiple validation
// errors returned by RGCommonValueRequest.ValidateAll() if the designated
// constraints aren't met.
type RGCommonValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RGCommonValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RGCommonValueRequestMultiError) AllErrors() []error { return m }

// RGCommonValueRequestValidationError is the validation error returned by
// RGCommonValueRequest.Validate if the designated constraints aren't met.
type RGCommonValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RGCommonValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RGCommonValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RGCommonValueRequestValidationError) Cause() error { return e.cause }

func (e RGCommonValueRequestValidationError) Code() int64 { return 10010001 }

func (e RGCommonValueRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e RGCommonValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RGCommonValueRequestValidationError) ErrorName() string {
	return "RGCommonValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RGCommonValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRGCommonValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RGCommonValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = RGCommonValueRequestValidationError{}

// Validate checks the field values on RGQueryValueReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RGQueryValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RGQueryValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RGQueryValueReplyMultiError, or nil if none found.
func (m *RGQueryValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RGQueryValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Value

	if len(errors) > 0 {
		return RGQueryValueReplyMultiError(errors)
	}

	return nil
}

// RGQueryValueReplyMultiError is an error wrapping multiple validation errors
// returned by RGQueryValueReply.ValidateAll() if the designated constraints
// aren't met.
type RGQueryValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RGQueryValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RGQueryValueReplyMultiError) AllErrors() []error { return m }

// RGQueryValueReplyValidationError is the validation error returned by
// RGQueryValueReply.Validate if the designated constraints aren't met.
type RGQueryValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RGQueryValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RGQueryValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RGQueryValueReplyValidationError) Cause() error { return e.cause }

func (e RGQueryValueReplyValidationError) Code() int64 { return 10010001 }

func (e RGQueryValueReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e RGQueryValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RGQueryValueReplyValidationError) ErrorName() string {
	return "RGQueryValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RGQueryValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRGQueryValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RGQueryValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = RGQueryValueReplyValidationError{}

// Validate checks the field values on RGSetValueRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RGSetValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RGSetValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RGSetValueRequestMultiError, or nil if none found.
func (m *RGSetValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RGSetValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for ValName

	// no validation rules for Value

	if len(errors) > 0 {
		return RGSetValueRequestMultiError(errors)
	}

	return nil
}

// RGSetValueRequestMultiError is an error wrapping multiple validation errors
// returned by RGSetValueRequest.ValidateAll() if the designated constraints
// aren't met.
type RGSetValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RGSetValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RGSetValueRequestMultiError) AllErrors() []error { return m }

// RGSetValueRequestValidationError is the validation error returned by
// RGSetValueRequest.Validate if the designated constraints aren't met.
type RGSetValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RGSetValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RGSetValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RGSetValueRequestValidationError) Cause() error { return e.cause }

func (e RGSetValueRequestValidationError) Code() int64 { return 10010001 }

func (e RGSetValueRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e RGSetValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RGSetValueRequestValidationError) ErrorName() string {
	return "RGSetValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RGSetValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRGSetValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RGSetValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = RGSetValueRequestValidationError{}

// Validate checks the field values on RGSetValueReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RGSetValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RGSetValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RGSetValueReplyMultiError, or nil if none found.
func (m *RGSetValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RGSetValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return RGSetValueReplyMultiError(errors)
	}

	return nil
}

// RGSetValueReplyMultiError is an error wrapping multiple validation errors
// returned by RGSetValueReply.ValidateAll() if the designated constraints
// aren't met.
type RGSetValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RGSetValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RGSetValueReplyMultiError) AllErrors() []error { return m }

// RGSetValueReplyValidationError is the validation error returned by
// RGSetValueReply.Validate if the designated constraints aren't met.
type RGSetValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RGSetValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RGSetValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RGSetValueReplyValidationError) Cause() error { return e.cause }

func (e RGSetValueReplyValidationError) Code() int64 { return 10010001 }

func (e RGSetValueReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e RGSetValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RGSetValueReplyValidationError) ErrorName() string { return "RGSetValueReplyValidationError" }

// Error satisfies the builtin error interface
func (e RGSetValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRGSetValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RGSetValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = RGSetValueReplyValidationError{}

// Validate checks the field values on RGDeleteValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RGDeleteValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RGDeleteValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RGDeleteValueReplyMultiError, or nil if none found.
func (m *RGDeleteValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RGDeleteValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return RGDeleteValueReplyMultiError(errors)
	}

	return nil
}

// RGDeleteValueReplyMultiError is an error wrapping multiple validation errors
// returned by RGDeleteValueReply.ValidateAll() if the designated constraints
// aren't met.
type RGDeleteValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RGDeleteValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RGDeleteValueReplyMultiError) AllErrors() []error { return m }

// RGDeleteValueReplyValidationError is the validation error returned by
// RGDeleteValueReply.Validate if the designated constraints aren't met.
type RGDeleteValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RGDeleteValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RGDeleteValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RGDeleteValueReplyValidationError) Cause() error { return e.cause }

func (e RGDeleteValueReplyValidationError) Code() int64 { return 10010001 }

func (e RGDeleteValueReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e RGDeleteValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RGDeleteValueReplyValidationError) ErrorName() string {
	return "RGDeleteValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RGDeleteValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRGDeleteValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RGDeleteValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = RGDeleteValueReplyValidationError{}

// Validate checks the field values on RGCommonRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RGCommonRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RGCommonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RGCommonRequestMultiError, or nil if none found.
func (m *RGCommonRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RGCommonRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return RGCommonRequestMultiError(errors)
	}

	return nil
}

// RGCommonRequestMultiError is an error wrapping multiple validation errors
// returned by RGCommonRequest.ValidateAll() if the designated constraints
// aren't met.
type RGCommonRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RGCommonRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RGCommonRequestMultiError) AllErrors() []error { return m }

// RGCommonRequestValidationError is the validation error returned by
// RGCommonRequest.Validate if the designated constraints aren't met.
type RGCommonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RGCommonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RGCommonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RGCommonRequestValidationError) Cause() error { return e.cause }

func (e RGCommonRequestValidationError) Code() int64 { return 10010001 }

func (e RGCommonRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e RGCommonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RGCommonRequestValidationError) ErrorName() string { return "RGCommonRequestValidationError" }

// Error satisfies the builtin error interface
func (e RGCommonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRGCommonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RGCommonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = RGCommonRequestValidationError{}

// Validate checks the field values on RGListValueReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RGListValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RGListValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RGListValueReplyMultiError, or nil if none found.
func (m *RGListValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RGListValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RGListValueReplyValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RGListValueReplyValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RGListValueReplyValidationError{
					field:  fmt.Sprintf("Values[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RGListValueReplyMultiError(errors)
	}

	return nil
}

// RGListValueReplyMultiError is an error wrapping multiple validation errors
// returned by RGListValueReply.ValidateAll() if the designated constraints
// aren't met.
type RGListValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RGListValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RGListValueReplyMultiError) AllErrors() []error { return m }

// RGListValueReplyValidationError is the validation error returned by
// RGListValueReply.Validate if the designated constraints aren't met.
type RGListValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RGListValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RGListValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RGListValueReplyValidationError) Cause() error { return e.cause }

func (e RGListValueReplyValidationError) Code() int64 { return 10010001 }

func (e RGListValueReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e RGListValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RGListValueReplyValidationError) ErrorName() string { return "RGListValueReplyValidationError" }

// Error satisfies the builtin error interface
func (e RGListValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRGListValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RGListValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = RGListValueReplyValidationError{}

// Validate checks the field values on RGValues with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RGValues) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RGValues with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RGValuesMultiError, or nil
// if none found.
func (m *RGValues) ValidateAll() error {
	return m.validate(true)
}

func (m *RGValues) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Name

	// no validation rules for Value

	if len(errors) > 0 {
		return RGValuesMultiError(errors)
	}

	return nil
}

// RGValuesMultiError is an error wrapping multiple validation errors returned
// by RGValues.ValidateAll() if the designated constraints aren't met.
type RGValuesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RGValuesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RGValuesMultiError) AllErrors() []error { return m }

// RGValuesValidationError is the validation error returned by
// RGValues.Validate if the designated constraints aren't met.
type RGValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RGValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RGValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RGValuesValidationError) Cause() error { return e.cause }

func (e RGValuesValidationError) Code() int64 { return 10010001 }

func (e RGValuesValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e RGValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RGValuesValidationError) ErrorName() string { return "RGValuesValidationError" }

// Error satisfies the builtin error interface
func (e RGValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRGValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RGValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = RGValuesValidationError{}

// Validate checks the field values on RGDeleteReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RGDeleteReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RGDeleteReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RGDeleteReplyMultiError, or
// nil if none found.
func (m *RGDeleteReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RGDeleteReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return RGDeleteReplyMultiError(errors)
	}

	return nil
}

// RGDeleteReplyMultiError is an error wrapping multiple validation errors
// returned by RGDeleteReply.ValidateAll() if the designated constraints
// aren't met.
type RGDeleteReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RGDeleteReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RGDeleteReplyMultiError) AllErrors() []error { return m }

// RGDeleteReplyValidationError is the validation error returned by
// RGDeleteReply.Validate if the designated constraints aren't met.
type RGDeleteReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RGDeleteReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RGDeleteReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RGDeleteReplyValidationError) Cause() error { return e.cause }

func (e RGDeleteReplyValidationError) Code() int64 { return 10010001 }

func (e RGDeleteReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e RGDeleteReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RGDeleteReplyValidationError) ErrorName() string { return "RGDeleteReplyValidationError" }

// Error satisfies the builtin error interface
func (e RGDeleteReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRGDeleteReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RGDeleteReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = RGDeleteReplyValidationError{}

// Validate checks the field values on RGListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RGListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RGListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RGListReplyMultiError, or
// nil if none found.
func (m *RGListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RGListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return RGListReplyMultiError(errors)
	}

	return nil
}

// RGListReplyMultiError is an error wrapping multiple validation errors
// returned by RGListReply.ValidateAll() if the designated constraints aren't met.
type RGListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RGListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RGListReplyMultiError) AllErrors() []error { return m }

// RGListReplyValidationError is the validation error returned by
// RGListReply.Validate if the designated constraints aren't met.
type RGListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RGListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RGListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RGListReplyValidationError) Cause() error { return e.cause }

func (e RGListReplyValidationError) Code() int64 { return 10010001 }

func (e RGListReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e RGListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RGListReplyValidationError) ErrorName() string { return "RGListReplyValidationError" }

// Error satisfies the builtin error interface
func (e RGListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRGListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RGListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = RGListReplyValidationError{}

// Validate checks the field values on RGBatchQueryValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RGBatchQueryValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RGBatchQueryValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RGBatchQueryValueRequestMultiError, or nil if none found.
func (m *RGBatchQueryValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RGBatchQueryValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RGBatchQueryValueRequestValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RGBatchQueryValueRequestValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RGBatchQueryValueRequestValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RGBatchQueryValueRequestMultiError(errors)
	}

	return nil
}

// RGBatchQueryValueRequestMultiError is an error wrapping multiple validation
// errors returned by RGBatchQueryValueRequest.ValidateAll() if the designated
// constraints aren't met.
type RGBatchQueryValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RGBatchQueryValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RGBatchQueryValueRequestMultiError) AllErrors() []error { return m }

// RGBatchQueryValueRequestValidationError is the validation error returned by
// RGBatchQueryValueRequest.Validate if the designated constraints aren't met.
type RGBatchQueryValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RGBatchQueryValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RGBatchQueryValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RGBatchQueryValueRequestValidationError) Cause() error { return e.cause }

func (e RGBatchQueryValueRequestValidationError) Code() int64 { return 10010001 }

func (e RGBatchQueryValueRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e RGBatchQueryValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RGBatchQueryValueRequestValidationError) ErrorName() string {
	return "RGBatchQueryValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RGBatchQueryValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRGBatchQueryValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RGBatchQueryValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = RGBatchQueryValueRequestValidationError{}

// Validate checks the field values on RGBatchQueryValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RGBatchQueryValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RGBatchQueryValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RGBatchQueryValueReplyMultiError, or nil if none found.
func (m *RGBatchQueryValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RGBatchQueryValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RGBatchQueryValueReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RGBatchQueryValueReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RGBatchQueryValueReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RGBatchQueryValueReplyMultiError(errors)
	}

	return nil
}

// RGBatchQueryValueReplyMultiError is an error wrapping multiple validation
// errors returned by RGBatchQueryValueReply.ValidateAll() if the designated
// constraints aren't met.
type RGBatchQueryValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RGBatchQueryValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RGBatchQueryValueReplyMultiError) AllErrors() []error { return m }

// RGBatchQueryValueReplyValidationError is the validation error returned by
// RGBatchQueryValueReply.Validate if the designated constraints aren't met.
type RGBatchQueryValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RGBatchQueryValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RGBatchQueryValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RGBatchQueryValueReplyValidationError) Cause() error { return e.cause }

func (e RGBatchQueryValueReplyValidationError) Code() int64 { return 10010001 }

func (e RGBatchQueryValueReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e RGBatchQueryValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RGBatchQueryValueReplyValidationError) ErrorName() string {
	return "RGBatchQueryValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RGBatchQueryValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRGBatchQueryValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RGBatchQueryValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = RGBatchQueryValueReplyValidationError{}
