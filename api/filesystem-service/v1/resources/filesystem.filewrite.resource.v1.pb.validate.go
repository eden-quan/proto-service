// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/filesystem-service/v1/resources/filesystem.filewrite.resource.v1.proto

package filesystemv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FSWriteFileParamter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FSWriteFileParamter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FSWriteFileParamter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FSWriteFileParamterMultiError, or nil if none found.
func (m *FSWriteFileParamter) ValidateAll() error {
	return m.validate(true)
}

func (m *FSWriteFileParamter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Md5

	// no validation rules for NumberOfBinaryPakcet

	if len(errors) > 0 {
		return FSWriteFileParamterMultiError(errors)
	}

	return nil
}

// FSWriteFileParamterMultiError is an error wrapping multiple validation
// errors returned by FSWriteFileParamter.ValidateAll() if the designated
// constraints aren't met.
type FSWriteFileParamterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FSWriteFileParamterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FSWriteFileParamterMultiError) AllErrors() []error { return m }

// FSWriteFileParamterValidationError is the validation error returned by
// FSWriteFileParamter.Validate if the designated constraints aren't met.
type FSWriteFileParamterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSWriteFileParamterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSWriteFileParamterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSWriteFileParamterValidationError) Cause() error { return e.cause }

func (e FSWriteFileParamterValidationError) Code() int64 { return 10010001 }

func (e FSWriteFileParamterValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FSWriteFileParamterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSWriteFileParamterValidationError) ErrorName() string {
	return "FSWriteFileParamterValidationError"
}

// Error satisfies the builtin error interface
func (e FSWriteFileParamterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSWriteFileParamter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSWriteFileParamterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FSWriteFileParamterValidationError{}

// Validate checks the field values on FSWriteFileBinaryPacket with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FSWriteFileBinaryPacket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FSWriteFileBinaryPacket with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FSWriteFileBinaryPacketMultiError, or nil if none found.
func (m *FSWriteFileBinaryPacket) ValidateAll() error {
	return m.validate(true)
}

func (m *FSWriteFileBinaryPacket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Index

	// no validation rules for Binary

	if len(errors) > 0 {
		return FSWriteFileBinaryPacketMultiError(errors)
	}

	return nil
}

// FSWriteFileBinaryPacketMultiError is an error wrapping multiple validation
// errors returned by FSWriteFileBinaryPacket.ValidateAll() if the designated
// constraints aren't met.
type FSWriteFileBinaryPacketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FSWriteFileBinaryPacketMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FSWriteFileBinaryPacketMultiError) AllErrors() []error { return m }

// FSWriteFileBinaryPacketValidationError is the validation error returned by
// FSWriteFileBinaryPacket.Validate if the designated constraints aren't met.
type FSWriteFileBinaryPacketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSWriteFileBinaryPacketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSWriteFileBinaryPacketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSWriteFileBinaryPacketValidationError) Cause() error { return e.cause }

func (e FSWriteFileBinaryPacketValidationError) Code() int64 { return 10010001 }

func (e FSWriteFileBinaryPacketValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FSWriteFileBinaryPacketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSWriteFileBinaryPacketValidationError) ErrorName() string {
	return "FSWriteFileBinaryPacketValidationError"
}

// Error satisfies the builtin error interface
func (e FSWriteFileBinaryPacketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSWriteFileBinaryPacket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSWriteFileBinaryPacketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FSWriteFileBinaryPacketValidationError{}

// Validate checks the field values on FSWriteFileStream with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FSWriteFileStream) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FSWriteFileStream with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FSWriteFileStreamMultiError, or nil if none found.
func (m *FSWriteFileStream) ValidateAll() error {
	return m.validate(true)
}

func (m *FSWriteFileStream) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Stage

	// no validation rules for Packet

	if len(errors) > 0 {
		return FSWriteFileStreamMultiError(errors)
	}

	return nil
}

// FSWriteFileStreamMultiError is an error wrapping multiple validation errors
// returned by FSWriteFileStream.ValidateAll() if the designated constraints
// aren't met.
type FSWriteFileStreamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FSWriteFileStreamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FSWriteFileStreamMultiError) AllErrors() []error { return m }

// FSWriteFileStreamValidationError is the validation error returned by
// FSWriteFileStream.Validate if the designated constraints aren't met.
type FSWriteFileStreamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSWriteFileStreamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSWriteFileStreamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSWriteFileStreamValidationError) Cause() error { return e.cause }

func (e FSWriteFileStreamValidationError) Code() int64 { return 10010001 }

func (e FSWriteFileStreamValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FSWriteFileStreamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSWriteFileStreamValidationError) ErrorName() string {
	return "FSWriteFileStreamValidationError"
}

// Error satisfies the builtin error interface
func (e FSWriteFileStreamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSWriteFileStream.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSWriteFileStreamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FSWriteFileStreamValidationError{}

// Validate checks the field values on FSWriteFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FSWriteFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FSWriteFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FSWriteFileRequestMultiError, or nil if none found.
func (m *FSWriteFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FSWriteFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Md5

	// no validation rules for Binary

	if len(errors) > 0 {
		return FSWriteFileRequestMultiError(errors)
	}

	return nil
}

// FSWriteFileRequestMultiError is an error wrapping multiple validation errors
// returned by FSWriteFileRequest.ValidateAll() if the designated constraints
// aren't met.
type FSWriteFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FSWriteFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FSWriteFileRequestMultiError) AllErrors() []error { return m }

// FSWriteFileRequestValidationError is the validation error returned by
// FSWriteFileRequest.Validate if the designated constraints aren't met.
type FSWriteFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FSWriteFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FSWriteFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FSWriteFileRequestValidationError) Cause() error { return e.cause }

func (e FSWriteFileRequestValidationError) Code() int64 { return 10010001 }

func (e FSWriteFileRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e FSWriteFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FSWriteFileRequestValidationError) ErrorName() string {
	return "FSWriteFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FSWriteFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFSWriteFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FSWriteFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = FSWriteFileRequestValidationError{}
