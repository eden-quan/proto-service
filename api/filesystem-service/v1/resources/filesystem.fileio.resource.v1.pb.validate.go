// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/filesystem-service/v1/resources/filesystem.fileio.resource.v1.proto

package filesystemv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	filesystemerrorv1 "gitlab.lainuoniao.cn/eden-quan/proto-service/api/filesystem-service/v1/errors"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = filesystemerrorv1.FILEIO_ERROR(0)
)

// Validate checks the field values on IOFSFileUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IOFSFileUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IOFSFileUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IOFSFileUrlRequestMultiError, or nil if none found.
func (m *IOFSFileUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IOFSFileUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Md5

	// no validation rules for Size

	// no validation rules for PublicRead

	// no validation rules for Internal

	// no validation rules for Filename

	if len(errors) > 0 {
		return IOFSFileUrlRequestMultiError(errors)
	}

	return nil
}

// IOFSFileUrlRequestMultiError is an error wrapping multiple validation errors
// returned by IOFSFileUrlRequest.ValidateAll() if the designated constraints
// aren't met.
type IOFSFileUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IOFSFileUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IOFSFileUrlRequestMultiError) AllErrors() []error { return m }

// IOFSFileUrlRequestValidationError is the validation error returned by
// IOFSFileUrlRequest.Validate if the designated constraints aren't met.
type IOFSFileUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IOFSFileUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IOFSFileUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IOFSFileUrlRequestValidationError) Cause() error { return e.cause }

func (e IOFSFileUrlRequestValidationError) Code() int64 { return 10010001 }

func (e IOFSFileUrlRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e IOFSFileUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IOFSFileUrlRequestValidationError) ErrorName() string {
	return "IOFSFileUrlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IOFSFileUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIOFSFileUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IOFSFileUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = IOFSFileUrlRequestValidationError{}

// Validate checks the field values on IOFSFileUrlReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IOFSFileUrlReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IOFSFileUrlReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IOFSFileUrlReplyMultiError, or nil if none found.
func (m *IOFSFileUrlReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IOFSFileUrlReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Url

	if len(errors) > 0 {
		return IOFSFileUrlReplyMultiError(errors)
	}

	return nil
}

// IOFSFileUrlReplyMultiError is an error wrapping multiple validation errors
// returned by IOFSFileUrlReply.ValidateAll() if the designated constraints
// aren't met.
type IOFSFileUrlReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IOFSFileUrlReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IOFSFileUrlReplyMultiError) AllErrors() []error { return m }

// IOFSFileUrlReplyValidationError is the validation error returned by
// IOFSFileUrlReply.Validate if the designated constraints aren't met.
type IOFSFileUrlReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IOFSFileUrlReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IOFSFileUrlReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IOFSFileUrlReplyValidationError) Cause() error { return e.cause }

func (e IOFSFileUrlReplyValidationError) Code() int64 { return 10010001 }

func (e IOFSFileUrlReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e IOFSFileUrlReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IOFSFileUrlReplyValidationError) ErrorName() string { return "IOFSFileUrlReplyValidationError" }

// Error satisfies the builtin error interface
func (e IOFSFileUrlReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIOFSFileUrlReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IOFSFileUrlReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = IOFSFileUrlReplyValidationError{}

// Validate checks the field values on IOBatchGetDownloadUrlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IOBatchGetDownloadUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IOBatchGetDownloadUrlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IOBatchGetDownloadUrlRequestMultiError, or nil if none found.
func (m *IOBatchGetDownloadUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IOBatchGetDownloadUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPaths() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IOBatchGetDownloadUrlRequestValidationError{
						field:  fmt.Sprintf("Paths[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IOBatchGetDownloadUrlRequestValidationError{
						field:  fmt.Sprintf("Paths[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IOBatchGetDownloadUrlRequestValidationError{
					field:  fmt.Sprintf("Paths[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IOBatchGetDownloadUrlRequestMultiError(errors)
	}

	return nil
}

// IOBatchGetDownloadUrlRequestMultiError is an error wrapping multiple
// validation errors returned by IOBatchGetDownloadUrlRequest.ValidateAll() if
// the designated constraints aren't met.
type IOBatchGetDownloadUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IOBatchGetDownloadUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IOBatchGetDownloadUrlRequestMultiError) AllErrors() []error { return m }

// IOBatchGetDownloadUrlRequestValidationError is the validation error returned
// by IOBatchGetDownloadUrlRequest.Validate if the designated constraints
// aren't met.
type IOBatchGetDownloadUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IOBatchGetDownloadUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IOBatchGetDownloadUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IOBatchGetDownloadUrlRequestValidationError) Cause() error { return e.cause }

func (e IOBatchGetDownloadUrlRequestValidationError) Code() int64 { return 10010001 }

func (e IOBatchGetDownloadUrlRequestValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e IOBatchGetDownloadUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IOBatchGetDownloadUrlRequestValidationError) ErrorName() string {
	return "IOBatchGetDownloadUrlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IOBatchGetDownloadUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIOBatchGetDownloadUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IOBatchGetDownloadUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = IOBatchGetDownloadUrlRequestValidationError{}

// Validate checks the field values on IOUrlInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IOUrlInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IOUrlInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IOUrlInfoMultiError, or nil
// if none found.
func (m *IOUrlInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *IOUrlInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Md5

	// no validation rules for Url

	if len(errors) > 0 {
		return IOUrlInfoMultiError(errors)
	}

	return nil
}

// IOUrlInfoMultiError is an error wrapping multiple validation errors returned
// by IOUrlInfo.ValidateAll() if the designated constraints aren't met.
type IOUrlInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IOUrlInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IOUrlInfoMultiError) AllErrors() []error { return m }

// IOUrlInfoValidationError is the validation error returned by
// IOUrlInfo.Validate if the designated constraints aren't met.
type IOUrlInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IOUrlInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IOUrlInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IOUrlInfoValidationError) Cause() error { return e.cause }

func (e IOUrlInfoValidationError) Code() int64 { return 10010001 }

func (e IOUrlInfoValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e IOUrlInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IOUrlInfoValidationError) ErrorName() string { return "IOUrlInfoValidationError" }

// Error satisfies the builtin error interface
func (e IOUrlInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIOUrlInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IOUrlInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = IOUrlInfoValidationError{}

// Validate checks the field values on IOBatchGetDownloadUrlReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IOBatchGetDownloadUrlReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IOBatchGetDownloadUrlReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IOBatchGetDownloadUrlReplyMultiError, or nil if none found.
func (m *IOBatchGetDownloadUrlReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IOBatchGetDownloadUrlReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IOBatchGetDownloadUrlReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IOBatchGetDownloadUrlReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IOBatchGetDownloadUrlReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IOBatchGetDownloadUrlReplyMultiError(errors)
	}

	return nil
}

// IOBatchGetDownloadUrlReplyMultiError is an error wrapping multiple
// validation errors returned by IOBatchGetDownloadUrlReply.ValidateAll() if
// the designated constraints aren't met.
type IOBatchGetDownloadUrlReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IOBatchGetDownloadUrlReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IOBatchGetDownloadUrlReplyMultiError) AllErrors() []error { return m }

// IOBatchGetDownloadUrlReplyValidationError is the validation error returned
// by IOBatchGetDownloadUrlReply.Validate if the designated constraints aren't met.
type IOBatchGetDownloadUrlReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IOBatchGetDownloadUrlReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IOBatchGetDownloadUrlReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IOBatchGetDownloadUrlReplyValidationError) Cause() error { return e.cause }

func (e IOBatchGetDownloadUrlReplyValidationError) Code() int64 { return 10010001 }

func (e IOBatchGetDownloadUrlReplyValidationError) HttpCode() int64 { return 400 }

// Key function returns key value.
func (e IOBatchGetDownloadUrlReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IOBatchGetDownloadUrlReplyValidationError) ErrorName() string {
	return "IOBatchGetDownloadUrlReplyValidationError"
}

// Error satisfies the builtin error interface
func (e IOBatchGetDownloadUrlReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIOBatchGetDownloadUrlReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IOBatchGetDownloadUrlReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Code() int64
	HttpCode() int64
	Cause() error
	ErrorName() string
} = IOBatchGetDownloadUrlReplyValidationError{}
