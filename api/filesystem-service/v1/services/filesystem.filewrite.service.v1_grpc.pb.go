// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.1
// - protoc             v5.26.1
// source: api/filesystem-service/v1/services/filesystem.filewrite.service.v1.proto

package filesystemservicev1

import (
	context "context"
	fmt "fmt"

	client "gitlab.lainuoniao.cn/eden-quan/go-biz-kit/client"
	def "gitlab.lainuoniao.cn/eden-quan/go-biz-kit/config/def"
	resources "gitlab.lainuoniao.cn/eden-quan/proto-service/api/filesystem-service/v1/resources"
	fx "go.uber.org/fx"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7
const _ = fx.Version

var _ = new(fmt.Stringer)
var _ = new(def.Server)
var _ = new(client.RegisterGRPCClientFactoryType)

const (
	FileWriteServiceV1_WriteFileStream_FullMethodName = "/api.filesystem.service.filewriteservicev1.FileWriteServiceV1/WriteFileStream"
	FileWriteServiceV1_WriteFile_FullMethodName       = "/api.filesystem.service.filewriteservicev1.FileWriteServiceV1/WriteFile"
)

// FileWriteServiceV1Client is the client API for FileWriteServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileWriteServiceV1Client interface {
	WriteFileStream(ctx context.Context, opts ...grpc.CallOption) (FileWriteServiceV1_WriteFileStreamClient, error)
	WriteFile(ctx context.Context, in *resources.FSWriteFileRequest, opts ...grpc.CallOption) (*resources.FSCommonReply, error)
	RegisterNameForDiscover() string
}

type fileWriteServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func (c *fileWriteServiceV1Client) RegisterNameForDiscover() string {
	return "/filewrite-service/v1"
}

func newFileWriteServiceV1Client(cc grpc.ClientConnInterface) FileWriteServiceV1Client {
	return &fileWriteServiceV1Client{cc}
}

func registerFileWriteServiceV1ClientGRPCNameProvider() []string {
	return []string{"/filewrite-service/v1", "grpc"}
}

// RegisterFileWriteServiceV1ClientGRPCProvider is the provider for injection framework
// creator is the factory function which use to create the FileWriteServiceV1Client instance/implement
// the creator function receive dependency provided by fx to create ClientInterface,
// and returns the new dependency can use by others functions
func RegisterFileWriteServiceV1ClientGRPCProvider(creator interface{}) []interface{} {
	return []interface{}{
		fx.Annotate(
			newFileWriteServiceV1Client,
			fx.As(new(FileWriteServiceV1Client)),
			fx.ParamTags(`name:"/filewrite-service/v1/grpc/fileWriteServiceV1"`),
		),
		fx.Annotate(
			creator,
			fx.As(new(grpc.ClientConnInterface)),
			fx.ParamTags(`name:"/filewrite-service/v1/grpc/name/fileWriteServiceV1"`),
			fx.ResultTags(`name:"/filewrite-service/v1/grpc/fileWriteServiceV1"`),
		),
		fx.Annotate(
			registerFileWriteServiceV1ClientGRPCNameProvider,
			fx.ResultTags(`name:"/filewrite-service/v1/grpc/name/fileWriteServiceV1"`),
		),
	}
}

type FileWriteServiceV1ClientGRPCFactory interface {
	New(conf *def.Server) (FileWriteServiceV1Client, error)
}

type fileWriteServiceV1ClientGRPCFactoryImpl struct {
	factory client.RegisterGRPCClientFactoryType
}

func (p *fileWriteServiceV1ClientGRPCFactoryImpl) New(conf *def.Server) (FileWriteServiceV1Client, error) {
	cc, err := p.factory(conf)
	if err != nil {
		return nil, fmt.Errorf("create FileWriteServiceV1Client failed cause %s", err)
	}
	return &fileWriteServiceV1Client{cc: cc}, nil
}

func RegisterFileWriteServiceV1ClientGRPCFactoryProvider(factory client.RegisterGRPCClientFactoryType) FileWriteServiceV1ClientGRPCFactory {
	return &fileWriteServiceV1ClientGRPCFactoryImpl{factory: factory}
}

func (c *fileWriteServiceV1Client) WriteFileStream(ctx context.Context, opts ...grpc.CallOption) (FileWriteServiceV1_WriteFileStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileWriteServiceV1_ServiceDesc.Streams[0], FileWriteServiceV1_WriteFileStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileWriteServiceV1WriteFileStreamClient{stream}
	return x, nil
}

type FileWriteServiceV1_WriteFileStreamClient interface {
	Send(*resources.FSWriteFileStream) error
	CloseAndRecv() (*resources.FSCommonReply, error)
	grpc.ClientStream
}

type fileWriteServiceV1WriteFileStreamClient struct {
	grpc.ClientStream
}

func (x *fileWriteServiceV1WriteFileStreamClient) Send(m *resources.FSWriteFileStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileWriteServiceV1WriteFileStreamClient) CloseAndRecv() (*resources.FSCommonReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(resources.FSCommonReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileWriteServiceV1Client) WriteFile(ctx context.Context, in *resources.FSWriteFileRequest, opts ...grpc.CallOption) (*resources.FSCommonReply, error) {
	out := new(resources.FSCommonReply)
	err := c.cc.Invoke(ctx, FileWriteServiceV1_WriteFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileWriteServiceV1Server is the server API for FileWriteServiceV1 service.
// All implementations must embed UnimplementedFileWriteServiceV1Server
// for forward compatibility
type FileWriteServiceV1Server interface {
	WriteFileStream(FileWriteServiceV1_WriteFileStreamServer) error
	WriteFile(context.Context, *resources.FSWriteFileRequest) (*resources.FSCommonReply, error)
	mustEmbedUnimplementedFileWriteServiceV1Server()
}

// Generate Injection
type registerFileWriteServiceV1ServerGRPCResult struct{}

func (*registerFileWriteServiceV1ServerGRPCResult) String() string {
	return "FileWriteServiceV1ServerGRPCServer"
}

func RegisterFileWriteServiceV1ServerGRPCProvider(newer interface{}) []interface{} {
	return []interface{}{
		// For provide dependency
		fx.Annotate(
			newer,
			fx.As(new(FileWriteServiceV1Server)),
		),
		// For create instance
		fx.Annotate(
			registerFileWriteServiceV1ServerProviderImpl,
			fx.As(new(fmt.Stringer)),
			fx.ResultTags(`group:"grpc_register"`),
		),
	}
}

// registerFileWriteServiceV1ServerProviderImpl use to trigger register
func registerFileWriteServiceV1ServerProviderImpl(s grpc.ServiceRegistrar, srv FileWriteServiceV1Server) *registerFileWriteServiceV1ServerGRPCResult {
	registerFileWriteServiceV1Server(s, srv)
	return &registerFileWriteServiceV1ServerGRPCResult{}
}

// UnimplementedFileWriteServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedFileWriteServiceV1Server struct {
}

func (UnimplementedFileWriteServiceV1Server) WriteFileStream(FileWriteServiceV1_WriteFileStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteFileStream not implemented")
}
func (UnimplementedFileWriteServiceV1Server) WriteFile(context.Context, *resources.FSWriteFileRequest) (*resources.FSCommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (UnimplementedFileWriteServiceV1Server) mustEmbedUnimplementedFileWriteServiceV1Server() {}

// UnsafeFileWriteServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileWriteServiceV1Server will
// result in compilation errors.
type UnsafeFileWriteServiceV1Server interface {
	mustEmbedUnimplementedFileWriteServiceV1Server()
}

func registerFileWriteServiceV1Server(s grpc.ServiceRegistrar, srv FileWriteServiceV1Server) {
	s.RegisterService(&FileWriteServiceV1_ServiceDesc, srv)
}

func _FileWriteServiceV1_WriteFileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileWriteServiceV1Server).WriteFileStream(&fileWriteServiceV1WriteFileStreamServer{stream})
}

type FileWriteServiceV1_WriteFileStreamServer interface {
	SendAndClose(*resources.FSCommonReply) error
	Recv() (*resources.FSWriteFileStream, error)
	grpc.ServerStream
}

type fileWriteServiceV1WriteFileStreamServer struct {
	grpc.ServerStream
}

func (x *fileWriteServiceV1WriteFileStreamServer) SendAndClose(m *resources.FSCommonReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileWriteServiceV1WriteFileStreamServer) Recv() (*resources.FSWriteFileStream, error) {
	m := new(resources.FSWriteFileStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileWriteServiceV1_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.FSWriteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileWriteServiceV1Server).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileWriteServiceV1_WriteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileWriteServiceV1Server).WriteFile(ctx, req.(*resources.FSWriteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileWriteServiceV1_ServiceDesc is the grpc.ServiceDesc for FileWriteServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileWriteServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.filesystem.service.filewriteservicev1.FileWriteServiceV1",
	HandlerType: (*FileWriteServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteFile",
			Handler:    _FileWriteServiceV1_WriteFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WriteFileStream",
			Handler:       _FileWriteServiceV1_WriteFileStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/filesystem-service/v1/services/filesystem.filewrite.service.v1.proto",
}
