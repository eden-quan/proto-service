// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.1
// - protoc             v5.26.1
// source: api/filesystem-service/v1/services/filesystem.fileio.service.v1.proto

package filesystemservicev1

import (
	context "context"
	fmt "fmt"

	client "gitlab.lainuoniao.cn/eden-quan/go-biz-kit/client"
	def "gitlab.lainuoniao.cn/eden-quan/go-biz-kit/config/def"
	resources "gitlab.lainuoniao.cn/eden-quan/proto-service/api/filesystem-service/v1/resources"
	fx "go.uber.org/fx"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7
const _ = fx.Version

var _ = new(fmt.Stringer)
var _ = new(def.Server)
var _ = new(client.RegisterGRPCClientFactoryType)

const (
	FileIOApiV1_GetDownloadUrl_FullMethodName         = "/api.filesystem.service.fileioservicev1.FileIOApiV1/GetDownloadUrl"
	FileIOApiV1_GetInternalDownloadUrl_FullMethodName = "/api.filesystem.service.fileioservicev1.FileIOApiV1/GetInternalDownloadUrl"
	FileIOApiV1_GetUploadUrl_FullMethodName           = "/api.filesystem.service.fileioservicev1.FileIOApiV1/GetUploadUrl"
	FileIOApiV1_GetInternalUploadUrl_FullMethodName   = "/api.filesystem.service.fileioservicev1.FileIOApiV1/GetInternalUploadUrl"
	FileIOApiV1_BatchGetDownloadUrl_FullMethodName    = "/api.filesystem.service.fileioservicev1.FileIOApiV1/BatchGetDownloadUrl"
)

// FileIOApiV1Client is the client API for FileIOApiV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileIOApiV1Client interface {
	GetDownloadUrl(ctx context.Context, in *resources.IOFSFileUrlRequest, opts ...grpc.CallOption) (*resources.IOFSFileUrlReply, error)
	GetInternalDownloadUrl(ctx context.Context, in *resources.IOFSFileUrlRequest, opts ...grpc.CallOption) (*resources.IOFSFileUrlReply, error)
	GetUploadUrl(ctx context.Context, in *resources.IOFSFileUrlRequest, opts ...grpc.CallOption) (*resources.IOFSFileUrlReply, error)
	GetInternalUploadUrl(ctx context.Context, in *resources.IOFSFileUrlRequest, opts ...grpc.CallOption) (*resources.IOFSFileUrlReply, error)
	BatchGetDownloadUrl(ctx context.Context, in *resources.IOBatchGetDownloadUrlRequest, opts ...grpc.CallOption) (*resources.IOBatchGetDownloadUrlReply, error)
	RegisterNameForDiscover() string
}

type fileIOApiV1Client struct {
	cc grpc.ClientConnInterface
}

func (c *fileIOApiV1Client) RegisterNameForDiscover() string {
	return "/fileio-service/v1"
}

func newFileIOApiV1Client(cc grpc.ClientConnInterface) FileIOApiV1Client {
	return &fileIOApiV1Client{cc}
}

func registerFileIOApiV1ClientGRPCNameProvider() []string {
	return []string{"/fileio-service/v1", "grpc"}
}

// RegisterFileIOApiV1ClientGRPCProvider is the provider for injection framework
// creator is the factory function which use to create the FileIOApiV1Client instance/implement
// the creator function receive dependency provided by fx to create ClientInterface,
// and returns the new dependency can use by others functions
func RegisterFileIOApiV1ClientGRPCProvider(creator interface{}) []interface{} {
	return []interface{}{
		fx.Annotate(
			newFileIOApiV1Client,
			fx.As(new(FileIOApiV1Client)),
			fx.ParamTags(`name:"/fileio-service/v1/grpc/fileIOApiV1"`),
		),
		fx.Annotate(
			creator,
			fx.As(new(grpc.ClientConnInterface)),
			fx.ParamTags(`name:"/fileio-service/v1/grpc/name/fileIOApiV1"`),
			fx.ResultTags(`name:"/fileio-service/v1/grpc/fileIOApiV1"`),
		),
		fx.Annotate(
			registerFileIOApiV1ClientGRPCNameProvider,
			fx.ResultTags(`name:"/fileio-service/v1/grpc/name/fileIOApiV1"`),
		),
	}
}

type FileIOApiV1ClientGRPCFactory interface {
	New(conf *def.Server) (FileIOApiV1Client, error)
}

type fileIOApiV1ClientGRPCFactoryImpl struct {
	factory client.RegisterGRPCClientFactoryType
}

func (p *fileIOApiV1ClientGRPCFactoryImpl) New(conf *def.Server) (FileIOApiV1Client, error) {
	cc, err := p.factory(conf)
	if err != nil {
		return nil, fmt.Errorf("create FileIOApiV1Client failed cause %s", err)
	}
	return &fileIOApiV1Client{cc: cc}, nil
}

func RegisterFileIOApiV1ClientGRPCFactoryProvider(factory client.RegisterGRPCClientFactoryType) FileIOApiV1ClientGRPCFactory {
	return &fileIOApiV1ClientGRPCFactoryImpl{factory: factory}
}

func (c *fileIOApiV1Client) GetDownloadUrl(ctx context.Context, in *resources.IOFSFileUrlRequest, opts ...grpc.CallOption) (*resources.IOFSFileUrlReply, error) {
	out := new(resources.IOFSFileUrlReply)
	err := c.cc.Invoke(ctx, FileIOApiV1_GetDownloadUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOApiV1Client) GetInternalDownloadUrl(ctx context.Context, in *resources.IOFSFileUrlRequest, opts ...grpc.CallOption) (*resources.IOFSFileUrlReply, error) {
	out := new(resources.IOFSFileUrlReply)
	err := c.cc.Invoke(ctx, FileIOApiV1_GetInternalDownloadUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOApiV1Client) GetUploadUrl(ctx context.Context, in *resources.IOFSFileUrlRequest, opts ...grpc.CallOption) (*resources.IOFSFileUrlReply, error) {
	out := new(resources.IOFSFileUrlReply)
	err := c.cc.Invoke(ctx, FileIOApiV1_GetUploadUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOApiV1Client) GetInternalUploadUrl(ctx context.Context, in *resources.IOFSFileUrlRequest, opts ...grpc.CallOption) (*resources.IOFSFileUrlReply, error) {
	out := new(resources.IOFSFileUrlReply)
	err := c.cc.Invoke(ctx, FileIOApiV1_GetInternalUploadUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOApiV1Client) BatchGetDownloadUrl(ctx context.Context, in *resources.IOBatchGetDownloadUrlRequest, opts ...grpc.CallOption) (*resources.IOBatchGetDownloadUrlReply, error) {
	out := new(resources.IOBatchGetDownloadUrlReply)
	err := c.cc.Invoke(ctx, FileIOApiV1_BatchGetDownloadUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileIOApiV1Server is the server API for FileIOApiV1 service.
// All implementations must embed UnimplementedFileIOApiV1Server
// for forward compatibility
type FileIOApiV1Server interface {
	GetDownloadUrl(context.Context, *resources.IOFSFileUrlRequest) (*resources.IOFSFileUrlReply, error)
	GetInternalDownloadUrl(context.Context, *resources.IOFSFileUrlRequest) (*resources.IOFSFileUrlReply, error)
	GetUploadUrl(context.Context, *resources.IOFSFileUrlRequest) (*resources.IOFSFileUrlReply, error)
	GetInternalUploadUrl(context.Context, *resources.IOFSFileUrlRequest) (*resources.IOFSFileUrlReply, error)
	BatchGetDownloadUrl(context.Context, *resources.IOBatchGetDownloadUrlRequest) (*resources.IOBatchGetDownloadUrlReply, error)
	mustEmbedUnimplementedFileIOApiV1Server()
}

// Generate Injection
type registerFileIOApiV1ServerGRPCResult struct{}

func (*registerFileIOApiV1ServerGRPCResult) String() string {
	return "FileIOApiV1ServerGRPCServer"
}

func RegisterFileIOApiV1ServerGRPCProvider(newer interface{}) []interface{} {
	return []interface{}{
		// For provide dependency
		fx.Annotate(
			newer,
			fx.As(new(FileIOApiV1Server)),
		),
		// For create instance
		fx.Annotate(
			registerFileIOApiV1ServerProviderImpl,
			fx.As(new(fmt.Stringer)),
			fx.ResultTags(`group:"grpc_register"`),
		),
	}
}

// registerFileIOApiV1ServerProviderImpl use to trigger register
func registerFileIOApiV1ServerProviderImpl(s grpc.ServiceRegistrar, srv FileIOApiV1Server) *registerFileIOApiV1ServerGRPCResult {
	registerFileIOApiV1Server(s, srv)
	return &registerFileIOApiV1ServerGRPCResult{}
}

// UnimplementedFileIOApiV1Server must be embedded to have forward compatible implementations.
type UnimplementedFileIOApiV1Server struct {
}

func (UnimplementedFileIOApiV1Server) GetDownloadUrl(context.Context, *resources.IOFSFileUrlRequest) (*resources.IOFSFileUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadUrl not implemented")
}
func (UnimplementedFileIOApiV1Server) GetInternalDownloadUrl(context.Context, *resources.IOFSFileUrlRequest) (*resources.IOFSFileUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInternalDownloadUrl not implemented")
}
func (UnimplementedFileIOApiV1Server) GetUploadUrl(context.Context, *resources.IOFSFileUrlRequest) (*resources.IOFSFileUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadUrl not implemented")
}
func (UnimplementedFileIOApiV1Server) GetInternalUploadUrl(context.Context, *resources.IOFSFileUrlRequest) (*resources.IOFSFileUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInternalUploadUrl not implemented")
}
func (UnimplementedFileIOApiV1Server) BatchGetDownloadUrl(context.Context, *resources.IOBatchGetDownloadUrlRequest) (*resources.IOBatchGetDownloadUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetDownloadUrl not implemented")
}
func (UnimplementedFileIOApiV1Server) mustEmbedUnimplementedFileIOApiV1Server() {}

// UnsafeFileIOApiV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileIOApiV1Server will
// result in compilation errors.
type UnsafeFileIOApiV1Server interface {
	mustEmbedUnimplementedFileIOApiV1Server()
}

func registerFileIOApiV1Server(s grpc.ServiceRegistrar, srv FileIOApiV1Server) {
	s.RegisterService(&FileIOApiV1_ServiceDesc, srv)
}

func _FileIOApiV1_GetDownloadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.IOFSFileUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOApiV1Server).GetDownloadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileIOApiV1_GetDownloadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOApiV1Server).GetDownloadUrl(ctx, req.(*resources.IOFSFileUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOApiV1_GetInternalDownloadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.IOFSFileUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOApiV1Server).GetInternalDownloadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileIOApiV1_GetInternalDownloadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOApiV1Server).GetInternalDownloadUrl(ctx, req.(*resources.IOFSFileUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOApiV1_GetUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.IOFSFileUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOApiV1Server).GetUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileIOApiV1_GetUploadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOApiV1Server).GetUploadUrl(ctx, req.(*resources.IOFSFileUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOApiV1_GetInternalUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.IOFSFileUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOApiV1Server).GetInternalUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileIOApiV1_GetInternalUploadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOApiV1Server).GetInternalUploadUrl(ctx, req.(*resources.IOFSFileUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOApiV1_BatchGetDownloadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.IOBatchGetDownloadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOApiV1Server).BatchGetDownloadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileIOApiV1_BatchGetDownloadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOApiV1Server).BatchGetDownloadUrl(ctx, req.(*resources.IOBatchGetDownloadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileIOApiV1_ServiceDesc is the grpc.ServiceDesc for FileIOApiV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileIOApiV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.filesystem.service.fileioservicev1.FileIOApiV1",
	HandlerType: (*FileIOApiV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDownloadUrl",
			Handler:    _FileIOApiV1_GetDownloadUrl_Handler,
		},
		{
			MethodName: "GetInternalDownloadUrl",
			Handler:    _FileIOApiV1_GetInternalDownloadUrl_Handler,
		},
		{
			MethodName: "GetUploadUrl",
			Handler:    _FileIOApiV1_GetUploadUrl_Handler,
		},
		{
			MethodName: "GetInternalUploadUrl",
			Handler:    _FileIOApiV1_GetInternalUploadUrl_Handler,
		},
		{
			MethodName: "BatchGetDownloadUrl",
			Handler:    _FileIOApiV1_BatchGetDownloadUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/filesystem-service/v1/services/filesystem.fileio.service.v1.proto",
}
