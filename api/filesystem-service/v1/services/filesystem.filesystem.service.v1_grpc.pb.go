// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.1
// - protoc             v5.26.1
// source: api/filesystem-service/v1/services/filesystem.filesystem.service.v1.proto

package filesystemservicev1

import (
	context "context"
	fmt "fmt"

	client "gitlab.lainuoniao.cn/eden-quan/go-biz-kit/client"
	def "gitlab.lainuoniao.cn/eden-quan/go-biz-kit/config/def"
	resources "gitlab.lainuoniao.cn/eden-quan/proto-service/api/filesystem-service/v1/resources"
	fx "go.uber.org/fx"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7
const _ = fx.Version

var _ = new(fmt.Stringer)
var _ = new(def.Server)
var _ = new(client.RegisterGRPCClientFactoryType)

const (
	FileSystemServiceV1_CreateFSDirectory_FullMethodName = "/api.filesystem.service.filesystemservicev1.FileSystemServiceV1/CreateFSDirectory"
	FileSystemServiceV1_ListEntries_FullMethodName       = "/api.filesystem.service.filesystemservicev1.FileSystemServiceV1/ListEntries"
	FileSystemServiceV1_CreateFSFile_FullMethodName      = "/api.filesystem.service.filesystemservicev1.FileSystemServiceV1/CreateFSFile"
	FileSystemServiceV1_ObjectCopy_FullMethodName        = "/api.filesystem.service.filesystemservicev1.FileSystemServiceV1/ObjectCopy"
	FileSystemServiceV1_ObjectRemove_FullMethodName      = "/api.filesystem.service.filesystemservicev1.FileSystemServiceV1/ObjectRemove"
	FileSystemServiceV1_ObjectRename_FullMethodName      = "/api.filesystem.service.filesystemservicev1.FileSystemServiceV1/ObjectRename"
	FileSystemServiceV1_ObjectExist_FullMethodName       = "/api.filesystem.service.filesystemservicev1.FileSystemServiceV1/ObjectExist"
	FileSystemServiceV1_ObjectEquivalent_FullMethodName  = "/api.filesystem.service.filesystemservicev1.FileSystemServiceV1/ObjectEquivalent"
	FileSystemServiceV1_ObjectSize_FullMethodName        = "/api.filesystem.service.filesystemservicev1.FileSystemServiceV1/ObjectSize"
	FileSystemServiceV1_GetFileAttribute_FullMethodName  = "/api.filesystem.service.filesystemservicev1.FileSystemServiceV1/GetFileAttribute"
	FileSystemServiceV1_BatchGetSize_FullMethodName      = "/api.filesystem.service.filesystemservicev1.FileSystemServiceV1/BatchGetSize"
	FileSystemServiceV1_BatchObjectRemove_FullMethodName = "/api.filesystem.service.filesystemservicev1.FileSystemServiceV1/BatchObjectRemove"
)

// FileSystemServiceV1Client is the client API for FileSystemServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSystemServiceV1Client interface {
	CreateFSDirectory(ctx context.Context, in *resources.FSCommonRequest, opts ...grpc.CallOption) (*resources.FSCommonReply, error)
	ListEntries(ctx context.Context, in *resources.FSCommonRequest, opts ...grpc.CallOption) (*resources.FSListEntriesReply, error)
	CreateFSFile(ctx context.Context, in *resources.FSCreateFileRequest, opts ...grpc.CallOption) (*resources.FSCommonReply, error)
	ObjectCopy(ctx context.Context, in *resources.FSObjectCopyRequest, opts ...grpc.CallOption) (*resources.FSCommonReply, error)
	ObjectRemove(ctx context.Context, in *resources.FSCommonRequest, opts ...grpc.CallOption) (*resources.FSCommonReply, error)
	ObjectRename(ctx context.Context, in *resources.FSObjectRenameRequest, opts ...grpc.CallOption) (*resources.FSCommonReply, error)
	ObjectExist(ctx context.Context, in *resources.FSCommonRequest, opts ...grpc.CallOption) (*resources.FSObjectExistReply, error)
	ObjectEquivalent(ctx context.Context, in *resources.FSObjectEquivalentRequest, opts ...grpc.CallOption) (*resources.FSObjectEquivalentReply, error)
	ObjectSize(ctx context.Context, in *resources.FSObjectSizeRequest, opts ...grpc.CallOption) (*resources.FSObjectSizeReply, error)
	GetFileAttribute(ctx context.Context, in *resources.FSCommonRequest, opts ...grpc.CallOption) (*resources.FSFileAttributeReply, error)
	BatchGetSize(ctx context.Context, in *resources.FSBatchGetSizeRequest, opts ...grpc.CallOption) (*resources.FSBatchGetSizeReply, error)
	BatchObjectRemove(ctx context.Context, in *resources.FSBatchObjectRemoveRequest, opts ...grpc.CallOption) (*resources.FSCommonReply, error)
	RegisterNameForDiscover() string
}

type fileSystemServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func (c *fileSystemServiceV1Client) RegisterNameForDiscover() string {
	return "/filesystem-service/v1"
}

func newFileSystemServiceV1Client(cc grpc.ClientConnInterface) FileSystemServiceV1Client {
	return &fileSystemServiceV1Client{cc}
}

func registerFileSystemServiceV1ClientGRPCNameProvider() []string {
	return []string{"/filesystem-service/v1", "grpc"}
}

// RegisterFileSystemServiceV1ClientGRPCProvider is the provider for injection framework
// creator is the factory function which use to create the FileSystemServiceV1Client instance/implement
// the creator function receive dependency provided by fx to create ClientInterface,
// and returns the new dependency can use by others functions
func RegisterFileSystemServiceV1ClientGRPCProvider(creator interface{}) []interface{} {
	return []interface{}{
		fx.Annotate(
			newFileSystemServiceV1Client,
			fx.As(new(FileSystemServiceV1Client)),
			fx.ParamTags(`name:"/filesystem-service/v1/grpc/fileSystemServiceV1"`),
		),
		fx.Annotate(
			creator,
			fx.As(new(grpc.ClientConnInterface)),
			fx.ParamTags(`name:"/filesystem-service/v1/grpc/name/fileSystemServiceV1"`),
			fx.ResultTags(`name:"/filesystem-service/v1/grpc/fileSystemServiceV1"`),
		),
		fx.Annotate(
			registerFileSystemServiceV1ClientGRPCNameProvider,
			fx.ResultTags(`name:"/filesystem-service/v1/grpc/name/fileSystemServiceV1"`),
		),
	}
}

type FileSystemServiceV1ClientGRPCFactory interface {
	New(conf *def.Server) (FileSystemServiceV1Client, error)
}

type fileSystemServiceV1ClientGRPCFactoryImpl struct {
	factory client.RegisterGRPCClientFactoryType
}

func (p *fileSystemServiceV1ClientGRPCFactoryImpl) New(conf *def.Server) (FileSystemServiceV1Client, error) {
	cc, err := p.factory(conf)
	if err != nil {
		return nil, fmt.Errorf("create FileSystemServiceV1Client failed cause %s", err)
	}
	return &fileSystemServiceV1Client{cc: cc}, nil
}

func RegisterFileSystemServiceV1ClientGRPCFactoryProvider(factory client.RegisterGRPCClientFactoryType) FileSystemServiceV1ClientGRPCFactory {
	return &fileSystemServiceV1ClientGRPCFactoryImpl{factory: factory}
}

func (c *fileSystemServiceV1Client) CreateFSDirectory(ctx context.Context, in *resources.FSCommonRequest, opts ...grpc.CallOption) (*resources.FSCommonReply, error) {
	out := new(resources.FSCommonReply)
	err := c.cc.Invoke(ctx, FileSystemServiceV1_CreateFSDirectory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceV1Client) ListEntries(ctx context.Context, in *resources.FSCommonRequest, opts ...grpc.CallOption) (*resources.FSListEntriesReply, error) {
	out := new(resources.FSListEntriesReply)
	err := c.cc.Invoke(ctx, FileSystemServiceV1_ListEntries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceV1Client) CreateFSFile(ctx context.Context, in *resources.FSCreateFileRequest, opts ...grpc.CallOption) (*resources.FSCommonReply, error) {
	out := new(resources.FSCommonReply)
	err := c.cc.Invoke(ctx, FileSystemServiceV1_CreateFSFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceV1Client) ObjectCopy(ctx context.Context, in *resources.FSObjectCopyRequest, opts ...grpc.CallOption) (*resources.FSCommonReply, error) {
	out := new(resources.FSCommonReply)
	err := c.cc.Invoke(ctx, FileSystemServiceV1_ObjectCopy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceV1Client) ObjectRemove(ctx context.Context, in *resources.FSCommonRequest, opts ...grpc.CallOption) (*resources.FSCommonReply, error) {
	out := new(resources.FSCommonReply)
	err := c.cc.Invoke(ctx, FileSystemServiceV1_ObjectRemove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceV1Client) ObjectRename(ctx context.Context, in *resources.FSObjectRenameRequest, opts ...grpc.CallOption) (*resources.FSCommonReply, error) {
	out := new(resources.FSCommonReply)
	err := c.cc.Invoke(ctx, FileSystemServiceV1_ObjectRename_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceV1Client) ObjectExist(ctx context.Context, in *resources.FSCommonRequest, opts ...grpc.CallOption) (*resources.FSObjectExistReply, error) {
	out := new(resources.FSObjectExistReply)
	err := c.cc.Invoke(ctx, FileSystemServiceV1_ObjectExist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceV1Client) ObjectEquivalent(ctx context.Context, in *resources.FSObjectEquivalentRequest, opts ...grpc.CallOption) (*resources.FSObjectEquivalentReply, error) {
	out := new(resources.FSObjectEquivalentReply)
	err := c.cc.Invoke(ctx, FileSystemServiceV1_ObjectEquivalent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceV1Client) ObjectSize(ctx context.Context, in *resources.FSObjectSizeRequest, opts ...grpc.CallOption) (*resources.FSObjectSizeReply, error) {
	out := new(resources.FSObjectSizeReply)
	err := c.cc.Invoke(ctx, FileSystemServiceV1_ObjectSize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceV1Client) GetFileAttribute(ctx context.Context, in *resources.FSCommonRequest, opts ...grpc.CallOption) (*resources.FSFileAttributeReply, error) {
	out := new(resources.FSFileAttributeReply)
	err := c.cc.Invoke(ctx, FileSystemServiceV1_GetFileAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceV1Client) BatchGetSize(ctx context.Context, in *resources.FSBatchGetSizeRequest, opts ...grpc.CallOption) (*resources.FSBatchGetSizeReply, error) {
	out := new(resources.FSBatchGetSizeReply)
	err := c.cc.Invoke(ctx, FileSystemServiceV1_BatchGetSize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceV1Client) BatchObjectRemove(ctx context.Context, in *resources.FSBatchObjectRemoveRequest, opts ...grpc.CallOption) (*resources.FSCommonReply, error) {
	out := new(resources.FSCommonReply)
	err := c.cc.Invoke(ctx, FileSystemServiceV1_BatchObjectRemove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileSystemServiceV1Server is the server API for FileSystemServiceV1 service.
// All implementations must embed UnimplementedFileSystemServiceV1Server
// for forward compatibility
type FileSystemServiceV1Server interface {
	CreateFSDirectory(context.Context, *resources.FSCommonRequest) (*resources.FSCommonReply, error)
	ListEntries(context.Context, *resources.FSCommonRequest) (*resources.FSListEntriesReply, error)
	CreateFSFile(context.Context, *resources.FSCreateFileRequest) (*resources.FSCommonReply, error)
	ObjectCopy(context.Context, *resources.FSObjectCopyRequest) (*resources.FSCommonReply, error)
	ObjectRemove(context.Context, *resources.FSCommonRequest) (*resources.FSCommonReply, error)
	ObjectRename(context.Context, *resources.FSObjectRenameRequest) (*resources.FSCommonReply, error)
	ObjectExist(context.Context, *resources.FSCommonRequest) (*resources.FSObjectExistReply, error)
	ObjectEquivalent(context.Context, *resources.FSObjectEquivalentRequest) (*resources.FSObjectEquivalentReply, error)
	ObjectSize(context.Context, *resources.FSObjectSizeRequest) (*resources.FSObjectSizeReply, error)
	GetFileAttribute(context.Context, *resources.FSCommonRequest) (*resources.FSFileAttributeReply, error)
	BatchGetSize(context.Context, *resources.FSBatchGetSizeRequest) (*resources.FSBatchGetSizeReply, error)
	BatchObjectRemove(context.Context, *resources.FSBatchObjectRemoveRequest) (*resources.FSCommonReply, error)
	mustEmbedUnimplementedFileSystemServiceV1Server()
}

// Generate Injection
type registerFileSystemServiceV1ServerGRPCResult struct{}

func (*registerFileSystemServiceV1ServerGRPCResult) String() string {
	return "FileSystemServiceV1ServerGRPCServer"
}

func RegisterFileSystemServiceV1ServerGRPCProvider(newer interface{}) []interface{} {
	return []interface{}{
		// For provide dependency
		fx.Annotate(
			newer,
			fx.As(new(FileSystemServiceV1Server)),
		),
		// For create instance
		fx.Annotate(
			registerFileSystemServiceV1ServerProviderImpl,
			fx.As(new(fmt.Stringer)),
			fx.ResultTags(`group:"grpc_register"`),
		),
	}
}

// registerFileSystemServiceV1ServerProviderImpl use to trigger register
func registerFileSystemServiceV1ServerProviderImpl(s grpc.ServiceRegistrar, srv FileSystemServiceV1Server) *registerFileSystemServiceV1ServerGRPCResult {
	registerFileSystemServiceV1Server(s, srv)
	return &registerFileSystemServiceV1ServerGRPCResult{}
}

// UnimplementedFileSystemServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedFileSystemServiceV1Server struct {
}

func (UnimplementedFileSystemServiceV1Server) CreateFSDirectory(context.Context, *resources.FSCommonRequest) (*resources.FSCommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFSDirectory not implemented")
}
func (UnimplementedFileSystemServiceV1Server) ListEntries(context.Context, *resources.FSCommonRequest) (*resources.FSListEntriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntries not implemented")
}
func (UnimplementedFileSystemServiceV1Server) CreateFSFile(context.Context, *resources.FSCreateFileRequest) (*resources.FSCommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFSFile not implemented")
}
func (UnimplementedFileSystemServiceV1Server) ObjectCopy(context.Context, *resources.FSObjectCopyRequest) (*resources.FSCommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectCopy not implemented")
}
func (UnimplementedFileSystemServiceV1Server) ObjectRemove(context.Context, *resources.FSCommonRequest) (*resources.FSCommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectRemove not implemented")
}
func (UnimplementedFileSystemServiceV1Server) ObjectRename(context.Context, *resources.FSObjectRenameRequest) (*resources.FSCommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectRename not implemented")
}
func (UnimplementedFileSystemServiceV1Server) ObjectExist(context.Context, *resources.FSCommonRequest) (*resources.FSObjectExistReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectExist not implemented")
}
func (UnimplementedFileSystemServiceV1Server) ObjectEquivalent(context.Context, *resources.FSObjectEquivalentRequest) (*resources.FSObjectEquivalentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectEquivalent not implemented")
}
func (UnimplementedFileSystemServiceV1Server) ObjectSize(context.Context, *resources.FSObjectSizeRequest) (*resources.FSObjectSizeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectSize not implemented")
}
func (UnimplementedFileSystemServiceV1Server) GetFileAttribute(context.Context, *resources.FSCommonRequest) (*resources.FSFileAttributeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileAttribute not implemented")
}
func (UnimplementedFileSystemServiceV1Server) BatchGetSize(context.Context, *resources.FSBatchGetSizeRequest) (*resources.FSBatchGetSizeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetSize not implemented")
}
func (UnimplementedFileSystemServiceV1Server) BatchObjectRemove(context.Context, *resources.FSBatchObjectRemoveRequest) (*resources.FSCommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchObjectRemove not implemented")
}
func (UnimplementedFileSystemServiceV1Server) mustEmbedUnimplementedFileSystemServiceV1Server() {}

// UnsafeFileSystemServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSystemServiceV1Server will
// result in compilation errors.
type UnsafeFileSystemServiceV1Server interface {
	mustEmbedUnimplementedFileSystemServiceV1Server()
}

func registerFileSystemServiceV1Server(s grpc.ServiceRegistrar, srv FileSystemServiceV1Server) {
	s.RegisterService(&FileSystemServiceV1_ServiceDesc, srv)
}

func _FileSystemServiceV1_CreateFSDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.FSCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceV1Server).CreateFSDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemServiceV1_CreateFSDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceV1Server).CreateFSDirectory(ctx, req.(*resources.FSCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemServiceV1_ListEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.FSCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceV1Server).ListEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemServiceV1_ListEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceV1Server).ListEntries(ctx, req.(*resources.FSCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemServiceV1_CreateFSFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.FSCreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceV1Server).CreateFSFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemServiceV1_CreateFSFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceV1Server).CreateFSFile(ctx, req.(*resources.FSCreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemServiceV1_ObjectCopy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.FSObjectCopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceV1Server).ObjectCopy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemServiceV1_ObjectCopy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceV1Server).ObjectCopy(ctx, req.(*resources.FSObjectCopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemServiceV1_ObjectRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.FSCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceV1Server).ObjectRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemServiceV1_ObjectRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceV1Server).ObjectRemove(ctx, req.(*resources.FSCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemServiceV1_ObjectRename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.FSObjectRenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceV1Server).ObjectRename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemServiceV1_ObjectRename_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceV1Server).ObjectRename(ctx, req.(*resources.FSObjectRenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemServiceV1_ObjectExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.FSCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceV1Server).ObjectExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemServiceV1_ObjectExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceV1Server).ObjectExist(ctx, req.(*resources.FSCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemServiceV1_ObjectEquivalent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.FSObjectEquivalentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceV1Server).ObjectEquivalent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemServiceV1_ObjectEquivalent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceV1Server).ObjectEquivalent(ctx, req.(*resources.FSObjectEquivalentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemServiceV1_ObjectSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.FSObjectSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceV1Server).ObjectSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemServiceV1_ObjectSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceV1Server).ObjectSize(ctx, req.(*resources.FSObjectSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemServiceV1_GetFileAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.FSCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceV1Server).GetFileAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemServiceV1_GetFileAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceV1Server).GetFileAttribute(ctx, req.(*resources.FSCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemServiceV1_BatchGetSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.FSBatchGetSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceV1Server).BatchGetSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemServiceV1_BatchGetSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceV1Server).BatchGetSize(ctx, req.(*resources.FSBatchGetSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemServiceV1_BatchObjectRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.FSBatchObjectRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceV1Server).BatchObjectRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemServiceV1_BatchObjectRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceV1Server).BatchObjectRemove(ctx, req.(*resources.FSBatchObjectRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileSystemServiceV1_ServiceDesc is the grpc.ServiceDesc for FileSystemServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSystemServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.filesystem.service.filesystemservicev1.FileSystemServiceV1",
	HandlerType: (*FileSystemServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFSDirectory",
			Handler:    _FileSystemServiceV1_CreateFSDirectory_Handler,
		},
		{
			MethodName: "ListEntries",
			Handler:    _FileSystemServiceV1_ListEntries_Handler,
		},
		{
			MethodName: "CreateFSFile",
			Handler:    _FileSystemServiceV1_CreateFSFile_Handler,
		},
		{
			MethodName: "ObjectCopy",
			Handler:    _FileSystemServiceV1_ObjectCopy_Handler,
		},
		{
			MethodName: "ObjectRemove",
			Handler:    _FileSystemServiceV1_ObjectRemove_Handler,
		},
		{
			MethodName: "ObjectRename",
			Handler:    _FileSystemServiceV1_ObjectRename_Handler,
		},
		{
			MethodName: "ObjectExist",
			Handler:    _FileSystemServiceV1_ObjectExist_Handler,
		},
		{
			MethodName: "ObjectEquivalent",
			Handler:    _FileSystemServiceV1_ObjectEquivalent_Handler,
		},
		{
			MethodName: "ObjectSize",
			Handler:    _FileSystemServiceV1_ObjectSize_Handler,
		},
		{
			MethodName: "GetFileAttribute",
			Handler:    _FileSystemServiceV1_GetFileAttribute_Handler,
		},
		{
			MethodName: "BatchGetSize",
			Handler:    _FileSystemServiceV1_BatchGetSize_Handler,
		},
		{
			MethodName: "BatchObjectRemove",
			Handler:    _FileSystemServiceV1_BatchObjectRemove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/filesystem-service/v1/services/filesystem.filesystem.service.v1.proto",
}
