// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.1
// - protoc             v5.26.1
// source: api/filesystem-service/v1/services/filesystem.registry.service.v1.proto

package filesystemservicev1

import (
	context "context"
	fmt "fmt"

	client "gitlab.lainuoniao.cn/eden-quan/go-biz-kit/client"
	def "gitlab.lainuoniao.cn/eden-quan/go-biz-kit/config/def"
	resources "gitlab.lainuoniao.cn/eden-quan/proto-service/api/filesystem-service/v1/resources"
	fx "go.uber.org/fx"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7
const _ = fx.Version

var _ = new(fmt.Stringer)
var _ = new(def.Server)
var _ = new(client.RegisterGRPCClientFactoryType)

const (
	FileRegistrySystemServiceV1_QueryValue_FullMethodName      = "/api.filesystem.service.filewriteservicev1.FileRegistrySystemServiceV1/QueryValue"
	FileRegistrySystemServiceV1_SetValue_FullMethodName        = "/api.filesystem.service.filewriteservicev1.FileRegistrySystemServiceV1/SetValue"
	FileRegistrySystemServiceV1_DeleteValue_FullMethodName     = "/api.filesystem.service.filewriteservicev1.FileRegistrySystemServiceV1/DeleteValue"
	FileRegistrySystemServiceV1_ListValue_FullMethodName       = "/api.filesystem.service.filewriteservicev1.FileRegistrySystemServiceV1/ListValue"
	FileRegistrySystemServiceV1_Delete_FullMethodName          = "/api.filesystem.service.filewriteservicev1.FileRegistrySystemServiceV1/Delete"
	FileRegistrySystemServiceV1_List_FullMethodName            = "/api.filesystem.service.filewriteservicev1.FileRegistrySystemServiceV1/List"
	FileRegistrySystemServiceV1_BatchQueryValue_FullMethodName = "/api.filesystem.service.filewriteservicev1.FileRegistrySystemServiceV1/BatchQueryValue"
)

// FileRegistrySystemServiceV1Client is the client API for FileRegistrySystemServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileRegistrySystemServiceV1Client interface {
	QueryValue(ctx context.Context, in *resources.RGCommonValueRequest, opts ...grpc.CallOption) (*resources.RGQueryValueReply, error)
	SetValue(ctx context.Context, in *resources.RGSetValueRequest, opts ...grpc.CallOption) (*resources.RGSetValueReply, error)
	DeleteValue(ctx context.Context, in *resources.RGCommonValueRequest, opts ...grpc.CallOption) (*resources.RGDeleteValueReply, error)
	ListValue(ctx context.Context, in *resources.RGCommonRequest, opts ...grpc.CallOption) (*resources.RGListValueReply, error)
	Delete(ctx context.Context, in *resources.RGCommonRequest, opts ...grpc.CallOption) (*resources.RGDeleteReply, error)
	List(ctx context.Context, in *resources.RGCommonRequest, opts ...grpc.CallOption) (*resources.RGListReply, error)
	BatchQueryValue(ctx context.Context, in *resources.RGBatchQueryValueRequest, opts ...grpc.CallOption) (*resources.RGBatchQueryValueReply, error)
	RegisterNameForDiscover() string
}

type fileRegistrySystemServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func (c *fileRegistrySystemServiceV1Client) RegisterNameForDiscover() string {
	return "/file-registry-service/v1"
}

func newFileRegistrySystemServiceV1Client(cc grpc.ClientConnInterface) FileRegistrySystemServiceV1Client {
	return &fileRegistrySystemServiceV1Client{cc}
}

func registerFileRegistrySystemServiceV1ClientGRPCNameProvider() []string {
	return []string{"/file-registry-service/v1", "grpc"}
}

// RegisterFileRegistrySystemServiceV1ClientGRPCProvider is the provider for injection framework
// creator is the factory function which use to create the FileRegistrySystemServiceV1Client instance/implement
// the creator function receive dependency provided by fx to create ClientInterface,
// and returns the new dependency can use by others functions
func RegisterFileRegistrySystemServiceV1ClientGRPCProvider(creator interface{}) []interface{} {
	return []interface{}{
		fx.Annotate(
			newFileRegistrySystemServiceV1Client,
			fx.As(new(FileRegistrySystemServiceV1Client)),
			fx.ParamTags(`name:"/file-registry-service/v1/grpc/fileRegistrySystemServiceV1"`),
		),
		fx.Annotate(
			creator,
			fx.As(new(grpc.ClientConnInterface)),
			fx.ParamTags(`name:"/file-registry-service/v1/grpc/name/fileRegistrySystemServiceV1"`),
			fx.ResultTags(`name:"/file-registry-service/v1/grpc/fileRegistrySystemServiceV1"`),
		),
		fx.Annotate(
			registerFileRegistrySystemServiceV1ClientGRPCNameProvider,
			fx.ResultTags(`name:"/file-registry-service/v1/grpc/name/fileRegistrySystemServiceV1"`),
		),
	}
}

type FileRegistrySystemServiceV1ClientGRPCFactory interface {
	New(conf *def.Server) (FileRegistrySystemServiceV1Client, error)
}

type fileRegistrySystemServiceV1ClientGRPCFactoryImpl struct {
	factory client.RegisterGRPCClientFactoryType
}

func (p *fileRegistrySystemServiceV1ClientGRPCFactoryImpl) New(conf *def.Server) (FileRegistrySystemServiceV1Client, error) {
	cc, err := p.factory(conf)
	if err != nil {
		return nil, fmt.Errorf("create FileRegistrySystemServiceV1Client failed cause %s", err)
	}
	return &fileRegistrySystemServiceV1Client{cc: cc}, nil
}

func RegisterFileRegistrySystemServiceV1ClientGRPCFactoryProvider(factory client.RegisterGRPCClientFactoryType) FileRegistrySystemServiceV1ClientGRPCFactory {
	return &fileRegistrySystemServiceV1ClientGRPCFactoryImpl{factory: factory}
}

func (c *fileRegistrySystemServiceV1Client) QueryValue(ctx context.Context, in *resources.RGCommonValueRequest, opts ...grpc.CallOption) (*resources.RGQueryValueReply, error) {
	out := new(resources.RGQueryValueReply)
	err := c.cc.Invoke(ctx, FileRegistrySystemServiceV1_QueryValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRegistrySystemServiceV1Client) SetValue(ctx context.Context, in *resources.RGSetValueRequest, opts ...grpc.CallOption) (*resources.RGSetValueReply, error) {
	out := new(resources.RGSetValueReply)
	err := c.cc.Invoke(ctx, FileRegistrySystemServiceV1_SetValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRegistrySystemServiceV1Client) DeleteValue(ctx context.Context, in *resources.RGCommonValueRequest, opts ...grpc.CallOption) (*resources.RGDeleteValueReply, error) {
	out := new(resources.RGDeleteValueReply)
	err := c.cc.Invoke(ctx, FileRegistrySystemServiceV1_DeleteValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRegistrySystemServiceV1Client) ListValue(ctx context.Context, in *resources.RGCommonRequest, opts ...grpc.CallOption) (*resources.RGListValueReply, error) {
	out := new(resources.RGListValueReply)
	err := c.cc.Invoke(ctx, FileRegistrySystemServiceV1_ListValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRegistrySystemServiceV1Client) Delete(ctx context.Context, in *resources.RGCommonRequest, opts ...grpc.CallOption) (*resources.RGDeleteReply, error) {
	out := new(resources.RGDeleteReply)
	err := c.cc.Invoke(ctx, FileRegistrySystemServiceV1_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRegistrySystemServiceV1Client) List(ctx context.Context, in *resources.RGCommonRequest, opts ...grpc.CallOption) (*resources.RGListReply, error) {
	out := new(resources.RGListReply)
	err := c.cc.Invoke(ctx, FileRegistrySystemServiceV1_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRegistrySystemServiceV1Client) BatchQueryValue(ctx context.Context, in *resources.RGBatchQueryValueRequest, opts ...grpc.CallOption) (*resources.RGBatchQueryValueReply, error) {
	out := new(resources.RGBatchQueryValueReply)
	err := c.cc.Invoke(ctx, FileRegistrySystemServiceV1_BatchQueryValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileRegistrySystemServiceV1Server is the server API for FileRegistrySystemServiceV1 service.
// All implementations must embed UnimplementedFileRegistrySystemServiceV1Server
// for forward compatibility
type FileRegistrySystemServiceV1Server interface {
	QueryValue(context.Context, *resources.RGCommonValueRequest) (*resources.RGQueryValueReply, error)
	SetValue(context.Context, *resources.RGSetValueRequest) (*resources.RGSetValueReply, error)
	DeleteValue(context.Context, *resources.RGCommonValueRequest) (*resources.RGDeleteValueReply, error)
	ListValue(context.Context, *resources.RGCommonRequest) (*resources.RGListValueReply, error)
	Delete(context.Context, *resources.RGCommonRequest) (*resources.RGDeleteReply, error)
	List(context.Context, *resources.RGCommonRequest) (*resources.RGListReply, error)
	BatchQueryValue(context.Context, *resources.RGBatchQueryValueRequest) (*resources.RGBatchQueryValueReply, error)
	mustEmbedUnimplementedFileRegistrySystemServiceV1Server()
}

// Generate Injection
type registerFileRegistrySystemServiceV1ServerGRPCResult struct{}

func (*registerFileRegistrySystemServiceV1ServerGRPCResult) String() string {
	return "FileRegistrySystemServiceV1ServerGRPCServer"
}

func RegisterFileRegistrySystemServiceV1ServerGRPCProvider(newer interface{}) []interface{} {
	return []interface{}{
		// For provide dependency
		fx.Annotate(
			newer,
			fx.As(new(FileRegistrySystemServiceV1Server)),
		),
		// For create instance
		fx.Annotate(
			registerFileRegistrySystemServiceV1ServerProviderImpl,
			fx.As(new(fmt.Stringer)),
			fx.ResultTags(`group:"grpc_register"`),
		),
	}
}

// registerFileRegistrySystemServiceV1ServerProviderImpl use to trigger register
func registerFileRegistrySystemServiceV1ServerProviderImpl(s grpc.ServiceRegistrar, srv FileRegistrySystemServiceV1Server) *registerFileRegistrySystemServiceV1ServerGRPCResult {
	registerFileRegistrySystemServiceV1Server(s, srv)
	return &registerFileRegistrySystemServiceV1ServerGRPCResult{}
}

// UnimplementedFileRegistrySystemServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedFileRegistrySystemServiceV1Server struct {
}

func (UnimplementedFileRegistrySystemServiceV1Server) QueryValue(context.Context, *resources.RGCommonValueRequest) (*resources.RGQueryValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryValue not implemented")
}
func (UnimplementedFileRegistrySystemServiceV1Server) SetValue(context.Context, *resources.RGSetValueRequest) (*resources.RGSetValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValue not implemented")
}
func (UnimplementedFileRegistrySystemServiceV1Server) DeleteValue(context.Context, *resources.RGCommonValueRequest) (*resources.RGDeleteValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteValue not implemented")
}
func (UnimplementedFileRegistrySystemServiceV1Server) ListValue(context.Context, *resources.RGCommonRequest) (*resources.RGListValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListValue not implemented")
}
func (UnimplementedFileRegistrySystemServiceV1Server) Delete(context.Context, *resources.RGCommonRequest) (*resources.RGDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFileRegistrySystemServiceV1Server) List(context.Context, *resources.RGCommonRequest) (*resources.RGListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedFileRegistrySystemServiceV1Server) BatchQueryValue(context.Context, *resources.RGBatchQueryValueRequest) (*resources.RGBatchQueryValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchQueryValue not implemented")
}
func (UnimplementedFileRegistrySystemServiceV1Server) mustEmbedUnimplementedFileRegistrySystemServiceV1Server() {
}

// UnsafeFileRegistrySystemServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileRegistrySystemServiceV1Server will
// result in compilation errors.
type UnsafeFileRegistrySystemServiceV1Server interface {
	mustEmbedUnimplementedFileRegistrySystemServiceV1Server()
}

func registerFileRegistrySystemServiceV1Server(s grpc.ServiceRegistrar, srv FileRegistrySystemServiceV1Server) {
	s.RegisterService(&FileRegistrySystemServiceV1_ServiceDesc, srv)
}

func _FileRegistrySystemServiceV1_QueryValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.RGCommonValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRegistrySystemServiceV1Server).QueryValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRegistrySystemServiceV1_QueryValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRegistrySystemServiceV1Server).QueryValue(ctx, req.(*resources.RGCommonValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRegistrySystemServiceV1_SetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.RGSetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRegistrySystemServiceV1Server).SetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRegistrySystemServiceV1_SetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRegistrySystemServiceV1Server).SetValue(ctx, req.(*resources.RGSetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRegistrySystemServiceV1_DeleteValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.RGCommonValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRegistrySystemServiceV1Server).DeleteValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRegistrySystemServiceV1_DeleteValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRegistrySystemServiceV1Server).DeleteValue(ctx, req.(*resources.RGCommonValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRegistrySystemServiceV1_ListValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.RGCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRegistrySystemServiceV1Server).ListValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRegistrySystemServiceV1_ListValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRegistrySystemServiceV1Server).ListValue(ctx, req.(*resources.RGCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRegistrySystemServiceV1_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.RGCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRegistrySystemServiceV1Server).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRegistrySystemServiceV1_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRegistrySystemServiceV1Server).Delete(ctx, req.(*resources.RGCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRegistrySystemServiceV1_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.RGCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRegistrySystemServiceV1Server).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRegistrySystemServiceV1_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRegistrySystemServiceV1Server).List(ctx, req.(*resources.RGCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRegistrySystemServiceV1_BatchQueryValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.RGBatchQueryValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRegistrySystemServiceV1Server).BatchQueryValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRegistrySystemServiceV1_BatchQueryValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRegistrySystemServiceV1Server).BatchQueryValue(ctx, req.(*resources.RGBatchQueryValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileRegistrySystemServiceV1_ServiceDesc is the grpc.ServiceDesc for FileRegistrySystemServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileRegistrySystemServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.filesystem.service.filewriteservicev1.FileRegistrySystemServiceV1",
	HandlerType: (*FileRegistrySystemServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryValue",
			Handler:    _FileRegistrySystemServiceV1_QueryValue_Handler,
		},
		{
			MethodName: "SetValue",
			Handler:    _FileRegistrySystemServiceV1_SetValue_Handler,
		},
		{
			MethodName: "DeleteValue",
			Handler:    _FileRegistrySystemServiceV1_DeleteValue_Handler,
		},
		{
			MethodName: "ListValue",
			Handler:    _FileRegistrySystemServiceV1_ListValue_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FileRegistrySystemServiceV1_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _FileRegistrySystemServiceV1_List_Handler,
		},
		{
			MethodName: "BatchQueryValue",
			Handler:    _FileRegistrySystemServiceV1_BatchQueryValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/filesystem-service/v1/services/filesystem.registry.service.v1.proto",
}
